.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH assembleDesign  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBassembleDesign\fR \-  Brings back specified block data to the top-level design for chip assembly
.SH Syntax \fBassembleDesign\fR    [-help]   [-keepPGPinGeometry]   [-keep_block_halo]  [-outFile <fileName>]  [-skipCells] [-skipComponents] [-skipNets]  [-skipSpecialNets]   {{[-topDir <dirname> [-mmmcFile <mmmcFile>] [-cpfFile <cpfFile>]]      {[-blockDir <dirname> [[-fe] | [-fplan]]][-blockData {<defFileName netListFileName>} | {-fplan|-fe}][-noDefMerge]}}         | {[-topDesign {<topLib topCell topView>} [-mmmcFile <mmmcFile>] [-cpfFile <cpfFile>]]           {[-block {<blockLib blockCell blockView>} | -blockCell <blockCell>]      [-allTimingBlocks [-exceptBlocks {<list of blocks>}] [-reportOnly]]}}}   [-fe | -fplan | -noDefMerge ]   [-keepPinGeometry]
.P Brings back specified block data to the top-level design for chip assembly. The top-level design should instantiate each block as a hard macro whose size matches the design size used for each block when it was implemented. After assembleDesign has completed, the result is a a full-chip design with one or more blocks merged at the location where each block was previously instantiated as a hard macro. You should run this command from the directory with the full chip-level floorplan for the top-down hierarchical flow. 
.P There are two main modes of operation -  full and incremental.
.RS  "*" 2 Full mode: When operating in full mode, a session is initiated with the assembleDesign command which first loads the top-level design with blocks represented as hard macros then each block is merged within the full-chip context.
.RE
.RS  "*" 2 Incremental mode: When operating in incremental mode, a top-level design is loaded prior to calling assembleDesign which then merges the contents of one or more blocks.
.RE
.P Notes:
.RS  "*" 2 The assembleDesign command supports designs saved in the Innovus database format as well as OpenAccess designs.  "*" 2 The assembleDesign command supports the incremental capability which handles master/clones partitions at different levels of hierarchy and supports nested partitions. The incremental assembleDesign capability enables partitions to be brought back in one session, thus, avoiding the need to run multiple sessions for bringing back all the data of a design. You can call the incremental assembleDesign for a block multiple times in the same session without having to partition it.  "*" 2 The assembleDesign command supports mixed-origin design. That is, all partitions can have a design origin at the center, lower-left, any location inside the design boundary, or any location outside the design boundary. You can use this command after implementing blocks and top-level designs.  "*" 2 The assembleDesign command preserves Interface Logic Model (ILM) information by automatically bringing back ILMs from block level design to full-chip level design. For DEF data, ILMs can only be brought back if the -blockDir option is specified.  "*" 2 The assembleDesign command supports mixed data types. While specifying partition blocks, you can have different types of data for different partition blocks.  "*" 2 The assembleDesign command supports partitions with flexmodels. It re-assembles partition blocks with flexmodels back to the top-level design.  "*" 2 The assembleDesign command can read design information from the global init_* variables saved in the *.global file.  "*" 2 The assembleDesign command internally calls the applyGlobalNets command that applies or restores the global net connectivity rules to the design and creates the necessary connections between instances and global nets. Consequently, the assembleDesign command automatically generates a database where the global nets are already connected.  This helps to ensure that all instance are correctly tied to PG nets.  "*" 2 The assembleDesign command internally checks color issues and uses the shift-mask functionality to assign correct colors to objects. As a result, at the end of assembleDesign, the objects are already given the mask numbers (colorized) and the design has less color violations.  "*" 2  The assemble_design command compares the properties of each block and top and uses a specific resolution for each property.  "*" 2  The assembleDesign command (DEF based) supports multi-threading. It honors the settings of the setMultiCpuUsage -localCpu parameter that is used to specify the number of CPUs on the local machine and is required for multi-threading.  Note: This capability is not supported by the -fe based assembleDesign.
.RE
.P During assembleDesign all rows are cut at the top and only the rows from inside the block are brought at the time of assembly. The checkPlace command does not report any false placement violations. Only in cases where partitions are rotated R90 (like vertical rows ) are the cells marked as fixed. 
.P A summary report is generated at the end of each assembleDesign run which helps in debugging issues. The generated report includes information like the runtime for assembleDesign, number of partitions and their instance count.This report is useful in identifying potential issues in the flow. 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes the type and default information for each assembleDesign parameter. For a detailed description of the command and all of its parameters, use the  man command:   man assembleDesign  "\fB-allTimingBlocks\fR" Enables automatic detection and assembly of blocks with digital content. The -blockCell option can be used to manually force blocks to be assembled, and -ignore_timing_blocks option can be used to exclude cells from being assembled as it overrides to the default list of blocks to be assembled.  Data_type: bool, optional  "\fB-block <blockLib> <blockCell> <blockView>  \fR" Specifies the block-level library, cell, and view names respectively for a design that was saved into an OpenAccess database. This parameter is used when bringing back block data for the partition from an OpenAccess database.  Note: If you specify more than one block-level design, specify the -block option separately for each block. For example:  -block libForOA TDSP_CORE ptnView1 -block libForOA TDSP_ARB ptnView1  Data_type: string, optional  "\fB-blockCell  <b><lockCell>\fR" Specifies the cell name for the block cell.  Data_type: string, optional  "\fB-blockData <defFileName netlistName>  \fR" Specifies the DEF file name and the Verilog netlist file name. Use this parameter if the Verilog netlist file name or the DEF file name is different from the cell or module name. You must provide the full path (absolute or relative) with the file names. This is distinct from using the -blockDir option in that only a DEF file and Verilog netlist are required as opposed to a database saved with the saveDesign command. If a design contains multiple instantiations of a block, -blockData only needs to be specified once per master.  Note: If you specify more than one block-level design, specify the -blockData option separately for each block-level DEF file and Verilog netlist file. For example:  -blockData block_a.def block_a.v -blockData block_b.def block_b.v  gzipped files are supported.  Data_type: string, optional  "\fB-blockDir <dirname>\fR" Specifies the path to the block-level design(s). This directory should be generated by the saveDesign -def command.  Note: If you specify more than one block-level design, specify the -blockDir option separately for each block-level directory. For example:  -blockDir block_a.enc.dat -blockDir block_b.enc.dat  Data_type: string, optional  "\fB-cpfFile <CPFFile>\fR" Specifies the name of the (Chip Level) CPF file that contains the power intent and timing information.  Data_type: string, optional  "\fB-exceptBlocks {<list_of_blocks>}\fR" Specifies the list of block names to be excluded from being assembled even if they contain digital content. This option only applies to the case where -allTimingBlocks is used. If not specified, there is no restriction on the detection and assembly that is automatically determined.  Default: ""  Data_type: string, optional  "\fB-fe\fR" Specifies that Innovus place-and-route data should be used for -blockDir option.  Note: The -fe parameter cannot be used with the -blockData parameter because the -fe parameter points to data from the Innovus database format whereas the -blockData parameter points to data from Verilog netlist and DEF name.  Default: By default, data from DEF files is used.  Data_type: bool, optional  "\fB-fplan\fR" Specifies that only floorplan data should be assembled. When specified it brings back the floorplan changes from a partition block to full-chip level design. It supports un-committed partition(s) and replaces the top level uncommitted partition(s) with updated block floorplan data.  Note: After assembleDesign -fplan command, any signal net at top-level design may be overlapped with other floorplan objects. You may need to reroute or ECO route the design. Additionally, PG net of CHIP, place, and route data may not be brought back.  Data_type: bool, optional  "\fB-keep_block_halo\fR" When specified, the assembleDesign command preserves the block place and route halo.  Data_type: bool, optional  "\fB-keepPGPinGeometry\fR" Retains the partition PG pin geometry.  Data_type: bool, optional  "\fB-keepPinGeometry\fR" Specifies that for every partition pin, a DRCFILL metal of the type special route is placed on top of the partition pins. The -keepPinGeometry parameter is used for analysis (both RC extraction, and DRC checking).  Note: If you intend to run incremental routing flat after assembleDesign, then you must either not use this option, or delete the DRCFILL shapes and allow the nanoRoute router to do any repair needed at the pin junctions before incremental routing is done.  Data_type: bool, optional   "\fB-mmmcFile <mmmcFile>  \fR" Specifies the name of the (Chip Level) MMMC file that is used to supply the MMMC information. Normally, it is a chip level file named viewDefinition.tcl. When assembleDesign is used to incrementally assemble blocks this option isn't applicable since the timing environment should have already been established when loading the top-level design.  Data_type: string, optional  "\fB-noDefMerge    \fR" Specifies that the DEF merge capability will be disabled and normal assembleDesign will be used.  Data_type: bool, optional  "\fB-outFile <fileName>\fR" Specifies name of the output file.   Default:
./<design>.assembleDesign.rpt   Data_type: string, optional  "\fB-reportOnly\fR" When enabled, the assembleDesign command only reports the list of blocks that would be assembled and does not perform actual assembling.  Note: The -reportOnly parameter can only be used in the assembleDesign command along with the -allTimingBlocks option, to  get a list of (and not actually assemble) blocks that would be assembled by a subsequent assembleDesign -allTimingBlocks command invocation without the -reportOnly option.  This list of blocks can be used to include or exclude blocks to be assembled via the -blockCell or -exceptblocks options.  Data_type: bool, optional  "\fB-skipCells\fR" Skips merging standard cells. It does not load the standard cells section from DEF.  Data_type: bool, optional  "\fB-skipComponents\fR" Skips merging all components.It does not load the COMPONENT section from DEF.  Data_type: bool, optional  "\fB-skipNets\fR" Skips merging signal routes. It does not load the NETS section from DEF.  Data_type: bool, optional  "\fB-skipSpecialNets\fR" Skips merging special routes. It does not load the SPECIALNETS section from DEF.  Data_type: bool, optional  "\fB-topDesign <topLib topCell topView>  \fR" Specifies the top-level library, cell, and view names respectively for a design that was saved into an OpenAccess database. This parameter is used when bringing back top-level data from an OpenAccess database.  Data_type: string, optional  "\fB-topDir <dirname>  \fR" Specifies the path to the top-level design created by saveDesign -def. This design directory should contain the Verilog netlist and DEF files. Typically, this directory has the extension
.enc.dat  Data_type: string, optional 
.SH Examples
.RS  "*" 2 The following command assembles the design after bringing back information from the top-level cell and two block-level cells. The top-level design data is in the top.enc.dat directory and the block-level data is in the block_a.enc.dat and block_b.enc.dat directories.  assembleDesign -topDir top.enc.dat -blockDir block_a.enc.dat -blockDir block_b.enc.dat
.RE
.RS  "*" 2 The following command assembles a design with the top-level restored from an database which was previously saved with saveDesign -def with block_a instantiated as an abstracted hard macro.  The contents of block_a are defined by a DEF and Verilog netlist:
.RE
.RS
.RS  "*" 2 the DEF file with the name block_a.def
.RE 
.RE
.RS
.RS  "*" 2 the Verilog netlist block_a.v   assembleDesign -topDir top.enc.dat -blockData block_a.def block_a.v
.RE 
.RE
.RS  "*" 2 The following commands load a top-level design then incrementally calls assembleDesign to pull in the contents of one hard macro in the design:
.RS  "*" 2 top.enc.dat is a top-level design saved by saveDesign -def where block_a is represented by an abstract  "*" 2 block_a.def and block_a.v represent the physical contents of block_a in DEF and Verilog format  "*" 2 restoreDesign top.enc.dat top  "*" 2 assembleDesign -blockData block_a.def block_a.v
.RE 
.RE
.RS  "*" 2 The following command assembles a design that was saved in an OpenAccess database. The design contains two blocks.
.RE
.RS
.RS  "*" 2 The library, cell, and view names for the top-level are libForOA, DTMF, and ptnView1 respectively.
.RE 
.RE
.RS
.RS  "*" 2 The library, cell, and view names for the first block are libForOA, TDSP_CORE, and ptnView1 respectively.
.RE 
.RE
.RS
.RS  "*" 2 The library, cell, and view names for the second block are libForOA, TDSP_ARB, and ptnView1 respectively.   assembleDesign -topDesign {libForOA DTMF ptnView1} -block {libForOA TDSP_CORE ptnView1} -block {libForOA TDSP_ARB ptnView1}
.RE 
.RE
.RS  "*" 2 The following command is an example of incremental assemble design capability that can restore master and clones at different levels of hierarchy. Along with assembling nested partitions:
.RE
.RS
.RS  "*" 2  Block1 and Block2 are partitions at top level
.RE 
.RE
.RS
.RS  "*" 2  Block1 contains Block3 and Block4
.RE 
.RE
.RS
.RS  "*" 2  Block4 is a clone of Block2   restoreDesign topDesign.enc.dat top  assembleDesign -blockDir Block1.enc.dat -blockDir Block2.enc.dat -blockDir Block3.enc.dat
.RE  "*" 2  -mmmcFile and -cpfFile do not work with incremental assembleDesign since the timing and power intent is defined during design initialization, however when running assembleDesign to fully initialize the design timing and power intent can be supplied:  assembleDesign -topDir top.enc.dat -blockDir block_a.enc.dat -mmmcFile <viewDefinition.tcl> -cpfFile CPFFile
.RE 
.SH Related Information
.RS  "*" 2 partition  "*" 2 saveDesign  "*" 2 Partitioning the Design chapter in the Innovus User Guide 
.RS  "*" 2 Flow Methodologies  "*" 2 Handling of Blackboxes with Non-R0 Orientation  "*" 2 Working with OpenAccess Database
.RE 
.RE
.P
