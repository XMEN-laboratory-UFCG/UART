.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH assignIoPins  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBassignIoPins\fR \-  Assigns the top I/O pin locations for a block-level design
.SH Syntax \fBassignIoPins\fR    [-help]    [-align]   [-debugPinAll]   [-debugPinFile <fileName>]     [-improveSI]        [ {-pin { <pinNameList> } | -pin_file  <fileName>  | -exclude_pin_file  <fileName> } [-moveFixedPin ]  [-ignore_group_pins ]]   [-autoBusGroup]
.P Assigns the top I/O pin locations for a block-level design. Set the maximum or minimum pin layers with the  setPinAssignMode -maxLayer or -minLayer parameters. By default, the assignIoPins command sets the depth of all partition pins equal to: MINAREA/pin width. This ensures that the minimum area rule is met. However, if any pin-size-related constraints are specified on these pins, the user-specified pin size will have a higher precedence.
.P Notes: 
.RS  "*" 2 The MINAREA/pin width means that the default pin width will be met MAR (minimum area rule) if an area rule of this layer is defined in the technology LEF. An I/O pin width value is based on the following order:  1. User-specified pin width constraint.  2. Minimum area rule of the layer if it is available in the technology file.  3. Default layer width  "*" 2 When assigning pins, the assignIoPins command does not check for violations between placed pins and shapes of objects (such as macros, standard cells, etc) just inside the partition fence (design boundary). This may result in DRV violations if the fence (design boundary) to core distance is zero.  "*" 2 The assignIoPins command honors preferred routing layer attributes as soft constraints during pin assignment and reports the nets that have these attributes. It also honors the keep out spacing constraints on pin groups and net groups.  "*" 2 In bottom-up flow, the  assignIoPins command promotes both signal and P/G pins from the list of pins promoted by the  setPromotedMacroPin command.  "*" 2 The assignIoPins command honors net/pin groups that have all nets from multiple buffer chains added in the same group.  Such groups can be generated through bus guide flow, feedthrough insertion flow, or can be user created. It places the pins of such nets in order to achieve better pin alignment and improve the QoR. 
.RE
.P You can use this command after running placement and early global routing to legalize the I/O pins. However, placement is not a mandatory step for pin assignment. Placement is recommended for better QOR. 
.SH Parameters   "\fB-align\fR" If you specify this option, each top I/O pin will be aligned with one of the instance pins with which it is connected. The instance pin with which the I/O pin is aligned is the one whose distance from its nearest edge is shortest among all the instance pins connected to the top I/O pin.  Default: If you do not specify this option, the location of the top pin is based on the average of the distance of all instance pins (that are connected to the top I/O pin) from their respective nearest edges.  Data_type: bool, optional  "\fB-autoBusGroup\fR" Specifies that the buses will be grouped automatically.  Note: Internally the createPinGroup command is applied on buses. It is removed automatically after the command execution.  Data_type: bool, optional  "\fB-debugPinAll\fR" Specifies that all pins will be debugged.  Note: The -debugPinAll and -debugPinFile parameters can be used to write the following information in the log file:
.RS  "*" 2 Pin assign mode information  "*" 2 Connectivity information of each partition pin, including pinGroup/netGroup name and NDR name  "*" 2 Available pin slot information on each edge for each layer and pin slot density  "*" 2 PinGuide box and virtual pinGuide box information, master-clone series, feedthru chain and so on.  "*" 2 Reason for failure on the first failed location  "*" 2 For pins with location constraints, if the pin is not placed at the location constraint then the reason is provided in a tabular form.  "*" 2 For placed partition pins, the pin location, layer, edge, spacing and so on are provided.
.RE   Data_type: bool, optional   "\fB-debugPinFile <fileName>\fR" Specifies the file containing the pin-list for partition or the net that is to be used for debugging.  Data_type: string, optional   "\fB-exclude_pin_file <fileName>  \fR" Specifies pin-list to be excluded for partition in a file.  Data_type: string, optional  "\fB-help\fR" Outputs a brief description that includes the type and default information for each assignIoPins parameter.  For a detailed description of the command and all of its parameters, use the man command:    man assignIoPins  "\fB-ignore_group_pins\fR" Avoid placing the whole group of pins. With this parameter enabled, the pinGroup and netGroup pins are ignored during selected pin assignment.  Data_type: bool, optional  "\fB-improveSI\fR" Avoid signal integrity issues by blocking tracks while placing pins to avoid overlap of wires. With this parameter specified, the asignIoPins command does not allow pins to be placed on the tracks in an area which spans a layer higher or lower (on the preferred routing direction) and also on the tracks on the left and right of the placed pin.  Data_type: bool, optional  "\fB-moveFixedPin\fR" If you use this parameter, the specified pins with a <Fixed>status can also be moved. However, this parameter must be used with the -pin parameter to specify the list of fixed pins to move while assigning io-pins.  Note: Pins that are not specified but have a <Fixed>status are not moved.  Default: If you do not specify this parameter, the specified pins with a <Fixed>status are not moved.  Data_type: bool, optional  "\fB-pin <pinNameList>\fR" Specifies that only the specified pins should be assigned.  Note: To move fixed pins while assigning io pins, you must specify the -moveFixedPin parameter.  Default : If you do not specify this parameter, all pins are assigned.  Data_type: string, optional  "\fB-pin_file <fileName>\fR" Specifies the pin list for a partition in a file.  In the pin file, the pins and nets are specified in the following format:  Partition: <PtnName/BlockName> <Pin1> <Pin2> <..> <PinN>   Partition: <PtnName/BlockName> <Pin1> <Pin2> <..> <PinN>   Nets: <><netA><netB
..netN>  Note: While specifying the pin list in the pin_file, it is necessary to give the Partition keyword followed by the name of the partition or block. If this is not specified, no operations are performed.  You can specify multiple partitions in the same pin_file.  The pin_file does not support buses or wild cards for pin names. If a pin specified in the list or a partition is not present in the design, a warning is displayed.  Data_type: string, optional 
.SH Example
.RS  "*" 2 The following command assigns all io pins and can also move pins with fixed-status.  assignIoPins -moveFixedPin -pin *  "*" 2 The following command accept a file pinLst.txt that contains the list of pins and assigns io pins.  assignPtnPin -pin_file pinLst.txt  Where <pinLst.txt> contains:   Partition: top    out1  out2  out3  Partition: A  in1  in2  in3  Partition: B  pina  pinb  pinc   The assignIoPins command selects all Io pins under the section Partition:top.
.RE 
.SH Related Information
.RS  "*" 2 setPinAssignMode  "*" 2 createPinGroup  "*" 2 createPinGuide  "*" 2 createNetGroup  "*" 2 assignPtnPin  "*" 2 setPromotedMacroPin  "*" 2 Partitioning the Design chapter in the Innovus User Guide
.RS  "*" 2 Block Implementation  "*" 2 Assigning I/O Pins 
.RE 
.RE
.P
