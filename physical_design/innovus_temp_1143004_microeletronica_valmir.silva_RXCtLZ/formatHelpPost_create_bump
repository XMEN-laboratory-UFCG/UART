.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH create_bump  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBcreate_bump\fR \-  Creates bumps and instances of bump cells based on the specified pattern
.SH Syntax      \fBcreate_bump\fR  [-help]  [-allow_outside_of_die]  [-allow_overlap_control {keep_all keep_existing_bumps keep_new_bumps}]   -cell <bumpcell_name>  [-check_drc]      [-edge_spacing {<left bottom right top>}]  [-exclude_bump_area {<rect_list>}]  [ [-keep_out_region <width height>] | [-keep_out_pitch <value>] ]   [-loc <x y>]    [-loc_type {cell_center | cell_lowerleft | geometry_center | geometry_lowerleft}]    [-name_format {<string>, %i, %r, %c}]    [-orientation {R0 R90 R180 R270 MX MX90 MY MY90}]   [-respect_placement_blockage]  [-return_bumps_name]  [-start_index <index>]  [-pitch <x y> [-pattern_full_chip | -pattern_side {<side width>} | -pattern_array {<row column>} | -pattern_ring <width> | -pattern_center {<row column>}]]   [-stagger_type <type> [-stagger_offset <value>]]  [-relative_type {embedded_bump inst_pin_port block}     [[-relative_object {<inst_pin_port_list>}]      [-relative_block <inst>+] [-relative_block_constraint <fileName>]     [-relative_assignment] [-relative_offset <x y>]]]  [{-pattern_full_chip  | -pattern_array {<row column>} | -pattern_center {<row column>}} [-start_from {lower_left upper_left lower_right upper_right}]]
.P Creates bumps and instances of bump cells based on the specified pattern. Use one of the following parameters to specify the bump pattern in the chip:
.RS  "*" 2 -pattern_full_chip   "*" 2 -pattern_side {<side width>}   "*" 2 -pattern_array {<row column>}   "*" 2 -pattern_ring <width>   "*" 2 -pattern_center {<row column>}
.RE
.P If none of the above patterns is specified, create_bump creates a single bump at the specified location.
.P Bumps are usually placed in the top design. However, some blocks may also include bumps. Such bumps are called embedded bumps. When implementing the block design, use the following special keywords in the LEF definition for embedded bumps.
.RS  "*" 2 Add following property keywords in the head of tech LEF file  PROPERTYDEFINITION      LAYER LEF58_TYPE STRING ;  END PROPERTYDEFINITIONS
.RE
.RS  "*" 2 Add PASSIV LAYER definition after AP(top) layer  LAYER PASSIV    TYPE CUT ;    PROPERTY LEF58_TYPE "TYPE PASSIVATION ; " ;  END PASSIV
.RE
.RS  "*" 2 Add a same geometry on PASSIV layers with the bump pins  MACRO BUMP  CLASS COVER BUMP ;   
...       PIN A   
...                       PORT          LAYER PASSIV ;          POLYGON 27.985 0 67.565 0 95.55 27.985 95.55 67.565 67.565 95.55 27.985 95.55 0 67.565 0 27.985 ;          LAYER AP ;          POLYGON 27.985 0 67.565 0 95.55 27.985 95.55 67.565 67.565 95.55 27.985 95.55 0 67.565 0 27.985 ;        END      END A   END BUMP
.RE
.P After the block design is finished, the bumps are dumped out as one port of the pin with PASSIV layer and top layer (AP) as similar as below, tool could check if the port is the embedded bump by PASSIV layer from the top design.
.P PIN DQ0
.P     DIRECTION INOUT ;
.P     USE SIGNAL ;
.P     PORT
.P       LAYER AP ;
.P       POLYGON 759.9810 366.7830 799.5610 366.7830
.P               827.5460 338.7980 827.5460 299.2180
.P               799.5610 271.2330 759.9810 271.2330
.P               731.9960 299.2180 731.9960 338.7980 ;
.P       LAYER PASSIV ;
.P       POLYGON 759.9810 366.7830 799.5610 366.7830
.P               827.5460 338.7980 827.5460 299.2180
.P               799.5610 271.2330 759.9810 271.2330
.P               731.9960 299.2180 731.9960 338.7980 ;
.P END
.P     PORT
.P
...
.P END
.P
...
.P END DQ0
.P If you are creating an embedded bump, create_bump automatically creates a bump in the top design with the correct net assignment at the same location as the embedded bump.
.P create_bump also enables you to create bumps based on pin location.
.P Note - During bump placement trials, if you click the Undo button (or use the undo command) after running create_bump, the bump floorplan will return to the state it was in before create_bump. If you then click the Redo button (or use the redo command), the bump floorplan will reapply the changes made by create_bump. 
.SH Parameters   "\fB-help\fR" Prints a brief description that includes type and default information for each create_bump parameter.  For a detailed description of the command and all of its parameters, use the man command:  man create_bump  "\fB-allow_outside_of_die\fR" Allows bumps to be created outside of die area. When this option is specified, the tool ignores floorplan constraints when creating a bump array pattern. This option can be used only if -pattern_array and -location are also specified.  Data_type: bool, optional  "\fB-allow_overlap_control {keep_all keep_existing_bumps keep_new_bumps}\fR" Specifies the overlap control type. The allowed values for the -allow_overlap_control parameter are:
.RS  "*" 2 keep_all - Keeps all overlapping bumps.  "*" 2 keep_existing_bumps - Keeps the existing bumps before calling create_bump if there is an overlap. If this option is specified, create_bump skips creating a bump if there is an overlap and continues creating the remaining bumps. A warning message is displayed when bump creation is skipped to avoid overlap.  "*" 2 keep_new_bumps - Removes the existing bumps before calling create_bump, places the newly created bump if there is overlap, and then continues creating the remaining bumps. A warning message is displayed when deleting the existing bumps to avoid overlap. If the status of the existing bumps to be deleted is covered or fixed, a warning is displayed and the new bumps overlapping with the covered or fixed old bumps are not kept.
.RE   Note: create_bump: 
.RS  "*" 2 Checks overlaps between regular bumps by checking for pin overlaps on bumps.  "*" 2 Checks overlaps between dummy bumps by checking for OBS overlap.  "*" 2 Checks overlaps between dummy bumps and regular bumps by checking for OBS and bump pin overlap.
.RE   "\fB-check_drc\fR" Checks DRC rules and does not create a bump at any location where there is a violation. A suitable warning message is also issued.  For example, as indicated in the following diagram, no bump is created at the location where a short violation is detected when -check_drc is specified with create_bump.   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   In addition, a warning such as the following is displayed:  **WARN: (IMPSIP-9068):  New bump at (0.000, 75.000) has short violation and skipped.  Currently, create_bump -check_drc checks for the following types of violations:
.RS  "*" 2  Short violation  "*" 2  Min spacing violation  "*" 2  Cut spacing violation  "*" 2  EOL (end of line) violation
.RE   "\fB-cell <bumpcell_name>\fR" Specifies the name of the bump cell, which is used to create bumps.   "\fB-edge_spacing {<left bottom right top>}\fR" Specifies the minimum distances in microns to the edge of the chip from the lower left or center of the outermost bumps. The -loc_type value determines which point of the bump (lower-left or center of the cell or geometry) is used to compute the distance to the edge. The arrays start at the left, bottom location and extend to the right and top.  "\fB-exclude_bump_area {<rect_list>}\fR" Specifies the area to be excluded from bump placement. No bump geometry is allowed inside the specified area. It supports multiple rectangles, such as -exclude_bump_area {<llx1 lly1 urx1 ury1 llx2 lly2 urx2 ury2>
...}.   "\fB-keep_out_pitch <value>\fR" Defines a circular keep-out area with the bump center as the center and the specified pitch value as the radius. By default, the tool will not create a bump at a location if an existing bump violates the center-to-center pitch at that location, as shown below.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   If the bump-center-to-bump-center pitch at a location is smaller than the specified keep-out pitch value, the tool displays a warning. Whether the tool then retains the existing bumps in the overlap region or replaces them with the new bumps depends on the -allow_overlap_control parameter setting:
.RS  "*" 2 If -keep_out_pitch is specified but -allow_overlap_control is not specified, the tool keeps the existing bumps and does not add new bumps in the overlap region. This is the same behavior as when -keep_out_pitch is specified along with -allow_overlap_control keep_existing_bumps.  "*" 2 If -keep_out_pitch is specified along with -allow_overlap_control keep_new_bumps, the tool keeps the newly added bumps and deletes the existing bumps.
.RE   If the bump-center-to-bump-center pitch equals the specified keep-out pitch value, the tool creates bumps without any violations.  "\fB-keep_out_region <width height>\fR" Defines a dynamic, keep-out region where bumps are not going to be created if there are existing bumps in that region. The keep-out region is a box area of the specified width and height, and its center is the same as the bump center.   By default, if you specify -keep_out_region and there are existing bumps in the region, the tool displays a warning and keeps the existing bumps in the overlap area. Specify -allow_overlap_control keep_new_bumps if you want to keep the new bumps and delete existing ones in the case of overlap in the specified keep-out region.   "\fB-loc <x y>\fR" Specifies the <x> and <y> coordinates of the start point for bump creation based on location type. The unit is micron.  For different bump patterns, the -loc coordinates have different meanings for the start point:
.RS  "*" 2  For -pattern_full_chip, -pattern_side {bottom <width>}, -pattern_side {left <width>}, -pattern_array {<row column>}, -pattern_ring <width>, the start point is the location of the lower-left bump in the bump pattern.  "*" 2 For -pattern_side {top <width>}, the start point is the location of the upper-left bump in the bump pattern.  "*" 2 For -pattern_side {right <width>}, the start point is the location of the lower-right bump in the bump pattern.  "*" 2 For -pattern_center {<row column>}, the start point is the center of the bump pattern.
.RE   If the location violates the spacing rule defined by the option -edge_spacing, the tool issues a warning but still uses the -loc value for the start point.   "\fB-loc_type {cell_center | cell_lowerleft | geometry_center | geometry_lowerleft}\fR" Specifies the location type for bump creation.  The default type is cell_center.  "\fB-name_format {<string>, %i, %r, %c}\fR" Specifies the format for the bump name like a printf format, except that it uses %i for index, %r for row number, and %c for column number. The index starts at one more than the number of existing bumps in the design, unless -start_index is specified and increments for each bump created. This means if there are no bumps in the design, the index starts at 1 and if there are 100 bumps in the design, the index starts at 101.  The default name format is Bump_%i. Therefore, if there are no bumps in the design, the tool generates bumps named Bump_1, Bump_2, and so on, by default.  Some examples of the possible format are:
.RS  "*" 2 -name_format <prefix>_%i_<string>_%r_%c_<suffix>  "*" 2 -name_format %i  "*" 2 -name_format <bumpname> 
.RE   If there are any name collisions, an ERROR occurs and the bump pattern is not created.  "\fB-orientation {R0 R90 R180 R270 MX MX90 MY MY90}\fR" Specifies the orientation of the bump for bump generation.  Use this option if you are creating a pillar bump. A pillar bump can be rectangular and you may rotate the pillar bump by 90/180/270 degrees to alleviate package and chip routing problem.  Default: R0  Note: If you are creating a regular C4 bump, which is either octagonal or square in shape, rotation does not change its footprint in silicon.  "\fB-pattern_array {<row column>}\fR" Creates an array of bumps. The bump starts at the coordinates specified with -loc, and extends to the number of <row> and <column> values given from the start corner specified using  -start_from.   "\fB-pattern_center {<row column>}\fR" Creates an array of bumps that is centered on the center of the chip and that extends for the <row> and <column> values given. The center point can optionally be set directly with -loc. The starting corner of the array can be specified using the -start_from parameter.  "\fB-pattern_full_chip\fR" Creates an array of bumps covering the chip. The array starts at the closest to boundary point set by -edge_spacing at the corner specified by -start_from and extends until within -edge_spacing of the chip boundary for the opposite sides. You can optionally directly specify the -loc value for the starting point, in which case -edge_spacing affects only the two opposite edges of the array.  For examples, see the Examples section below.  "\fB-pattern_ring <width>\fR" Creates a ring of bumps around the boundary of the chip that is<width>bumps wide, where <width> is an integer value. The ring extends until within -edge_spacing of the chip boundary, starting at the lower-left value allowed by -edge_spacing. You can optionally directly specify the -loc value for the lower-left bump location, in which case -edge_spacing only affects the right and top edges of the array. The -pitch <x> value is the spacing between bumps inside one ring, and the -pitch y value is the spacing between two rings.  For examples, see the Examples section below.  "\fB-pattern_side {<side> <width>}\fR" Creates an array of bumps along one side of the chip. The array is the length of the side, and <width> bumps wide, where <width> is an integer value. The legal <side> names are: left, top, right, bottom. The array starts at the left/bottom controlled by -edge_spacing, and extends until within -edge_spacing of the top/right sides. You can optionally directly specify the -loc value for the lower-left bump location for bottom/left sides, the upper-left bump for the top side, or lower-right for the right side.  For examples, see the Examples section below.  "\fB-pitch <x y>\fR" Specifies the distance between bump centers in microns. -pitch {x y} is interpreted in different ways for different bump patterns.
.RS  "*" 2 For full_chip, bottom_side row, top_side row, left_side column, right_side column, array {row column}, and center {row column}: 
.RS  "*" 2 -pitch <x> means the distance between the bump centers in a row or horizontal.  "*" 2 -pitch y means the distance between the bump centers in column or vertical.
.RE  "*" 2 For ring <ring_number>: 
.RS  "*" 2 -pitch <x> means the distance between the bump centers in the ring.  "*" 2 -pitch <y> means the distance between rings from the bump center. 
.RE 
.RE   "\fB-relative_assignment\fR" Assigns the corresponding net of the relative object to the bump being created. This option can be used only if -relative_type is specified.  If relative_assignment is specified and -relative_type is:
.RS  "*" 2 embedded_bump: create_bump searches the top netlist for the net connected to the pin of the embedded bump and assigns it to the created bump.  "*" 2 inst_pin_port: You must also specify -relative_object {<inst_pin_port_list>}. create_bump then searches the top netlist for the net connected to the specified pin and assigns it to the created bump.  "*" 2 block: You must also specify -relative_block {inst+}. create_bump then searches the top netlist for the net connected to the top layer pins of the specified blocks and assigns it to the created bump.
.RE   Note: This option is used with -cell, -start_index, -name_format, -orientation, -allow_overlap_control, -relative_type, -relative_object and -relative_offset. An error message is displayed if it is used with any other option.  "\fB-relative_block <inst>+\fR" Specifies the block list for creating top-level bumps based on block pins on the top layer. The -relative_block parameter must be specified when  -relative_type is set to  block. The  -relative_block parameter supports wildcards. For example, you can specify  -relative_block *.   "\fB-relative_block_constraint <fileName>\fR" Specifies the filename of the block constraint to be used for creating top-level bumps based on block pins on the top layer. The -relative_block_constraint parameter is optional and can be used only when -relative_type block is specified.  create_bump parses the constraint file specified with -relative_block_constraint and creates bumps based on the instance pins specified with -relative_block. The top-level bump is created at the center of the block pin geometries. Note that bumps are created on a block pin only if it is on the top layer of a design.  The constraint format for bumps based on a block pin is as follows:  BUMP_ON_BLOCK_PIN      MACRO <marco_name_list>      PIN [<pin_name_list>] [SINGLE|MULT]      PORT [SINGLE|MULT]          GEOMETRY_SHAPE RECT/POLY          GEOMETRY_SHORT_EDGE <min_value> [:<max_value>]          GEOMETRY_LONG_EDGE <min_value> [:<max_value>]      NET <net_list_name>  END BUMP_ON_BLOCK_PIN  Note: If a constraint file is specified, the tool creates bumps only on the block pins that are specified in the constraint file. If you do not specify a constraint file, the tool creates a single bump for each block pin on the top layer for the specified blocks. If a constraint file is specified but is empty, the tool does not create any bumps because no block pin is specified in the constraint file.  To see the use model and examples of the BUMP_ON_BLOCK_PIN constraint, refer to the "Bump Creation" section in the Flip Chip Methodologies chapter in the User Guide.  "\fB-relative_object {<inst_pin_port_list>}\fR" Specifies the inst_pin_port list and supports wild cards. The format is {<inst>:<pin>:<port>
...} and <port> is of type integer.  When the -relative_object option is specified, bumps are created by default at the geometry center of the specified ports. The bump is named<$blockName-$pinName-Port_$portNumber-embeddedBump_$index>, where:
.RS  "*" 2 $blockName is the name of the block in the top design which has the corresponding embedded bump.  "*" 2 <$pinName> is the name of the pin in LEF which has the corresponding embedded bump.  "*" 2 $portNumber is the number of the port on which the created bump is based.
.RE   Example: Avd_test_1-DQ0-Port_1-embeddedBump_1  You can reset the default settings by using the -start_index and -name_format options.  Note: This option is used with -cell, -start_index, -name_format, -orientation, -allow_overlap_control, -relative_type, -relative_assignment and -relative_offset. An error message is displayed if it is used with any other option.  "\fB-relative_offset <x y>\fR" Specifies the offset of bump location compared with the relative object. The geometry center of the created bump is the geometry center of the relative object plus the offset. This option can be used only if -relative_type is specified.  Note: This option is used with -cell, -start_index, -name_format, -orientation, -allow_overlap_control, -relative_type, -relative_object and -relative_assignment. An error message is displayed if it is used with any other option.  "\fB-relative_type {embedded_bump inst_pin_port block}\fR" Specifies the type of the relative object:
.RS  "*" 2 embedded_bump: When the embedded_bump type is specified, create_bump automatically creates a bump at the same location as the embedded bump. The bump is named $blockName/$pinName/embeddedBump_$index, where:
.RS  "*" 2  $blockName is the name of the block in the top design that has the corresponding embedded bump.  "*" 2  <$pinName> is the name of the pin in LEF that has the corresponding embedded bump.
.RE You can reset the default settings by using the -start_index and -name_format options.  If there are already overlapping bumps for some embedded bumps, create_bump skips creating bumps for those embedded bumps but continues to create bumps for remaining embedded bumps and issues the following warning message.   WARNING (#): There is(are) overlap bump(s) with the embedded bump $blockName/$pinName located at {x2 y2} with relative offset {x y}. Skip creating bump for it.After all bumps are created, checkBump displays a summary of the number of embedded bumps for which the tool failed to create bumps.  "*" 2  inst_pin_port: When the inst_pin_port type is specified, create_bump creates bumps as per the inst_pin_port_list you specify with -relative_object. Therefore, if you specify -relative_type as inst_pin_port, you must specify the -relative_object {<inst_pin_port_list>} option.  "*" 2  block: When the block type is specified, create_bump automatically creates bumps at the same location as that of the specified block pin, which must be on the top routing layer of the design. The -relative_block parameter must be specified when -relative_type is set to block.
.RE   "\fB-respect_placement_blockage\fR" Specifies that the bumps being created, including dummy bumps, should not overlap any placement blockages.   "\fB-return_bumps_name\fR" Returns the names of the bumps generated. If create_bump fails to generate any bumps, the tool returns an empty string.   "\fB-stagger_offset <value>\fR" Specifies the offset of bumps between rows or columns in the generated bump pattern. Its value is specified in microns. This option is used with -stagger_type.   "\fB-stagger_type {odd_rows odd_columns even_rows even_columns trapezoid}\fR" Specifies the stagger type pattern. The  -stagger_type  parameter cannot be used with  -pattern_ring
.  You can use the -stagger_offset parameter along with -stagger_type to specify the offset of bumps between rows or columns in the generated bump pattern.  The allowed values for the -stagger_type parameter are:
.RS  "*" 2 odd_rows - Creates a bump array with the odd rows shifted to the right by the specified stagger offset value.  "*" 2 odd_columns - Creates a bump array with the odd columns shifted up by the specified stagger offset value.  "*" 2 even_rows - Creates a bump array with the even rows shifted to the right by the specified stagger offset value.  "*" 2 even_columns - Creates a bump array with the even columns shifted up by the specified stagger offset value.   "*" 2 trapezoid - Creates bumps are created in a trapezium pattern. This stagger type is supported only with -pattern_side.
.RE   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   For examples of how -stagger_offset affects different -stagger_type patterns, refer to the Examples section below.  "\fB-start_from {lower_left upper_left lower_right upper_right}\fR" Specifies the starting corner for creating an array of bumps. This option can be used only if -pattern_array, -pattern_center, or -pattern_full_chip is specified.  Note: Bumps are always indexed by row first, irrespective of the -start_from value.   For examples of using -start_from, refer to the Examples section below.  Default: lower_left  "\fB-start_index <index>\fR" Specifies the starting number of the index for bumps to be created. 
.SH  
.SH Examples
.RS  "*" 2 The following command creates a single bump at the lower-left corner of the bump cell box:  create_bump -cell BUMPCELL -loc_type cell_lowerleft -loc {0 0}   "*" 2  The following command uses the default location type setting and creates an array of bumps with bump cell that has the same size as the bump bounding box for the macro BUMPCELL.  create_bump -cell BUMPCELL -pitch {<x y>} -edge_spacing {<x1 y1 x2 y2>} -pattern_full_chip   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2  The following command creates a full bump matrix on the chip with the spacing constraint {400 500 450 600} and bump pitch {80 120}. The names of the created bumps honor the default naming format Bump_%i, where %i means the index:  create_bump -cell BUMPCELL -pitch {80 120} -edge_spacing {400 500 450 600} -pattern_full_chip  "*" 2  The following command creates a ring of bumps around the boundary of the chip that is 3 bumps wide:  create_bump -cell BUMPCELL -pitch {<X Y>} -edge_spacing {<x1 y1 x2 y2>} -pattern_ring 3    (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 The following command creates a 4x4 array of bumps that is centered on the point defined by -loc:  create_bump -cell BUMPCELL -pitch {<X Y>} -loc {<X Y>} -pattern_center {4 4}  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2  The following example shows how -stagger_offset can be used to create a 5X5 array of bumps in -stagger_type odd_rows stagger pattern:  create_bump -cell BUMPCELL -loc{<loc_x loc_y>} -pitch {<pitch_x pitch_y>} -pattern_array {5 5} -stagger_type odd_rows -stagger_offset <value>  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2 The following example shows how -stagger_offset can be used to create a 5X5 array of bumps in -stagger_type odd_columns stagger pattern:  create_bump -cell BUMPCELL -loc{<loc_x loc_y>} -pitch {<pitch_x pitch_y>} -pattern_array {5 5} -stagger_type odd_columns -stagger_offset <value>  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2 The following example shows how -stagger_offset can be used to create a 5X5 array of bumps in -stagger_type even_rows stagger pattern:  create_bump -cell BUMPCELL -loc{<loc_x loc_y>} -pitch {<pitch_x pitch_y>} -pattern_array {5 5} -stagger_type even_rows -stagger_offset <value>  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2 The following example shows how -stagger_offset can be used to create a 5X5 array of bumps in -stagger_type even_columns stagger pattern:  create_bump -cell BUMPCELL -loc{<loc_x loc_y>} -pitch {<pitch_x pitch_y>} -pattern_array {5 5} -stagger_type even_columns -stagger_offset <value>  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2  The following example shows how -stagger_offset can be used with -stagger_type trapezoid stagger pattern to create a 3-row bump pattern on the bottom side:  create_bump -cell BUMPCELL -edge_spacing {<left bottom right top>} -pitch {<pitch_x pitch_y>} -pattern_side {bottom 3} -stagger_type trapezoid -stagger_offset <value>   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2  The following command creates a 3X4 array of bumps but does not place bumps in the:
.RS  "*" 2 rectangular area with lower left corner at {x1 y1} and upper right corner at {x2 y2}  "*" 2 rectangular area with lower left corner at {x3 y3} and upper right corner at {x4 y4}
.RE  create_bump -cell BUMPCELL -loc {x y} -pattern_array {3 4} -exclude_bump_area {x1 y1 x2 y2 x3 y3 x4 y4}  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2  The following command creates a 3X3 array of bumps with the upper-right corner of the array starting at point (1000, 1000):  create_bump -pattern_array {3 3} -loc 1000 1000 -cell BUMP  -pitch 200 200 -start_from upper_right  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  The array starts from the upper right and continues towards lower left.   "*" 2  The following command creates a 3X3 array of bumps with the lower-right corner of the array starting at point (1000, 0):  create_bump -pattern_array {3 3} -loc 1000 0 -cell BUMP -pitch 200 200 -start_from lower_right  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  The array starts from the lower right and continues towards upper left.   "*" 2  The following command creates a 3X3 array of bumps at the specified location and returns the names of the bumps generated:  create_bump -pattern_array {3 3} -loc 0 1000 -cell BUMP  -pitch 200 200 -return_bumps_name  > bump_1 bump_2 bump_3 bump_4 bump_5 bump_6 bump_7 bump_8 bump_9  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2 The following command creates a 3X3 bump array and does not add new bumps in the specified keep-out region in the case of an overlap:  create_bump -pattern_array {3 3} -loc 200 200 -cell BUMP -pitch 200 200 \\              -keep_out_region {200 200}  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2  The following command creates a 3X3 bump array and adds new bumps in the specified keep-out region in the case of an overlap:  create_bump -pattern_array {3 3} -loc 200 200 -cell BUMP -pitch 200 200 \\              -keep_out_region {200 200} -allow_overlap_control keep_new_bumps  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2  The following command creates a 5X5 bump array and allows bumps to be created outside of the die area:  create_bump -cell BUMPCELL -start_from upper_right -loc 0 0 -pitch 100 100  -pattern_array {5 5} -allow_outside_of_die  "*" 2  The following command parses the 1.const constraint file and creates bumps based on the specified instance pins:  create_bump -cell BUMPCELL -relative_type block -relative_block {<BLOCK_LIST>} -relative_block_constraint 1.const -relative_assignment  "*" 2 The following command creates a 3X3 bump array and does not add new bumps in the circular area defined by the specified keep-out pitch in the case of an overlap:  create_bump -pattern_array {3 3} -loc 200 200 -cell BUMP -pitch 200 200 -keep_out_pitch 200  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2  The following command creates a 3X3 bump array and adds new bumps in the circular area defined by the specified keep-out pitch in the case of an overlap:  create_bump -pattern_array {3 3} -loc 200 200 -cell BUMP -pitch 200 200 \\   -keep_out_pitch 200 -allow_overlap_control keep_new_bumps  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.RE 
.SH Related Information
.RS  "*" 2 assignBump  "*" 2 changeBumpMaster  "*" 2 checkBump  "*" 2 copy_bump  "*" 2 deleteBumps  "*" 2 deselect_bump  "*" 2 redo  "*" 2 select_bump  "*" 2 unassignBump
.RE
.RS  "*" 2 undo  "*" 2 Flip Chip Methodologies chapter in the User Guide  "*" 2 Tools Menu chapter in the Menu Reference 
.RS  "*" 2 Flip Chip
.RE 
.RE
.P
