.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH trimDesign  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBtrimDesign\fR \-  Allows you to specify the coordinates of a box to create a small portion of the design as an independent design. This trimmed down version of the design can be then used for investigation and analysis
.SH Syntax \fBtrimDesign\fR    [-help]   [-coreToBoundary <distance>]   [-dir <output_dir_to_save_trimmed_design>]  [-encryptName <proc_name_to_encrypt>]  [-name <trim_design_name>]  [-nets <list_of_net_names>]   [-placeOnly]   [-area {<x1 y1 x2 y2>} | -polygon< list_of_points>| -selectedRouteBlk ]
.P Allows you to specify the coordinates of a box to create a small portion of the design as an independent design. This trimmed down version of the design can be then used for investigation and analysis. When you share the trimmed design for investigation of a localized issue, you do not need to share the whole third-party IP information, thereby ensuring confidentiality of the third-party data. 
.P While the trimmed design completely preserves the physical data, it does not preserve the timing and the power domain data.  Working on a small portion of the design offers a faster turnaround time and a lesser memory footprint.
.P Notes:
.RS  "*" 2 The trimDesign command retains the attributes and properties of all the standard cells and macros that are completely inside the trim box/area. All hard macros that overlap with the trim box/area are also preserved. It does not include any standard cells or macros that are completely outside the specified trim box/area.  "*" 2 The trimDesign command preserves all overlapping rows, sites, and colors.  "*" 2  The trimDesign command flattens all instances and net names. All instances in the trim box/areal lose their original logic hierarchy and appear 'flat' in the trimmed database. Any naming conflicts arising due to flattening are automatically resolved. For example, h1/h2/i1 in the full design will appear as i1 in the trimmed design. Also, h1/h4/i1 may appear as i1_uniquify1, to distinguish it from i1.   Note: To resolve naming conflicts due to the loss of hierarchy, additional name uniquification is done. A mapping of original nets/instances names vs their trimmed design modified names, is written in a map file for book keeping purpose.  "*" 2 The trimDesign command maintains the design parameters such as instance location/orientation, regular/special wire and its connectivity relative to the original full design.  "*" 2 The trimDesign command retains the attributes and properties of all the nets having some instances inside the trim box/area.  It also preserves (pushes down) the nets that are not connected to any instance in the trim box/area, but have some wires overlapping with trim box/area. Nets having all instances and wires outside of trim box/area are discarded.  "*" 2 The trimDesign command creates ports for all wires crossing the boundary of the trimmed design.  "*" 2 The trimDesign command preserves the tracks, attributes and colors of all wires that are completely inside the trim box/area. All wires that overlap with the trim box/area are also preserved. It does not include any wire that is completely outside the specified trim box/area.  "*" 2  The trimDesign command preserves the Power/Ground/Special wires that overlap with the boundary of the trim box by cutting them against the boundary. It creates additional PG ports at cross points these wires.  "*" 2 The trimDesign command discards fences, regions, guides, instance groups, and power domains.
.RE
.RS  "*" 2 The trimDesign command saves the
.globals files. The
.globals file has the
.lef list copied from original full design's
.globals file.  "*" 2 The checkPlace command reports all violations that were there on instances in the box in the actual design. However, since hierarchical fences are not brought back, the trimmed design may not have the Region/Fence and Not-of-Fence Violations.  "*" 2  The verify_drc command reports all violations that were there on nets in the box of actual design. However, since only the net wires crossing box boundary are preserved, the trimmed design may have some extra violations.
.RE 
.SH Parameters   "\fB-help\fR" Prints a brief description that includes type and default information for each trimDesign parameter. For a detailed description of the command and all of its parameters, use the man command:  man trimDesign  "\fB-area <box_coordinates> \fR" List of coordinates to represent a box for getting the trimmed design.  Note: The specified box is snapped to the instance grid. All instances in the box lose their original logic hierarchy and appear flat in the new db.  Data_type: string, required  "\fB-coreToBoundary <distance>\fR" Specifies that any instance lying within the distance of coreToBoundary (in microns) to the trim box will be discarded.  Default: 2  Data_type: string, optional  "\fB-dir <output_dir_to_save_trimmed_design>\fR" Specifies the name of the directory in which the data related to the trimmed-design is saved.  Data_type: string, optional  "\fB-encryptName <proc_name_to_encrypt>\fR" Specifies that the names of instances and nets in the design will be encrypted when the trimmed design is saved.  Data_type: string, optional  "\fB-name <trim_design_name>\fR" Specifies the top-level name of the new trimmed design.  Data_type: string, optional  "\fB-nets <list_of_net_names>\fR" Species the nets that are to be completely enclosed by the specified shape by taking union of shape with net-boxes.  Data_type: string, optional  "\fB-placeOnly\fR" Specifies that only instances will be pushed.  Data_type: bool, optional  "\fB-polygon< list_of_points>\fR" List of coordinates to represent a polygon for getting the trimmed design.  Data_type: string, optional   "\fB-selectedRouteBlk\fR" Specifies that the selected routing blockages will be used to infer the box or polygon for getting the trimmed design.  Data_type: string, optional 
.SH Examples
.RS  "*" 2 The following command creates a trimmed design, trim_db, with the specified polygon coordinates and save the data in the DB file.  trimDesign -dir DB -name trim_db -polygon {{500.0 700.0} {500.0 900.0} {500.0 900.0} {700.0 900.0} {700.0 900.0} {700.0 800.0} {700.0 800.0} {800.0 800.0} {800.0 800.0} {800.0 700.0} {800.0 700.0} {500.0 700.0} }  "*" 2  The following command creates a trimmed design, based on the selected routing blockage:  trimDesign -dir DB -name trim_db -selectedRouteBlk   "*" 2  The following command uses a get_new_name procedure to encrypt the names on the instances and nets in the trimmed design trim_db:  trimDesign -dir DB -name trim_db -area {300.0 200.0 800.0 700.0} -encryptName gen_new_name  The following is a structure of the encryption procedure file. You can customize this procedure:  proc gen_new_name {<name>} {    global n    if {![info exists n]} {      set n 0    }    set new_name en_name__$n    incr n    return $new_name  }
.RE 
.SH Related Information
.RS  "*" 2 Importing and Exporting Designs chapter in the Innovus User Guide 
.RS  "*" 2 Trimming the Design
.RE 
.RE
.P
