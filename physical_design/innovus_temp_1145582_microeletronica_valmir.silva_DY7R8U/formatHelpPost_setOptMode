.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH setOptMode  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBsetOptMode\fR \-  Sets global parameters for timing optimization
.SH Syntax \fBsetOptMode\fR   [-help]  [-opt_activity_refresh_args "<list_of_arguments">]  [-opt_add_always_on_feed_through_buffers {true | false}]  [-opt_add_insts {true | false}]  [-opt_add_ports {true | false}]   [-opt_add_repeater_report_failure_reason {true | false}]  [-opt_all_end_points {true | false}]  [-opt_allow_only_cell_swapping {true | false}]  [-opt_allow_multi_bit_on_flop_with_sdc {true | false | mergeOnly | splitOnly}]  [-opt_area_recovery {true |false | default}]  [-opt_area_recovery_setup_target_slack <slack>]  [-opt_consider_routing_congestion {auto | false | true}]  [-opt_constant_inputs {true | false}]  [-opt_constant_nets {true | false}]  [-opt_concatenate_default_and_user_prefixes {true | false}]  [-opt_delete_insts {true | false}]  [-opt_detail_drv_failure_reason {true | false}]  [-opt_detail_drv_failure_reason_max_num_nets <value>]  [-opt_down_size_insts {true | false}]  [-opt_drv {true | false}]  [-opt_drv_margin <margin>]  [-opt_drv_with_miller_cap {true | false}]  [-opt_duplicate_cte_constrained_hport {true | false}]  [-opt_enable_data_to_data_checks {true | false}]  [-opt_enable_podv2_clock_opt_flow {true | false}]  [-opt_enable_restructure {true | false}]  [-opt_fix_fanout_load {true | false}]  [-opt_flop_pins_report {false | true}]  [-opt_flops_report {false | true}]  [-opt_high_effort_cells <list_of_cells>]  [-opt_hold_allow_overlap {auto | true | false}]  [-opt_hold_allow_resize {true | false}]  [-opt_hold_allow_setup_tns_degradation {true | false}]  [-opt_hold_cells <list_of_buffers>]  [-opt_hold_on_excluded_clock_nets {true | false}]  [-opt_hold_slack_threshold <slack>]  [-opt_hold_target_slack <holdTargetslack>]  [-opt_honor_density_screen {true | false}]  [-opt_honor_fences {true | false}]  [-opt_hold_ignore_path_groups {<groupA groupB>
...}]  [-opt_leakage_to_dynamic_ratio <ratio>]  [-opt_max_density <density>]   [-opt_max_length <length>]  [-opt_move_insts {true | false}]  [-opt_multi_bit_combinational_mode {auto | power | area}]  [-opt_multi_bit_combinational_opt {false | true | mergeOnly | splitOnly}]  [-opt_multi_bit_combinational_merge_timing_effort {none | low | medium | high}]  [-opt_multi_bit_combinational_split_timing_effort {none | low | medium | high}]  [-opt_multi_bit_flop_merge_bank_label_inference {true | false}]  [-opt_multi_bit_flop_merge_timing_effort {low | medium | high}]  [-opt_multi_bit_flop_name_prefix <prefix_name>]  [-opt_multi_bit_flop_name_separator <separator_name>]  [-opt_multi_bit_flop_name_suffix _<user_suffix>]  [-opt_multi_bit_flop_opt {true | false | mergeOnly | splitOnly}]  [-opt_multi_bit_flop_reorder_bits {false | true | timing | power}]  [-opt_multi_bit_flop_split_report_failure_reason {true|false}]   [-opt_multi_bit_flop_split_timing_effort {low | medium | high}]  [-opt_multi_bit_unused_bit_count <integer>]  [-opt_multi_bit_unused_bits {false | true | prePlace | preCTS}]  [-opt_new_inst_prefix <prefix>]  [-opt_new_net_prefix <prefix>]  [-opt_one_pass_lec {true | false}]  [-opt_podv2_flow_effort {auto | standard | extreme}]  [-opt_pin_swapping {true | false}]  [-opt_post_route_allow_overlap {true | false}]  [-opt_post_route_area_reclaim {none | setupAware | holdAndSetupAware}]  [-opt_post_route_art_flow {true | false}]  [-opt_post_route_check_antenna_rules {true | false}]  [-opt_post_route_drv_recovery {false | auto | true}]  [-opt_post_route_fix_clock_drv {true | false}]  [-opt_post_route_fix_glitch {true | false}]  [-opt_post_route_fix_si_transitions {true | false}]  [-opt_post_route_hold_recovery {false | auto | true}]  [-opt_post_route_setup_recovery {false | auto | true}]  [-opt_power_effort {none | low | high}]  [-opt_pre_route_ndr_aware <list>]  [-opt_preserve_all_sequential {true | false}]  [-opt_preserve_hpin_function {true | false}]  [-opt_remove_redundant_insts {true | false}]  [-opt_resize_flip_flops {true | false}]   [-opt_resize_level_shifter_and_iso_insts {true | false}]  [-opt_resize_power_switch_insts {true | false}]  [-opt_sequential_genus_restructure_report_failure_reason {true | false}]  [-opt_setup_target_slack <setupTargetSlack>]  [-opt_skew {true | false}]  [-opt_skew_ccopt {none | standard | extreme}]  [-opt_skew_post_route {true|false}]  [-opt_skew_pre_cts {true|false}]  [-opt_target_based_opt_file <filename>]  [-opt_target_based_opt_file_only {true | false}]  [-opt_target_based_opt_hold_file <hold_file_name>]   [-opt_tied_inputs {true | false}]  [-opt_time_design_compress_reports {true | false}]  [-opt_time_design_expanded_view {true | false}]  [-opt_time_design_num_paths <number>]  [-opt_time_design_report_net {true | false}]  [-opt_time_design_vertical_timing_summary {true|false}]  [-opt_unfix_clock_insts {true | false}]  [-opt_verbose {true | false}]  [-reset] 
.P Sets global parameters for timing optimization. Parameters that you specify with setOptMode are then used automatically when you run timing optimization by invoking the optDesign command or by using the Optimize Design form in the ECO Menu.
.P To see the current settings for the setOptMode command, see getOptMode. 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes type and default information for each setOptMode parameter.  For a detailed description of the command and all of its parameters, use the man command: man setOptMode.  "\fB-opt_activity_refresh_args "<list_of_arguments">\fR" Specifies the list of simulation options to be passed for Joules Xreplay. The parameter accepts all arguments of the xreplay_stimulus command.  The following arguments can be specified using this option:
.RS  "*" 2 [-xrun_path] Specify xrun binary path to run Xcelium for replay simulation.  "*" 2 [-rtl_stim] Specify the input RTL stimulus file.  "*" 2 [-stim_format] Suboption of -rtl_stim, provides format of rtl stimulus.  "*" 2 [-dut_instance] Suboption of -rtl_stim, provides dut hierarchy in rtl stimulus.  "*" 2 [-start] Specify start time to run replay for particular stimulation time duration, for example 24ns. Default is simulation start time.  "*" 2 [-end] Specify end time to run replay for stimulation time duration, for example 100ns. Default is simulation end time.  "*" 2 [-verilog_model_files] Specify list of library verilog models  "*" 2 [-stim_annotation] Honor stim annotation of only the specified objects.  "*" 2 [-joules_setting] Specify the Tcl file to be sourced before xreplay_stim command  "*" 2 [-out] Specify the output replayed gate-level stimulus file. Default is joulesWorkDir/replayed_stim.shm  "*" 2 [-reset_activity_before_readback] Will reset the previous activity before reading the xreplayed activity file.  "*" 2 [-delay_mode none | zero | unit | punit | delay | pdelay] (default: none) 
.RE   For setting the arguments, use:  setOptMode -activity_refresh_args "<args>"  For querying the arguments, use:  getOptMode -activity_refresh_args  Default:<"">  "\fB-opt_add_always_on_feed_through_buffers {true | false}\fR" Used by optDesign and PD-aware addRepeaterByRule. When this parameter is set to true, optDesign will use always-on buffers in both pre-route and post-route for all the optimization steps; and addRepeaterByRule will use always-on buffer for repeater insertion. It should be used for aggressive always-on buffering during optimization.  The default optDesign behavior is to use always-on buffers only during pre-route DRV fixing.  Default: false  "\fB-opt_add_insts {true | false}\fR" Controls whether timing optimization can add instances.  Default: true  "\fB-opt_add_ports {true | false}\fR" Controls whether timing optimization adds ports to the lower-level hierarchies of the design. Prohibiting the software from adding ports (when this parameter is set to false) might not be optimal because buffers are not allowed to be added exactly where needed; however, this preserves hierarchical boundaries of the design so that generated test vectors are still valid, and module-by-module verification is possible.  Default:  true  "\fB-opt_add_repeater_report_failure_reason {true | false}\fR" When set to true, enables the printing of detailed failure reasons for each net for the addRepeaterByRule command. By default, the report will be generated in the timingReports directory. If the directory is not available, it will be created. For example,  <run_dir>/timingReports/ARRFailureReason/ARRRpt.preRoute.1  Use Model  setOptMode -opt_add_repeater_report_failure_reason true  addRepeaterByRule -selNet
./net.list -rule $scr/rule -preRoute -reportIgnoredNets ignore_nets  Note the following:
.RS  "*" 2
.RS  "*" 2 The ignored nets report is appended at the beginning of the failure reason report file. If -reportIgnoredNets IGNORE_NET_REPORT_NET_FILE_NAME is specified, then the ignored nets report is also saved to the file IGNORE_NET_REPORT_NET_FILE_NAME.  "*" 2 For multiple calls of ARR with different set of nets and constraints, equal number of failure reports will be generated under the ARRFailureReason directory. A suffix, _<n> will be added, with n being the nth call of ARR. For example, three calls of ARR will lead to the generation of the following three files:  <run_dir>/timingReports/ARRFailureReason/ ARRRpt.preRoute.1  <run_dir>/timingReports/ARRFailureReason/ ARRRpt.preRoute.2  <run_dir>/timingReports/ARRFailureReason/ ARRRpt.preRoute.3  "*" 2 The default mode of ARR reporting is preRoute. If you specify -postRoute or -alongRoute, the following will be appended in the report names:<run_dir>/timingReports/ARRFailureReason/ ARRRpt.postRoute.1  <run_dir>/timingReports/ARRFailureReason/ ARRRpt.alongRoute.1 
.RE 
.RE   Note: The behavior of the parameter, -reportIgnoredNets, remains unchanged. It writes the reports with user-specified file name under the run directory.  Default: false  "\fB-opt_all_end_points {true | false}\fR" Runs total negative slack optimization in addition to the worst negative slack optimization and does so on all end points to ensure a high quality timing result.  This feature is automatically activated while running either of the setDesignMode -flowEffort standard | extreme timing-closure flows. So, despite the default being false it is overwritten by the setDesignMode command.  Note: When this parameter is set to false, there may still be some fast TNS optimization done during preRoute optimization but there is no effect on the postRoute setup optimization. It also has no effect on hold optimization, which means that regardless of this setting, all hold violating paths will always be optimized.  Default: false  "\fB-opt_allow_only_cell_swapping {true | false}\fR" Forces the postRoute optimization to perform only same-size Vth swapping for timing improvements. This option works best on multi-Vth library designs.  Default: false  Note: Use this option for reoptimizing the timing in specific cases where routing should remain unchanged.  "\fB-opt_allow_multi_bit_on_flop_with_sdc {true | false | mergeOnly | splitOnly}\fR" When this parameter is set to true, or by default, the software will not honor the SDC constraints while merging or splitting of flops in the multi-bit flip flop flow. Set this parameter to false to honor SDC constraints while merging or splitting of flops.  Use mergeOnly to ignore the SDC constraints while merging but honor for splitting. Use splitOnly to ignore the SDC constraints while splitting but honor for merging.  Default: true  Note: When this  parameter is set to true, the software will do merge/split even if there is SDC on D/Q pins and the SDC will be copied to the corresponding D/Q pins in the new flop.  But if there are SDC constraints on SE/SI pin, the merging becomes more complicated. For example, a single flop A and flop B have 1 SE pin and D/Q pin. When merging is done, the SDC on D/Q pin will be copied to the new D0/Q0 and D1/Q1, and the SDC information will not be lost.  But in the new 2-bit flop, there will be only one SE pin. This raises the issue of which SDC should be copied into the new flop. In this case, the software will check the SE pin SDC in flop A and flop B. If they are compatible, then it will do merging. Otherwise, the merging will not be done, even if the parameter is set to true.  "\fB-opt_area_recovery {true |false | default}\fR" Controls whether timing optimization creates additional space by downsizing gates or deleting buffers, while maintaining worst slack and total negative slack.    This parameter can be used in three modes: default, true, and false.
.RS  "*" 2 default: By default, area reduction is always called after global optimation and after the second TNS optimization. During the rest of optDesign, area reduction is called depending on the density level of the current design.  "*" 2 true: When this parameter is set to true, area reduction is always called before the global optimization stage, after the global optimization stage, and after the second TNS optimization. During the rest of optDesign, area reduction is called depending on the density level of the current design.
.RE
.RS  "*" 2 false: No area reduction is performed during optDesign.
.RE   Default:default  Note: This parameter is used to reclaim area during preRoute optimization. For reclaiming area during postRoute optimization, use the -opt_post_route_area_reclaim parameter of this command.  "\fB-opt_area_recovery_setup_target_slack <slack>\fR" Specifies a user-defined target slack for area reclaim vs timing. When a slack value is specified, the software prevents area reclaim optimization from creating or working on near critical paths.  Typically, you can set setOptMode -opt_area_recovery_setup_target_slack 0.1 with setOptMode -opt_setup_target_slack at the default value of 0.0. This implies that the area reclaim will not work on any paths less than 0.1ns.  Note that the value for -opt_setup_target_slack takes higher priority.  For example, if setOptMode -opt_area_recovery_setup_target_slack is set to -0.1 and setOptMode -opt_setup_target_slack is at 0.0 then setup timing will not be allowed to degrade past 0ps and a warning will be issued.   Similarly, if say setOptMode -opt_area_recovery_setup_target_slack is at +0.1 and setOptMode -opt_setup_target_slack is set to +0.2 then timing will target +0.2 and a warning will be issued.  You need to set this parameter before any area reclaim is done.   Default: 0ns  "\fB-opt_consider_routing_congestion {auto | false | true}\fR" Checks the routing congestion at the PostRoute stage during optimization of setup, hold, drv, or glitch. The option also impacts postCTS hold fixing. This option helps improve NR DRC's as well as Timing jumps caused by routing detours on congested designs.  By default, this parameter is set in the following ways:
.RS  "*" 2 auto - turned off for postCTS hold fixing and on for postRoute setup and hold fixing  "*" 2 false - turned off for postCTS hold fixing and postRoute setup and hold fixing  "*" 2 true - turned on for both postCTS hold fixing and postRoute setup and hold fixing
.RE   Default: auto  "\fB-opt_constant_inputs {true | false}\fR" When set to true, forces optimization of instances with constant inputs, even if it worsens the objective gain - in terms of area, power, and delay.  Default: false  "\fB-opt_constant_nets {true | false}\fR" Controls whether timing optimization optimizes constant nets. This parameter affects only postRoute optimization.  Default: true  "\fB-opt_concatenate_default_and_user_prefixes {true | false}\fR" Controls whether to combine the default prefix for cells and nets added by timing optimization with the prefix specified by -opt_new_net_prefix and -opt_new_inst_prefix. By default, the software combines the specified prefixes with the default prefix. Specify false for this parameter to ignore the default prefix and use only the prefix specified by -opt_new_net_prefix and -opt_new_inst_prefix.  For example, if the default prefix is PSN_000234 and you type the following command:setOptMode -opt_concatenate_default_and_user_prefixes true -opt_new_net_prefix POSTROUTE_N -opt_new_inst_prefix POSTROUTE_C   The software uses the following prefixes:
.RS  "*" 2 For cells added by optimization: POSTROUTE_C_PSN_00234  "*" 2 For nets added by optimization: POSTROUTE_N_PSN_00234
.RE   If the default prefix is PSN_000234 and you type the following command: setOptMode -opt_concatenate_default_and_user_prefixes false -opt_new_net_prefix POSTROUTE_N -opt_new_inst_prefix POSTROUTE_C   The software uses the following prefixes:
.RS  "*" 2 For cells added by optimization: POSTROUTE_C  "*" 2 For nets added by optimization: POSTROUTE_N
.RE   Note: If you specify false for this parameter, you must also specify -opt_new_inst_prefix and -opt_new_net_prefix. In addition, you must specify a different prefix for instances and nets.  Default: true  "\fB-opt_delete_insts {true | false}\fR" Controls whether timing optimization can delete instances.  Default: true   "\fB-opt_detail_drv_failure_reason {true | false}\fR" When set to true, enables the printing of detailed DRV failure reason report file that contains the failure summary with the net name. The log file contains a simple version of failure summary without the net name. In addition, the top number(default 50) of violating nets are printed in separate files along with the violation reasons.  By default, this parameter is set to false, which means that only a simple version of failure summary without the net name is printed in the log file and no other files are created.  Note: If there is no DRV failure during the optimization flow, the failure reason report file will not be generated even when this parameter is set to true.   Default: false  "\fB-opt_detail_drv_failure_reason_max_num_nets <value>\fR" Specifies the number of violating nets for which the DRV failure reasons are to be printed in the report files. The default value is 50, which means failure reasons for top 50 violating nets are printed by default. The minimum value that can be specified is 1. The maximum value that can be specified is 9999. If this value is specified, failure reasons for all the violating nets are printed.  For example, if you set this option to 100, then the top 100 max tran violating nets, if present, will be printed in file, xx.maxTran and the top 100 max cap violating nets, if present, will be printed in file, xx.maxCap. Also, a file, xx.maxFanout may also be generated.  For each file that is generated, the first printed net has the worst violation value. The file is sorted based on violation values while printing.  Default: 50  "\fB-opt_down_size_insts {true | false}\fR" Controls whether timing optimization can downsize instances.  Default: true  "\fB-opt_drv {true | false}\fR" Repairs all nets that are constrained for maximum capacitance violations and maximum transition violations. The capacitance and transition constraint values are specified in the timing constraint file or in the library. If you specify false for this parameter, the software repairs only the paths with timing violations.  Default: true  "\fB-opt_drv_margin<margin>\fR" Scales the maxCap and maxTran constraints according to the margin decimal value specified. For example, specifying a value of 0.2 for this parameter tightens the margin (makes it more pessimistic) by 20 percent during optimization and specifying a value of -0.2 relaxes the margin (makes it more optimistic) by 20 percent. Introducing a pessimistic margin improves correlation between the number of DRC violations before and after routing.  Value range: -0.7 ~ 0.7  Default: 0  "\fB-opt_drv_with_miller_cap {true | false}\fR" When set to true, enables ECSM/CCS miller capacitance DRV reporting and fixing for timeDesign and optDesign. However, the timing_report_use_receiver_model_capacitance varibale must also be set to true.  By default , this parameter is set to false, which means that miller cap DRV reporting and fixing is disabled.  Default: false  "\fB-opt_duplicate_cte_constrained_hport {true | false}\fR" When set to true, allows buffering to duplicate hports with CTE constraints to fix DRVs and setup violations.  Default: false  "\fB-opt_enable_data_to_data_checks {true | false}\fR" Enables data to data checks during optimization.  During optimization the data to data timing checks are set to off by default to ensure that the engine focuses on other paths. To allow checks to be visible during optimization you can set this option to true.   Default: false  "\fB-opt_enable_podv2_clock_opt_flow {true | false}\fR" When set to true, enables the place_opt_design V2 (PODV2) and clock_opt_design flow.   Default: false  "\fB-opt_enable_restructure {true | false}\fR" Controls whether timing optimization swaps pins and restructures the netlist.   Default: true  Note: This parameter is not enabled when setDesignMode -flowEffort express is set.  "\fB-opt_fix_fanout_load {true | false}\fR" Forces timing optimization to correct fanout load violations, which can be maximum load or maximum fanout count violations, depending on the libraries.   Default: false  "\fB-opt_flop_pins_report {false | true}\fR" Set this parameter to true for printing out full hierarchical pin names used in the incoming netlist for flops deleted during simplifyNetlist. The output file name format is <userPrefix>_simplified_flops_pins.rpt.  Default: false  You can choose to write both files with pins or without pins (-opt_flops_report) in same session
.    "\fB-opt_flops_report {false | true}\fR" Set this parameter to true for printing full hierarchical flop names used in the incoming netlist for flops deleted during simplifyNetlist. The output file name format is <userPrefix>_simplified_flops.rpt.  Default: false  You can choose to write both files with pins (-opt_flop_pins_report) or without pins in same session.  "\fB-opt_high_effort_cells <list_of_cells>\fR" Specifies the list of cells to be used for high-effort optimization. This parameter is applicable in both pre-route and post-route setup optimization.  Note: If the dont_touch constraint is set to true for the specified cells, then these cells will not be used for high-effort optimization.  Default: " " (empty string)  "\fB-opt_hold_allow_overlap {auto | true | false}\fR" Allows hold-fixing algorithm to insert buffers with overlap when large enough empty space locations are not available. The placement will then be legalized before ECO routing. Activating this option allows to the tool to fix hold violations, but might have some negative impact on setup timing.  auto: Hold fixing will be running in the allow overlapping mode in postCTS and not in the postRoute stage.  true: Hold fixing will be running in the allow overlapping mode in both postCTS and the postRoute stage.  false: Hold fixing will not be running in allow overlapping mode in both postCTS and the postRoute stage.  Default: auto  "\fB-opt_hold_allow_resize {true | false}\fR" Controls the resizing capability inside hold optimization.  When set to true or false, resizing is turned on or off in both postCTS and postRoute hold optimization.  Default: true  "\fB-opt_hold_allow_setup_tns_degradation {true | false}\fR" Controls whether the software allows total negative slack to degrade during hold fixing operations.  By default, the software allows the slack to degrade in order to fix more hold violations. To override the default behavior and ensure that the setup total negative slack is maintained during hold fixing, specify false for this parameter.  Default: true  "\fB-opt_hold_cells <list_of_buffers>\fR" Allows you to force the usage of only a specific list of buffer and delay cells. The <list_of_buffers> contains regular buffers and delay buffer cells. When this list contains at least one cell, use only the specified cells.  Default: An empty list. This will trigger the default flow.  Note: This parameter does not support wildcards. The<list_of_buffers>must contain only exact cell name.  Note: optDesign disables automatic cell filtering when this list is specified which could impact the runtime/QOR/leakage of optDesign.  Note: optDesign uses the specified cells without honoring dont_use attribute.  "\fB-opt_hold_on_excluded_clock_nets {true | false}\fR" Controls whether hold fixing will be performed on excluded clock nets or not.  This parameter is applicable for both postCTS and postRoute Hold optimization.  Default: false  "\fB-opt_hold_slack_threshold <slack>\fR" Allows you to provide a hold slack threshold value beyond which the hold timing violations will not be fixed. This is used to avoid fixing out of bound violations at an early stage when the timing constraints and design environment might not be mature enough. The slack value is specified in nano seconds (ns).  Note: When the hold slack threshold value is specified using this parameter, the hold fixing timing table excludes the violations with slack worse than the specified value.  Note: The threshold value specified is for hold WNS.  Default: <->1000ns  "\fB-opt_hold_target_slack <holdTargetSlack>\fR" Specifies a target slack value in nanoseconds to use for hold analysis only. During setup violation repair, the setup target slack is <setupTargetSlack> and the hold target slack value is 0. Generally, you use both -opt_setup_target_slack and -opt_hold_target_slack for hold analysis. If you specify -opt_hold_target_slack only, the -opt_setup_target_slack value is 0.  Default: 0  "\fB-opt_honor_density_screen {true | false}\fR" Controls whether or not density screens (partial placement blockages used to control congestion) are honored while optimizing timing. By default, this parameter is set to false, which means that the density screens are not honored.  Default: false  "\fB-opt_honor_fences {true | false}\fR" Specifies that the timing optimization takes fences or region constraints into account. This option is honored by each optDesign step. If you optimize design with the parameter set to true, the placement is legal.  This feature is useful for hierarchical designs. Because this parameter adds constraints to timing optimization, enable it only when needed.  Default: false  Note: For Multi Supply Voltage (MSV) designs, this parameter is set to true by default.  Note: optDesign will not honor very small fences when this parameter is set to true if it would cause fence utilization to be greater than 100 percent.  "\fB-opt_hold_ignore_path_groups {<groupA> <groupB>
...}\fR" Specifies which clock domains or path groups should be excluded from hold timing optimization. This option impacts only optDesign -postCTS/-postRoute -hold.  Default: "" (empty string)  Note: To reset this option, apply an empty list.  Note: If a violated path is in two path groups and only one of those paths is specified using the -opt_hold_ignore_path_groups parameter, this path is still fixed during hold fixing.  "\fB-opt_leakage_to_dynamic_ratio <ratio>\fR" Controls the priority of the power-driven optimization. You can set any value between 0 and 1. Use this parameter along with the -opt_power_effort parameter.  Default: 1  Some examples of what the value of this parameter indicates are provided below:
.RS  "*" 2 setOptMode -opt_leakage_to_dynamic_ratio 1  This is the default value and implies that timing optimization will be purely leakage-power driven optimization.  "*" 2 setOptMode -opt_leakage_to_dynamic_ratio 0  This implies that timing optimization will be purely dynamic power-driven optimization.  "*" 2 setOptMode -opt_leakage_to_dynamic_ratio 0.5  This implies that timing optimization will be both dynamic and leakage power-driven and trade-offs may need to be done to get a balance between the leakage and dynamic power optimization.  "*" 2 setOptMode -opt_leakage_to_dynamic_ratio 0.1  This implies that timing optimization will be both dynamic and leakage power-driven but dynamic power optimization will be favored.  "*" 2 setOptMode -opt_leakage_to_dynamic_ratio 0.9  This implies that timing optimization will be both dynamic and leakage power-driven but leakage power optimization will be favored.
.RE   "\fB  -opt_max_density <density>\fR" Specifies the maximum value for density (area utilization). The optDesign command does not grow the netlist above this value. When reaching a density close to the value specified by this parameter, optDesign has limited optimization capability.   Default: 0.95  "\fB-opt_max_length <length>\fR" Specifies that optDesign honors the maxLength rule as any other DRV rule (max_cap/max_tran/max_fanout). The optDesign command will fix all the nets that are violating this rule and will ensure to not create any long nets that violate it.  The value is specified in micrometer.  Note: This parameter implies that more buffers gets inserted in the netlist.  Default: -1  min=-1,  max=2147483647  This parameter is disabled by default.  Note: During the pre-route stage, some maxLength violations might still exist after running optDesign due to routing topology changes taking place during the flow.  "\fB-opt_move_insts {true | false}\fR" Allows cells in the critical path to move when the software repairs setup violations or optimizes timing along the critical path, if allowing them to move improves timing.   Default: true  "\fB-opt_multi_bit_combinational_mode {auto | power | area}\fR" Enables the user-specific multi-bit combinational cell (MBCC) merging and splitting based on area and power.  auto: Enables merging or splitting of MBCCs based on area (if power effort is none), otherwise based on power.  power: Enables merging or splitting of MBCCs based on power.  area: Enables merging or splitting of MBCCs based on area.  Default: auto  "\fB-opt_multi_bit_combinational_opt {false | true | mergeOnly | splitOnly}\fR" Enables and disables the multi-bit combinational flow. This flow is called as a part of the preCTS optimization stage. The following settings are available:
.RS  "*" 2 true: enables both merging and splitting of combinational cells  "*" 2 false: disables the flow  "*" 2 mergeOnly: only merges the combinational cells.  "*" 2 splitOnly: only splits the combinational cells.
.RE   Default: splitOnly  "\fB-opt_multi_bit_combinational_merge_timing_effort {none | low | medium | high}\fR" Specifies the timing effort-level for multi-bit combinational merging.
.RS  "*" 2 If the parameter is set to high, the software merges the combinational cell to maintain or improve the timing.  "*" 2 If the parameter is set to low, the software merges the combinational cell with allowing timing degradation.  "*" 2 If the parameter is set to medium, the software allows merging without/minimal degradation in timing.
.RE   Default: medium  "\fB-opt_multi_bit_combinational_split_timing_effort {none | low | medium | high}\fR" Specifies the timing effort-level for multi-bit combinational splitting.
.RS  "*" 2 If the parameter is set to low, the software allows splitting to critical paths only.
.RE
.RS  "*" 2 If the parameter is set to medium, the splitting happen to critical paths to improve timing.
.RE
.RS  "*" 2 If the parameter is set to high, the software performs aggressive splitting to improve timing.
.RE   Default: low  "\fB-opt_multi_bit_flop_merge_bank_label_inference {true | false}\fR" When set to true, this parameter enables soft merging of flops with the same bank label. By default, this parameter is set to false, which means hard merging is done.  Default: false  "\fB-opt_multi_bit_flop_merge_timing_effort {low | medium | high}\fR" Specifies the timing effort level for MBFF merging.
.RS  "*" 2 low effort setting allows degrading in timing to achieve merging.  "*" 2 medium effort means that merging happens either without or with minimal degradation of timing after merging.  "*" 2 high effort setting does not allow any degradation and does merging only if it either maintain or improves timing.
.RE   Default: medium  "\fB-opt_multi_bit_flop_name_prefix  <prefix_name>\fR" Specifies the MBFF name prefix. When single-bit flip-flops are merged into a multi-bit flip-flop, you can use this parameter to specify the prefix for the new merged flip-flop. If no prefix is specified, the name of the merged flip-flop starts with the default name, CDN_MBIT_.  Default: CDN_MBIT_  "\fB-opt_multi_bit_flop_name_suffix _<user_suffix>\fR" Specifies the MBFF name suffix. When this parameter is set, the software adds the user-specified suffix at the end of the multi-bit cell instance name along with the bit-width of the multi-bit cell.   For example, the below command is used to specify _FTREG as suffix:  setOptMode -opt_multi_bit_flop_name_suffix  _FTREG  CDN_MBIT_bit1_MB_bit2_FTREG2                      for a 2-bit multibit cell                      CDN_MBIT_bit1_MB_bit2_MB_bit3_MB_bit4_FTREG4      for a 4-bit multibit cell  Default: ""  "\fB-opt_multi_bit_flop_name_separator <separator_name>\fR" Specifies the flip-flop merge and split name separator. The separator is used while splitting and merging flip-flops. The default separator is _MB_
. The use model is detailed below.  Scenario1:  When two or more SBFFs are merged, the separators are used between names of single bit flip-flops. The MBFF is named as; prefix_bit1_separator_bit2_separator_bit3..._separator_bit#.  Scenario2:  When an MBFF is split into smaller bits, then each smaller bit is named as;  prefix_bit1_separator_bit2.  Scenario3:  When an MBFF is split into the original number of single-bit flip-flops, then each SBFF reverts to its original name, which is without prefix and separator such as; bit1, bit2...  Consider the example below to understand the above scenarios:  There are four SBFFs: bit1, bit2, bit3, and bit4.
.RS  "*" 2 With default settings, when they are merged, the following MBFF is generated:   CDN_MBIT_bit1_MB_bit2_MB_bit3_MB_bit4   This MBFF has the default prefix and the default separator.
.RE
.RS  "*" 2 When the above MBFF is split into two-bit MBFFs, the following is generated:   CDN_MBIT_bit1_MB_bit2, and   CND_MBIT_bit3_MB_bit4   "*" 2 When the MBFF is split into the original SBFFs, the names of the SBFFs revert to the original names:   bit1, bit2, bit3, and bit4
.RE   Default: _MB_  "\fB-opt_multi_bit_flop_opt {true | false | mergeOnly | splitOnly}\fR" Enables and disables the multi-bit flip flop flow. This flow is called as a part of the preCTS optimization stage. Set this parameter to true to enable both merging and splitting of flops. Set it to false to disable the flow. Set it to mergeOnly to only merge flops. By default, the parameter is set to splitOnly, which means the flow is enabled for splitting MBFFs.   Note:
.RS  "*" 2 This option is independent of -opt_enable_restructure,-opt_resize_flip_flops, and -opt_preserve_all_sequential options.  "*" 2 To ensure sufficient multi-bit conversion ratio, allow more usable multi-bit flop cells from the libraries. Use the command, reportMultiBitFFs -all -equiv to write out the corresponding multi-bit flop cells to the single-bit flop cells.  "*" 2 To reduce long runtime in flop merge steps, ensure that the scan enable signal nets connecting to the flops are buffered, which means without max-fanout violations.
.RE   Default: splitOnly  "\fB-opt_multi_bit_flop_reorder_bits {false | true | timing | power}\fR" Enables swap MBFF bits to take advantage of mixed-drive strength (MDS) multi-bit cells. The following settings are possible: 
.RS  "*" 2 false: the software does not identify the MDS cells and no bit-reordering is done  "*" 2 timing: software identifies and uses the MDS cells for timing optimization  "*" 2 power: software identifies and uses the MDS cells for power optimization  "*" 2 true: software identifies and uses the MDS cells for both timing and power optimization
.RE   Note: When this parameter is set to true, power, or timing, a "Bit-strength (strong to weak)" column will be added in the report generated using the reportMultiBitFFs -info, -all, and -cell parameters.  Default: false  "\fB-opt_multi_bit_flop_split_report_failure_reason {true|false}\fR" When set to false, disables the printing of MBFF split failure reasons. By default this parameter is set to true, which means the reasons for MBFF instances not splitting are printed. This is the default behavior.  Default:true  "\fB-opt_multi_bit_flop_split_timing_effort {low | medium | high}\fR" Specifies the timing effort level for MBFF splitting.
.RS  "*" 2 low effort setting means splitting will be done only when absolutely necessary for critical paths.  "*" 2 medium effort setting means splitting happens for more critical paths to improve timing and remove critical timing bottlenecks
.  "*" 2 high effort setting does aggressive splitting and try to improve timing
.
.RE   Default: low  "\fB-opt_multi_bit_unused_bit_count <integer>\fR" Specifies the maximum number of unused bits to be allowed in each multi-bit cell.  Default: 0  Min: 1  Max: 32  Note: To use this parameter, set the -opt_multi_bit_unused_bits parameter to true.  "\fB-opt_multi_bit_unused_bits {false | true | prePlace | preCTS}\fR" Specifies whether a mapped multi-bit instance can have one or more unused bits. By default, at prePlace stage Innovus tries to merge the single-bit registers to multi-bit instances without unused bits. If during merging, the software is unable to find a suitable multi-bit lib_cell with a width that matches the left-over bits of a bus, it chooses the closest matching width, which leaves the minimum unused bits and, therefore, increases the multi-bit merging coverage.  When set to false, any merging that results in unused (undriven/unloaded) bits is prevented.  When set to true, the software tries to merge the single-bit register to multi-bit instances with unused bits at both, prePlace and preCTS stages.  When set to preCTS, the software merges the single-bit register to multi-bit instances with unused bits at the preCTS stage.  Default: prePlace  "\fB-opt_new_inst_prefix <prefix>\fR" Specifies a prefix string to add to instances created by timing optimization. For example, if a default prefix is OFC_000234, when you use the command setOptMode -opt_new_inst_prefix POSTROUTE_, the combined prefix added to the instance name is POSTROUTE_OFC_00234.  Default: "" (empty string)  Note: To ignore the default prefix, use the following parameter: -opt_concatenate_default_and_user_prefixes false.  "\fB-opt_new_net_prefix <prefix>\fR" Specifies a prefix string to add when timing optimization creates nets. For example, if a default prefix is PSN_000234, when you use the command setOptMode -opt_new_inst_prefix POSTROUTE_, the combined prefix added to the net name is POSTROUTE_PSN_00234.  Default: "" (empty string)  Note: To ignore the default prefix, use the following parameter: -opt_concatenate_default_and_user_prefixes false.  "\fB-opt_one_pass_lec {true | false}\fR" When set to true, enables the one pass Logical Equivalence Check (LEC) flow. In one pass LEC, you can do a Register Transfer Level (RTL) to netlist comparison between RTL and postRoute optimization (PRO) netlist - any place and route (PnR) stage netlist - in a single step.  Default: false  "\fB-opt_podv2_flow_effort {auto | standard | extreme}\fR" Specifies the effort level for the place_opt_design V2 (PODV2) flow. See clock_opt_design.  The following settings are available:
.RS  "*" 2 auto: The software follows the setDesignMode -flowEffort setting to perform optimization.  "*" 2 standard: The software performs a fast prects optimization and runtime is less. This option is recommended in the early design stage or in simple designs for PPA estimation.  "*" 2 extreme: The software performs a deep optimization to chase the best PPA. Runtime is high.
.RE   Default: auto  "\fB-opt_pin_swapping {true | false}\fR" Controls whether timing optimization allows pin swapping.   Default: true  Note: This parameter is not enabled when setDesignMode -flowEffort express is set.  "\fB-opt_post_route_allow_overlap {true | false}\fR" Controls whether timing optimization allows overlap during optDesign -postRoute.  Default: true  "\fB-opt_post_route_area_reclaim {none | setupAware | holdAndSetupAware}\fR" This parameter can be used after routing to reclaim area during optDesign -postRoute. It safely reclaims area while not impacting the timing and DRV violations. You can use the following options:
.RS  "*" 2 none: No area reclaim is done. This is the default setting.  "*" 2 setupAware: Reclaim is done but is not hold aware. This may degrade hold timing significantly but will maintain the setup timing while giving the best possible reclaim results.  "*" 2 holdAndSetupAware: Reclaim is done but is both hold and setup aware. It will not give as good reclaim results as setupAware alone. But it will mean both setup and hold Timing will be maintained.
.RE   Default: none  "\fB-opt_post_route_art_flow {true | false}\fR" Ensures that timing optimization applies to ART-based flow. In the ART-based flow, it partially activates the design at the top-level and at the interface path of partition blocks so that there is a reduction in memory usage and run time if the design is large.  This parameter marks the core logic inside the partition as dont_touch, so the logic is not optimized.   Default: false  Note: This parameter requires partition definition information and applies to the post-route mode only.  "\fB-opt_post_route_check_antenna_rules {true | false}\fR" Allows optimization to check/ignore antenna rules for LEF-safe swaps. The default behavior is to check the antenna rules, in order to avoid antenna violations caused by the cell swappings. LEF files have certain antenna rules defined in them. By default, when doing LEF-safe swaps for leakage power optimization and for LEF-safe timing recovery, it is ensured that the cells have the same antenna rules. If cells don't have the same antenna rules, they are not swapped.  However, if this parameter is set to false, in postRoute mode, antenna rules will not be considered when doing LEF-safe swaps. Therefore, setting this option to false improves timing and leakage but it can potentially lead to routing having antenna violations, which will require a call to the ecoRoute command for cleanup.  Default: true  "\fB-opt_post_route_drv_recovery {false | auto | true}\fR" Controls the DRV/glitch recovery step performed when optDesign -postRoute -setup -hold and optDesign -postRoute -hold commands have been specified. You can specify the following options:
.RS  "*" 2 false: Disables DRV/glitch recovery.  "*" 2 auto: Allows the software to determine when to trigger DRV/glitch recovery. Here recovery will be triggered if any of the DRV's or glitches degrade beyond a certain margin.   "*" 2 true: Always triggers DRV/glitch recovery if there are any left in the design.
.RE   Default: auto  "\fB-opt_post_route_fix_clock_drv {true | false}\fR" Controls whether ccopt_pro is called or not at the start of postRoute optimization.  By default this parameter is set true, which means that ccopt_pro is called to repair clock tree design rule violations (DRVs) that have occurred in the clock tree after routing. These DRVs are most commonly the user-set clock transTime violations. To disable the fixing of DRVs, set the parameter to false.  Default: true  "\fB-opt_post_route_fix_glitch {true | false}\fR" Determines whether to fix glitch violations during SI optimization. To disable fixing of glitch violations, set this parameter to false.  Note: For SI glitch fixing, you must set the setSIMode -enable_glitch_report parameter to true. If setOptMode -opt_post_route_fix_glitch is set to true but setSIMode -enable_glitch_report is set to false, the software will issue a warning during glitch fixing.  Default: true  "\fB-opt_post_route_fix_si_transitions {true | false}\fR" Enables fixing SI induced slew violations in postRoute optimization.  Note: The transition values will be used for maximum transition violation fixing only and will not affect the timing calculation in EDI's timing engine. This is because the transition effect is considered by the internal SI engine during delay pushout calculation.  Default: false  "\fB-opt_post_route_hold_recovery {false | auto | true}\fR" Controls the Hold Recovery step performed when optDesign -postRoute -setup -hold and optDesign -postRoute -hold commands have been specified. You can specify the following options:
.RS  "*" 2 false: Disables hold recovery.  "*" 2 auto: Allows the software to determine when to trigger hold recovery. Here recovery will be triggered if WNS or TNS degrade beyond a certain margin.  "*" 2 true: Always triggers hold recovery if timing is not met, irrespective of the gain/degradation in post route timing. 
.RE   Default: false  "\fB-opt_post_route_setup_recovery {false | auto | true}\fR" Controls the Setup Recovery step performed when optDesign -postRoute -setup -hold and optDesign -postRoute -hold commands have been specified. You can specify the following options:
.RS  "*" 2 false: Disables setup recovery.  "*" 2 auto: Allows the software to determine when to trigger setup recovery. Here recovery will be triggered if WNS or TNS degrade beyond a certain margin.  "*" 2 true: Always triggers setup recovery if timing is not met, irrespective of the gain/degradation in post route timing.
.RE   Default: auto  "\fB-opt_power_effort {none | low | high}\fR" Specifies the power-driven optimization functionality in Innovus. This parameter provides the effort level for optimizing leakage power and dynamic power in the design. Use the -opt_power_effort parameter along with the -opt_leakage_to_dynamic_ratio parameter to give a superior QOR and to trigger power-driven optimization. Power-driven optimization implies that the optDesign command now performs Power, Performance, and Area (PPA) trade-offs at the transform level at every step of timing optimization.  You can specify any one of the following options:  none: Specifies that no power optimization is to be performed.  low: Specify this parameter when power optimization is not the highest priority. Using the low effort level option indicates the following:
.RS  "*" 2 Power optimization is performed only at certain stages of the optDesign flow, which is dependent on the value of the -opt_leakage_to_dynamic_ratio parameter. When the -opt_leakage_to_dynamic_ratio is 1.0, optDesign will optimize leakage power after each timing optimization step and no high leakage cells are inserted during hold fixing. When -opt_leakage_to_dynamic_ratio is 0.0, optDesign will optimize dynamic power at the preCTS stage. For all values of -opt_leakage_to_dynamic_ratio between 0.0 and 1.0, both of the above are done.  "*" 2 Timing optimization is power-aware but uses only low-effort techniques when choosing the best timing optimization fixes to implement.  "*" 2 Timing closure remains the first priority and the worst negative slack achieved is the same as that in effort mode none.  "*" 2 On an average, the CPU full flow runtime impact is +26% for a -opt_leakage_to_dynamic_ratio of 0.5 as compared to that in effort mode none. This can vary depending on both the ratio being used and on the design.  "*" 2 On an average, the MEM full flow impact is +5%.  "*" 2 Utilization remains roughly at par with effort level none results.  "*" 2 On an average, the overall standard cell dynamic power saving is -30% and can go up to -69% as compared to that achieved in effort mode none. On an average, the overall standard cell leakage power saving is -41% and can go up to -90% on some designs. This is achieved with a -opt_leakage_to_dynamic_ratio of 0.5 and will vary if this ratio is changed.  Note: The above numbers are estimates and are completely dependent on the type of design.Therefore, they may be very different from the averages given above.
.RE   high: Use the high effort level option when having low power is the highest priority. Using the high effort level option indicates the following:
.RS  "*" 2 Power optimization is performed during all calls to optDesign, which is dependent on the value of the -opt_leakage_to_dynamic_ratio parameter. Timing Optimization is power aware and uses high-effort techniques when choosing the best timing optimization fixes to implement.  "*" 2 Timing closure should still be achievable, if it was previously, and in the majority of cases the same worst negative slack is reached as effort mode "none".  "*" 2 CPU full flow runtime impact is on an average +63% for a -opt_leakage_to_dynamic_ratio 0.5 compared to effort "none". This can vary depending on both the ratio being used and on the design.  "*" 2 MEM full flow impact is on an average +11%.  "*" 2 Utilization is generally improved by -1.3% on average compared to effort level "none" results.  "*" 2 On an average, the overall standard cell dynamic power saving is -32% and can go up to -70% as compared to that achieved in effort mode none. On an average, the overall standard cell leakage power saving is -54% and can go up to -98% on some designs. This is achieved with a -opt_leakage_to_dynamic_ratio of 0.5 and will vary if this ratio is changed.  Note: The above numbers are estimates and are completely dependent on the type of design.Therefore, they may be very different from the averages given above.
.RE   Default: none  Before power optimization is performed, it is required that the correct power view is specified using the set_analysis_view -leakage or -dynamic <view_name> command. Both, leakage and dynamic optimization need to target the view that is most important in the design and then use it when optimizing the leakage, internal, and switching power. If dynamic optimization is being done (when a -opt_leakage_to_dynamic_ratio is anything other than the default of 1) then it is also required that the switching activity is specified. This can be done by using the read_activity_file -format {VCD | TCF | SAF} <file name>. In the absence of a switching file, it is recommended to specify the following:  set_default_switching_activity -input_activity 0.2 -seq_activity 0.2.  This will ensure both predictability and consistency throughout the flow.  "\fB-opt_pre_route_ndr_aware <list>\fR" Enables NDR-based optimization by providing a list of NDR names.  Using NDR-based optimization, GigaOpt assigns NDR on timing critical nets in order to improve timing. GigaOpt will automatically assess the list of NDRs provided and choose the one that can help timing. It is not recommended to use many NDRs for TAT point of view.  Default: "" (empty string)  "\fB-opt_preserve_all_sequential {true | false}\fR" Preserves sequential elements when netlists are optimized.  When the setOptMode -opt_remove_redundant_insts parameter is set to true, the command removes unobservable or useless logic. However, you can retain sequential elements by setting -opt_preserve_all_sequential parameter to true.   Default: false  "\fB-opt_preserve_hpin_function {true | false}\fR" Determines whether to preserve logical functions at hierarchical module ports.  When set to false, only the hierarchical module ports that have a timing assertion applied on them will be preserved (not deleted, duplicated, or polarity changed). This is the recommended setting since it allows more freedom for timing optimization while not impacting the netlist functionality or the timing constraints.  When set the true, every port of every hierarchical mode will be preserved (not deleted, duplicated, or polarity changed). This is very constraining.  Default: false  "\fB-opt_remove_redundant_insts {true | false}\fR" Controls whether timing optimization simplifies the netlist. The software recovers area, decreases congestion, and improves runtime by simplifying the netlist in the following ways:
.RS  "*" 2 Removing dangling output instances  "*" 2 Propagating constants  "*" 2 Removing unobservable logic  "*" 2 Remapping useless logic
.RE   The software respects the set_dont_touch constraint, so it does not remove the constrained flip-flops, and does not touch non-uniquified modules.  Default: true  Note: This parameter is not enabled when setDesignMode -flowEffort express is set..  Note: If a netlist contains spare cells, ensure that you define them using the specifySpareGate command else they might be removed by the -opt_remove_redundant_insts parameter.  "\fB-opt_resize_flip_flops {true | false}\fR" Controls whether timing optimization upsizes or downsizes flip-flops.  Default: true  "\fB-opt_resize_level_shifter_and_iso_insts {true | false}\fR" Controls whether timing optimization resizes shifters and isolation instances. In default mode (false), shifters and isolations are considered "don't-touch" instances and are not changed during timing optimization.  When this parameter is set to true, the shifters and isolation cells are resized for timing optimization by using optDesign.  Note: When this parameter is set to true, all the shifters and isolation cells can be resized even if they are marked as dont_touch.  Default: false  "\fB-opt_resize_power_switch_insts {true | false}\fR" When set to true, enables resizing of power switch instances during optimization. By default, this parameter is set to false, which means the power switch instances are not resized during optimization.  Default: false  "\fB-opt_sequential_genus_restructure_report_failure_reason {true | false}\fR" When set to true, the sequential critical region resynthesis (CRR) failure reasons are reported in the SeqCrrFailReasons.rpt file. The report includes the instance name and the corresponding failure reason.  Note: When CRR is enabled, Innovus uses Genus to restructure portions of the design to improve timing/area/power during setup optimization.  Default: false  "\fB-opt_setup_target_slack <setupTargetSlack>\fR" Specifies a target slack value in nanoseconds for setup analysis. During setup violation repair, the setup target slack is <setupTargetSlack> and the hold target slack is set to 0. Generally, you use both  -opt_setup_target_slack and  -opt_hold_target_slack for hold analysis. If you specify  -opt_hold_target_slack only, the  -opt_setup_target_slack value is 0.  Default: 0ns  "\fB-opt_skew {true | false}\fR" Controls whether timing optimization runs the skewClock command.  This parameter produces scheduling and latency files before CTS runs, or adds buffers and inverters after CTS, just as skewClock does. Useful skew optimization is run iteratively within optDesign, so you do not need to specify this parameter more than once.  Note: The setAnalysisMode -opt_skew parameter gets set to true after optDesign -preCTS, which generates the latency file.  When the -opt_skew parameter is set to false, it disables all useful skew everywhere, regardless of other setOptMode -opt_skew* settings such as those specified using the -opt_skew_ccopt, -opt_skew_post_route, and -opt_skew_pre_cts parameters.  Default: true  Note: This parameter is not enabled when setDesignMode -flowEffort express is set.  "\fB-opt_skew_ccopt {none | standard | extreme}\fR" Specifies the effort for useful skew in both CTS and post-CTS flow. It replaces the earlier parameters, -opt_skew_pre_cts and -opt_skew_post_route.  This parameter setting is only respected by ccopt_design and optDesign -postCTS.
.RS  "*" 2 none: low effort ccopt_design with no skewing  "*" 2 standard: low effort ccopt_design. This is the default setting.  "*" 2 extreme: high effort ccopt_design
.RE   Note: To achieve the best possible timing result, the extreme setting will significantly increase the execution time of the ccopt_design command. Also, for best results the extreme setting should be used with setDesignMode -flowEffort extreme.  The obsoleted options/commands and the corresponding values set by this parameter are detailed below:
.RS  "*" 2 setOptMode -opt_skew_pre_cts false corresponds to setOptMode -opt_skew_ccopt standard  "*" 2 setOptMode -opt_skew_post_route true corresponds to setOptMode -opt_skew_ccopt standard if setDesignMode -flowEffort is not set to extreme  "*" 2 setOptMode -opt_skew_post_route false corresponds to setOptMode -opt_skew_ccopt none if setDesignMode -flowEffort is not set to extreme
.RE   "\fB-opt_skew_post_route {true | false}\fR" When set to false, it disables useful skew in postRoute optimization.  Default: true  "\fB-opt_skew_pre_cts {true | false}  \fR" When set to false, it disables useful skew in preCTS optimization.  Default: true  "\fB-opt_target_based_opt_file <filename>\fR" Specifies the file containing information that target-based optimization (TBOpt) will use to do fine grain target-based optimization using the optDesign -postRoute -targeted command.   The format of the TBOpt file is as follows:  NETS : {net1} {net2} {netN}  FROMTOS : {fromTerm1 toTerm1} {fromTerm2 toTerm2} {fromTermN toTermN}  INSTS : {inst1} {inst2} {instN}  PATHS : {endpoint1} {endpoint2} {endpointN}   END_POINT_ADJ : {endpoint1} {slack_adj: value in ps}  AREA_RECLAIM : {ModuleName} {x1 y1 x2 y2}   PWR_RECLAIM : {ModuleName} {x1 y1 x2 y2}   SI_GLITCH : {netName or netNameList} {value: e.g. 0.1}   DRVS : {netName1} {netName2} {max_tran: e.g. 100}   Note: For more information about the file syntax and what is possible with respect to node specification and end point adjustment, area, power, max transition, and SI glitch optimization see the Optimizing Timing chapter of the Innovus User Guide.  An example of a TBOpt file is provided below:  NETS : {mod_i/mod_sub_i/reset_l_sync_3} {mod_i/mod_sub_i/FE_OCPN210_reset_l_sync_3}  INSTS : {mod_i/mod_sub_i/reset_l_sync_reg_15} {mod_i/mod_sub_i/FE_OCPC210_reset_l_sync_16}  PATHS : {mod_i/mod_sub_i/ser_en/data_d1_reg_32/D}  Default: "" (empty string)  "\fB-opt_target_based_opt_file_only {true | false}\fR" This parameter is used along with the -opt_target_based_opt_file parameter. By default, this parameter is set to true. So, by default,TBOpt only optimizes the nodes contained within the file specified using the -opt_target_based_opt_file parameter. When set to false, the TBOpt optimizes other nodes in addition to those specified in the file, if the software considers them to be critical.  Default: true  "\fB-opt_target_based_opt_hold_file <hold_file_name>\fR" Specifies the file containing information that TBOpt will use to perform hold optimization.  setOptMode -opt_target_based_opt_hold_file <hold_file_name>  optDesign -postRoute -targeted -hold  Note: You can launch setup optimization followed by hold optimization using the following command:  optDesign -postRoute -targeted -setup -hold  Hold optimization is only called in the -opt_target_based_opt_file_only mode.  Default: "" (empty string)  "\fB-opt_tied_inputs {true | false}\fR" When set to true, forces optimization of instances with inputs tied together, even if it worsens the objective gain - in terms of area, power, and delay.  Default: false  Note: This parameter does not need to be specified when the ecoRemoveTiedInputs command is run. In that case this parameter is automatically set to true and instances with inputs tied together are optimized. After the command has been run, the parameter reverts to the value before executing the command.  "\fB-opt_time_design_compress_reports {true | false}\fR" When set to true, this parameter forces timeDesign and optDesign to output timing reports in a compressed format.  Default: true  "\fB-opt_time_design_expanded_view {true | false}\fR" When set to true, this will force timeDesign or optDesign to print summary timing reports as per the view in the log file.  Note: This parameter does not have any effect when the auto view pruning flow is ON for optDesign. This is the default flow, starting from the 15.1 release version of the software. Therefore, to output view-specific timing reports in this flow, run timeDesign -expandedViews after performing optimization.  Default: false  "\fB-opt_time_design_num_paths number\fR" Allows you to select the number of paths that should be reported per path group during timeDesign or optDesign final summary reports.  Default: 50  "\fB-opt_time_design_report_net {true | false}\fR" When set to true, it forces timeDesign or optDesign to print timing reports with the net section.  Default: true  "\fB-opt_time_design_vertical_timing_summary {true|false}\fR" When set to true, prints vertical timing summary after timeDesign and final summary report.  Default: false  "\fB-opt_unfix_clock_insts {true | false}\fR" Controls whether the software is allowed to resize fixed sequential elements and to move them during placement legalization. optDesign temporarily removes the fixed attribute of each sequential element at the beginning of this step and sets it back to its original value at the end. This option does not remove the routed wires of the clock tree. It minimizes the movement of sequential elements as much as possible. This option impacts only optDesign -postCts and optDesign -postRoute.
.RS  "*" 2 When true, the software is allowed to resize and move fixed registers.
.RE
.RS  "*" 2 When false, the software is not allowed to resize or move fixed registers.
.RE   Default: true  Note: If you specify true for this parameter, Cadence recommends you use therouteDesign command for routing your design.  "\fB-opt_verbose {true | false}\fR" Controls the amount of information timing optimization outputs to the log file. Specify true to output additional information to use to debug design issues. When you set this parameter to true, the various reasons for not fixing hold violations are listed in the log file.  Default: false  For more information, see the "Reasons for Hold Violations to Remain Unfixed" section below.  "\fB-reset\fR" Resets parameters to their default values. The -reset parameter must be the first parameter specified. If you specify  -reset by itself, the software resets all  setOptMode parameters to their default values. If you specify parameters after  -reset, the software resets only those parameters to their default values. Any values that do not already match the default value and are reset will be reported. 
.SH Examples
.RS  "*" 2 The following command resets all setOptMode parameters to their default values:   setOptMode -reset
.RE
.RS  "*" 2 The following commands specify target slack values for setup and hold times and optimize timing in the design based on those values:   setOptMode -opt_setup_target_slack 0.1 -opt_hold_target_slack 0.15  optDesign -postCTS
.RE
.RS  "*" 2 The following commands optimize leakage power in addition to optimizing timing and area, and fixing design rule violations:   setOptMode -opt_power_effort high -opt_leakage_to_dynamic_ratio 1.0   optDesign -preCts  optDesign -postCts  optDesign -postRoute  optDesign -postRoute -hold
.RE
.RS  "*" 2 The following commands allow the software to move clock instances during post-CTS timing optimization, and then run timing optimization:   timeDesign -postCts  setOptMode -opt_unfix_clock_insts true  optDesgin -postCts
.RE
.RS  "*" 2 The following command forces hold fixing to use the four cells specified in the list:   setOptMode -opt_hold_cells {BUFFX8 BUFFX12 DELAY2 DELAY3}  optDesign -postCts/-postRoute -hold
.RE
.RS  "*" 2 The following command force optDesign to buffer all the nets that have a wirelength larger than 900um and also not to generate any new long net that would violate this rule:   setOptMode -opt_max_length 900  optDesign -preCts | -postCts | -postRoute
.RE
.RS  "*" 2 The following command forces optDesign to work towards positive slack for hold instead of zero:   setOptMode -opt_hold_target_slack 0.5
.RE
.RS  "*" 2 The following command will fix all the hold timing violations down to 0ns slack except the violations that are initialy violated by more than -3ns. Those ones would be left untouched.   setOptMode -opt_hold_slack_threshold -3 -opt_hold_target_slack 0  "*" 2  The following commands will perform a fine grain target-based optimization at the postRoute stage on the nodes provided by the TBOpt file, tb_opt.txt as well as any other nodes  that are identified as being critical:   setOptMode -opt_target_based_opt_file tb_opt.txt  optDesign -postRoute -targeted  "*" 2  The following commands will perform a fine grain target-based optimization at the postRoute stage on the nodes provided by the TBOpt file, tb_opt.txt only:   setOptMode -opt_target_based_opt_file tb_opt.txt -opt_target_based_opt_file_only true  optDesign -postRoute -targeted
.RE 
.SH Reasons for Hold Violations to Remain Unfixed
.P The following table lists the various reasons for hold violations to remain unfixed:    "\fBReason\fR" Description  "\fBNo legal location\fR" There are no valid locations to insert buffers on those violated nets. Limit the local placement congestion and use instance/cell padding during initial placement.  In parallel, to allow the tool to insert buffers at non-legal location, set the following parameter:  setOptMode -opt_hold_allow_overlap true.  "\fBDegradation in setup register-to-register WNS\fR" The nets are violated in hold but they are also a part of the register-to-register setup timing-critical paths. So inserting a buffer would degrade the setup register-to-register WNS.  To fix these nets at the cost of register-to-register setup degradation, set a negative setup target slack using setOptMode -opt_setup_target_slack <setupTargetSlack>.  "\fBDegradation in setup TNS\fR" The nets are violated in hold but they are also timing critical during setup. So, inserting a buffer would increase the setup TNS.  To fix these nets at the cost of setup TNS degradation, set the following parameter:  setOptMode -opt_hold_allow_setup_tns_degradation true  "\fBDegradation in setup WNS\fR" The nets are violated in hold but they are also setup timing critical. So inserting a buffer would degrade the setup WNS.  To fix these nets at the cost of setup degradation, set a negative setup target slack using   setOptMode -opt_setup_target_slack <setupTargetSlack>.  "\fBDegradation in hold\fR" The nets are violated in hold but inserting a buffer would further degrade hold timing.  Check the topology of those nets and probably enlarge the list of available buffer/delay cells that are allowed to be used.  "\fBDegradation in maximum capacitance violation\fR" The nets are violated in hold but inserting a buffer would create a new setup maximum capacitance violation.  To fix these nets at the cost of DRV degradation, set the following parameter:  setOptMode -opt_drv false  "\fBDegradation in maximum transition violation\fR" The nets are violated in hold but inserting a buffer would create a new setup maximum transition violation.  To fix these nets at the cost of DRV degradation, set the following parameter:  setOptMode -opt_drv false  "\fBDRV violations\fR" The nets are violated in hold but also in setup DRV, so they are skipped.  To fix these nets at the cost of DRV degradation, set the following parameter:  setOptMode -opt_drv false  "\fBNets are set as dont_touch\fR" To allow hold fixing on these nets, remove the dont_touch attribute.  "\fBNets are routed incorrectly\fR" Verify the routing wires for those nets.  "\fBNets are clock nets\fR" No buffers can be inserted on clock nets. You should check your timing constraint file.  "\fBNone of the always-on-buffers are usable\fR" Verify the environment to allow the use of always-on-buffers.  "\fBNone of the valid mode is found on a net\fR" The tool is not able to insert a buffer on such a net. This could be related to specific design cases.  "\fBAny internal failure\fR" The tool was not able to find a solution for fixing the violation of those nets. This could be related to libraries or specific design cases. 
.SH Related Information
.RS  "*" 2 ccopt_design  "*" 2 getOptMode  "*" 2 addRepeaterByRule  "*" 2 optDesign  "*" 2 place_opt_design  "*" 2 reclaimArea  "*" 2 routeDesign  "*" 2 setDesignMode  "*" 2 set_default_switching_activity  "*" 2 set_analysis_view  "*" 2 skewClock  "*" 2 specifySpareGate  "*" 2 timeDesign
.RE
.RS  "*" 2 The following section in Optimizing Timingthe Innovus User Guide
.RS  "*" 2 Default Naming Conventions in "Viewing the Added Buffers, Instances, and Nets after Optimization".
.RE 
.RE
.P
