.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH set_macro_place_constraint  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBset_macro_place_constraint\fR \-  Enables you to specify the constraints for placing the macros and standard cells concurrently
.SH Syntax \fBset_macro_place_constraint\fR  [-help]   [<array elements>]  [-array <array_name> [-common_hier <name>][-valid_group_orients {R0 MX MY}]    [-place_order {horizontal vertical}]]    [{-insts <string> | -all_macros } {-orientation <string>} [-common_hier <name>]]   [-cells <string> {-cell_obs <string> | -track_adjustment <string>}]  [-align_group <string>] [-cpg <string>]   [[-max_io_pin_group_keep_out {<depth_value> [<side_value>]}]  [-forbidden_space_to_core {<unified_value> | <horizontal_value vertical_value>}]  [-forbidden_space_to_macro {<unified_value> | <horizontal_value vertical_value>}]  [-min_space_to_core {<unified_value> | <horizontal_value vertical_value>}]  [-min_space_to_macro {<unified_value> | <horizontal_value vertical_value>}]  [-parallel_run_length <float>]   [-horizontal_stacking {<max_macro_stack_length min_space_between_macro_stack max_space_between_macros>}]   [-vertical_stacking {<max_macro_stack_length min_space_between_macro_stack max_space_between_macros>}]  [-honor_strict_spacing_constraint {true | false}]   [-avoid_abut_macro_edge_with_pins {true | false}]  [-same_length_site <integer>]  [-pg_resource_model {<M1 value1 M2 value2
...>}]  [-macro_corner_keepout {<double_endcap_width> <double_endcap_height>}]  [-halo_sharing {true | false}]] 
.P Enables you to specify the constraints for placing the macros and standard cells concurrently. These constraints can be used to place macros in an array (or matrix) and define the relative placement of each macro. The whole array, treated like one macro, can be flipped or mirrored (R0, MX, MY, R180). You can use the new set_macro_place_constraint command to specify:
.RS  "*" 2 Macro array constraints  "*" 2 Group aligning constraints  "*" 2 Macro-to-macro and macro-to-core boundary spacing constraints  "*" 2 Macro orientation constraints  "*" 2 Over macro power routing modeling   "*" 2 Maximum stacking length  "*" 2 Reserved space for pin routing  "*" 2 I/O Pin Keep-out 
.RE
.P Note: For more information on the mixed placement constraints, see the "Mixed Place Constraints" section of the Using the Mixed Placer chapter in the Innovus User Guide. 
.SH Parameters    "\fB-align_group <string>\fR" Specifies the macros that are to be aligned.  Data_type: string, optional  "\fB-all_macros\fR" Specifies that all macros should honor the constraints.  This option makes sense when using the -orientation option.  Data_type: bool, optional  "\fB<array_elements>\fR" Specifies the instance members information of a row or column of the array in the following format:  inst_name:orientation [spacing inst_name:orientation ] +  Note: The <array_elements> should be specified with the -array parameter.  Data_type: string, optional  "\fB-array <array_name>\fR" Specifies the macro array name.  Data_type: string, optional  "\fB-avoid_abut_macro_edge_with_pins {true | false}\fR" When set to true, the set_macro_place_constraint command does not abut macro edges with pins even if the macro distance is within the forbidden space setting. Macros will be separated by the min_space_to_macro distance.  Default: true  Data_type: enum, optional  "\fB-cell_obs {{<Layer1_Name PowerStripeWidth SpacingBetweenStripes>} {<Layer2_Name
....>}}\fR" Specifies the layer width and spacing to add cell obstruction on each macro to model power stripes
. During the concurrent macro placement the power mesh does not exist.  This parameter allows to mimic the number of routing tracks occupied by the real power mesh over the macros to make the congestion analysis more accurate during the concurrent macro placement.   The format is:  cell_obs{{<Layer1_Name PowerStripeWidth SpacingBetweenStripes>} {<Layer2_Name
....>}}  Example:  set_macro_place_constraint -cells <cell_name>  -cell_obs {{M5 0.24 1.251} {M8 0.64 8.409} {M9 1.2 7.49} }   Note: This setting is generated automatically by the create_pg_model_for_macro_place command. It is highly recommended to use this command to define the -cell_obs parameter.  Data_type: string, optional  "\fB-cells <string>\fR" Used in combination with the -cell_obs command to specifies the constraints for all instances of the specified cells.  Data_type: string, optional  "\fB-common_hier <name>\fR" Specifies the common logic hierarchy name for <inst_name> in <array_elements>, so the <inst_name> can be specified with short-hand format.  Data_type: string, optional  "\fB-cpg <string>\fR" Specifies the cpg guide of one instance.  Data_type: string, optional  "\fB-forbidden_space_to_core {<unified_value> | <horizontal_value vertical_value>}\fR" Specifies the value for forbidden spacing between macro to core boundary. If the space between the macro and core is smaller than this value, then the macros are abutted.Note: 
.RS  "*" 2 If only one unified value is specified, both horizontal and vertical spacings use the same value. If two values are specified, the first value is for the horizontal spacing, the second value is for the vertical spacing.  "*" 2 In case the -min_space_to_core parameter has been specified, then the value specified for the -forbidden_space_to_core parameter should be less than the value specified for the -min_space_to_core parameter.
.RE   Minimum=0  Maximum=100000  Default: <0>   Data_type: string, optional  "\fB-forbidden_space_to_macro {<unified_value> | <horizontal_value vertical_value>}\fR" Specifies the value for forbidden spacing between macro to macro boundary. If the space between the macros is smaller than this value, then the macros are abutted.  Note: 
.RS  "*" 2 If only one unified value is specified, both horizontal and vertical spacings use the same value. If two values are specified, the first value is for the horizontal spacing, the second value is for the vertical spacing.  "*" 2 In case the -min_space_to_macro parameter has been specified, then the value specified for the -forbidden_space_to_macro parameter should be less than the value specified for the -min_space_to_macro parameter.
.RE   Minimum=0  Maximum=100000  Default: <0>   Data_type: string, optional  "\fB-halo_sharing {true | false}\fR" When enabled, abutted macros can share halos between them.  Note: When the spacing between two macros is less than the forbidden-space-to-macro, the two macros are abutted. Since a single halo width instead of double width is enough to meet the physical rules, abutted macros can share halos between them using the new -halo_sharing parameter.  Note: The halos of the abutted macros can overlap but macros cannot overlap with the halo of the other macro.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false   Data_type: enum, optional   "\fB-help\fR" Outputs a brief description that includes the type and default information for each set_macro_place_constraint parameter.  For a detailed description of the command and all of its parameters, use the man command:   man set_macro_place_constraint  "\fB-honor_strict_spacing_constraint{true | false}\fR" When set to true, it specifies that the forbidden spacing and minimum spacing constraints must be honored strictly.  Data_type: enum, optional   "\fB-horizontal_stacking {<max_macro_stack_length  min_space_between_macro_stack  max_space_between_macros>}\fR" Specifies the maximum horizontal stack depth and the minimum horizontal spacing.
.RS  "*" 2 max_macro_stack_length: Specifies that the macro stacking length should not be more than the specified value.  "*" 2 min_space_between_macro_stack: Specifies the spacing between different macro stacks.  "*" 2 <max_space_between_macros>: Specifies the maximum space between macros. When the macro spacing is less than the specified value, the macros are counted in the stacking length. For example, if the max_space_between_macro value is 9 then the macros will be considered as packed if the space between the macros is between 0 and 9, however, if the real space is 10 then nothing will happened.
.RE   Data_type: string, optional   "\fB-insts <string>\fR" Specifies the macros on which the orientation constraints are set.   Refer to the -orientation for more information.  "\fB-macro_corner_keepout {<double_endcap_width> <double_endcap_height>}\fR" Specifies the macro corner spacing constraints. It ensures that there is enough space between the macro corners for inserting the endcap cells properly.  Note: The corner keepout area starts at the corner of the macro halo.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)    Note: The macro corner spacing constraints specified with this parameter are honored by the refine_macro_place and check_macro_place_constraint commands. However, if honoring the corner keepout constraint is difficult, corner abutting is allowed.  Note: The tool reserves either the horizontal keepout larger than double corner cell width or vertical keepout larger than double corner cell height  Default: {0,0}  Data_type: string, optional  "\fB-max_io_pin_group_keep_out {<depth_value> [<side_value>]}  \fR" Specifies the maximum height and (optionally) side extension to automatically add macro-only blockages to IO pins.  Note:  The  -max_io_pin_group_keep_out parameter automatically coordinates the size of the macro-only blockages based on the pin density and number for each group of IO pins.  Note: Side value is optional. If you do not specify the side value, the set_macro_place_constraint command follows the default method to calculate the side ( side =  depth). If you specify the side value, the max IO group needs to follow the  specified depth and side distance. The blockages of smaller IO groups will be derived automatically, keeping the same <depth/side> proportion (as described for the max IO group)  Innovus supports the following formats:  set_macro_place_constraint -max_io_pin_group_keep_out <depth_value>  set_macro_place_constraint -max_io_pin_group_keep_out {<depth_value>}  set_macro_place_constraint -max_io_pin_group_keep_out {<depth_value side_value>}  Note:  The depth and side values are specified in microns.  Minimum=0  Maximum=100000  Data_type: string, optional  "\fB-min_space_to_core {<unified_value> | <horizontal_value vertical_value>}\fR" Specifies the value for the minimum spacing between macro and core boundary. If the space between the macro and core is smaller than this value and larger than the forbidden space, then the macros are pushed away from the core to minimum space.  Note: If only one unified value is specified, both horizontal and vertical spacings use the same value. If two values are specified, the first value is for the horizontal spacing, the second value is for the vertical spacing.  Minimum=0  Maximum=100000  Default: <0>   Data_type: string, optional  "\fB-min_space_to_macro {<unified_value> | <horizontal_value vertical_value>}\fR" Specifies the value for the minimum spacing between macro to macro boundary. If the space between the macros is less than this value, then the macros are aligned.  Note: If only one unified value is specified, both horizontal and vertical spacings use the same value. If two values are specified, the first value is for the horizontal spacing, the second value is for the vertical spacing.  For Example:
.RS  "*" 2 In the following command, both horizontal and vertical spacing use the same value.    set_macro_place_constraint -min_space_to_macro 10  "*" 2 In the following command, the first value is for horizontal spacing, the second value is for vertical spacing.   set_macro_place_constraint -min_space_to_macro {10 20}
.RE   Minimum=0  Maximum=100000  Data_type: string, optional  "\fB-orientation <string>\fR" Specifies the allowed orientation for the macros.  The macro instances on which you want to constrain the orientations can be specified by -insts or -all_macros   Note: Specified orientation overwrites the previous definition.  Example:  set_macro_place_constraint -all_macros -orientation {R90 MX90 MY90 R270}  Data_type: string, optional  "\fB-parallel_run_length <float>\fR" Specifies the parallel run length to enable space checking. When the parallel run length of macros is larger than the specified parallel run length value, macro-to-macro space checking will be enabled.  Note: When the -parallel_run_length parameter is specified along with the -horizontal_stacking or -vertical_stacking parameters, only the macros with parallel run length >= the specified value will be counted in the stacking length.   Minimum=0  Maximum=100000  Data_type: float, optional  "\fB-pg_resource_model {<M1 value1 M2 value2
...>}\fR" Specifies the pg resource model for concurrent macro placement. During the concurrent macro placement the power mesh does not exist.  This parameter allows you to mimic the number of routing tracks occupied by the real power mesh to make the congestion analysis more accurate during the concurrent macro placement.  Note: This setting is generated automatically by the create_pg_model_for_macro_placecommand. It is highly recommended to use this command to define the -pg_resource_model parameter.  Data_type: string, optional  "\fB-place_order {horizontal | vertical}\fR" Specifies the place order in row (horizontal) or column (vertical) first for macro array.  Default: horizontal  Data_type: enum, optional   "\fB-same_length_site <integer>\fR" Specifies the minimum number of sites between the vertical edge of two macros.  Minimum=0  Maximum=100000  Data_type: int, optional  "\fB-track_adjustment {{<layer1 density1>} {<layer2>
....}}...\fR" Specifies the layer density to add track adjustment on each macro. For each routing layer and each macro, if the PG density over a macro is lower than the standard cell area then it increases the track resource in macro area to mimic the lower PG density.  Note: This setting is generated automatically by the create_pg_model_for_macro_place command. It is highly recommended to use this command to define the -cell_obs parameter.  Data_type: string, optional  "\fB-valid_group_orients {R0 MX MY}  \fR" Specifies the valid orientations for the whole group.  Data_type: enum, optional   "\fB-vertical_stacking {<max_macro_stack_length min_space_between_macro_stack max_space_between_macros>}\fR" Specifies the maximum vertical stack depth and the minimum vertical spacing.
.RS  "*" 2 max_macro_stack_length: Specifies that the macro stacking length should not be more than the specified value.  "*" 2 min_space_between_macro_stack: Specifies the spacing between different macro stacks.  "*" 2 <max_space_between_macros>: Specifies the maximum space between macros. When the macro spacing is less than the specified value, the macros are counted in the stacking length. For example, if the max_space_between_macro value is 9 then the macros will be considered as packed if the space between the macros is between 0 and 9, however, if the real space is 10 then nothing will happened.
.RE   Data_type: string, optional 
.SH Example
.RS  "*" 2 The  following command creates a macro array, ram_array, and defines it constraints.  set_macro_place_constraint -array ram_array {{ip1/dma/r0_irx:R0 4.66 ip1/dma/r1_irx:MY 8.0 ip1/dma/r2_irx:MY} 2.33 {ip1/dma/r3_irx:R0 4.66 ip1/dma/r_irx:MY}} -valid_group_orients {R0 MY}
.RE
.P (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.SH Related Information
.RS  "*" 2 check_macro_place_constraint  "*" 2 create_pg_model_for_macro_place  "*" 2 get_macro_place_constraint  "*" 2 reset_macro_place_constraint  "*" 2 write_macro_place_constraint  "*" 2 refine_macro_place  "*" 2 Floorplanning the Design chapter in the Innovus User Guide  "*" 2 Using the Mixed Placer chapter in the Innovus User Guide 
.RE
.P
