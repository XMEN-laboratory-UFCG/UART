.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH setEditMode  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBsetEditMode\fR \-  Updates the Edit Route and Edit Via forms, the design display area, and vias that are subsequently created with the editAddVia command, with the information specified by the parameters
.SH Syntax \fBsetEditMode\fR  [-help]  [-align {true|false}]  [-allow_45_degree {true|false}]   [-arrow_increment <value>]  [-assign_multi_pattern_color {auto|mask1|mask2|mask3}]  [-auto_distribute_bus {true|false}   [-auto_split_bus {true|false}]  [-bus_honor_start_params {true|false}]  [-bus_honor_width_setting {true|false}]  [-bus_total_width_horizontal <value>]  [-bus_total_width_vertical <value>]  [-change_order_at_turn {Reverse Order | Keep Order}]  [-check_design_boundary {true|false}]  [-circle_NDR_vias_only {true|false}]  [-close_polygons {true|false}]   [-color_align_with_track {true|false}]  [-connect_pin {in|out|inout|nodir}]   [-connect_with_specified_layer {true|false}]  [-create_crossover_vias {true|false}]   [-create_is_edit_flag {true|false}]  [-create_via_on_pin {true|false}]   [-cut_class <class_name>]  [-cut_wire_overlap {regular|special}]  [-debug_file <output_file>]  [-delete_pin_with_wire {true|false}]  [-delete_tsv {true|false}]   [-delete_wire_via_deep_through {true|false}]  [-display_wire_length_with_cursor {true|false}]  [-draw_shield {true|false}]  [-draw_with_group_centerline {true|false}]  [-drawing_wire <value>]  [-drc_aware_cross_metal {true|false}]  [-drc_on {true|false}]   [-drc_use_non_default_spacing {true|false}]  [-extend_wires {start|end|start_cell_boundary|end_cell_boundary}]   [-final_check_with_verify {true|false}]   [-ignore_drc {conn_antenna|max_via_stack|min_cut|min_enclosed_area|min_step|protrusion}]  [-jog_connect_layer <value>]  [-keep_floating_via {true|false}]  [-keep_status {true|false}]  [-keep_via {true|false}]  [-lateral_movement_range <value>]  [-layer <name>]   [-layer_horizontal          <name>       ]   [-layer_maximum <layerName>]   [-layer_minimum <layerName>]  [-layer_vertical          <name>       ]   [-look_down_layers          <integer>]   [-look_up_layers          <integer>]  [-max_pointer_number <integer>]  [-mirror_bus_route {true|false}]  [-nets <nets>]  [-no_merge_special_wire {true|false}]  [-only_show_edit_layer {true|false}]  [-orthogonal_connection_only {true|false}]  [-outer_shield_spacing          <value>       ]  [-outer_shield_width          <value>       ]  [-override {true|false}]   [-partial_overlap_threshold <value>]   [-pull_back_distance <string>]   [-reset]  [-reshape {true|false}]   [-return_object_pointer {true|false}]  [-rule          <rule>       ]   [-shape          {RING|STRIPE|FOLLOWPIN|IOWIRE|COREWIRE|BLOCKWIRE|PADRING|BLOCKRING|FILLWIRE|FILLWIREOPC|DRCFILL|None}       ]   [-shield {high|low|adjacent}]   [-shield_look_down_layers <integer>        ]   [-shield_look_up_layers          <integer>       ]  [-shield_shape {RING|STRIPE|FOLLOWPIN|IOWIRE|COREWIRE|BLOCKWIRE      |PADRING|BLOCKRING|FILLWIRE|DRCFILL|None}]   [-shielding_nets <nets>]  [-show_drc_info_for_edit_shape {true|false}]  [-sibling_look_down_layers          <integer>       ]   [-sibling_look_up_layers          <integer>       ]  [-snap {true|false}]  [-snap_align_to {center|low|high|auto}]    [-snap_bus_to_pin  {true|false} ]   [-snap_end_to {track_regular|track_special|manufacturing_grid}]   [-snap_objects_to_track {special|regular|patch|pin}]  [-snap_to {special|pg|pin|row}]  [-snap_to_track_honor_color {true|false}]  [-snap_trim_metal_to_trim_grid {true|false}]   [-spacing <value>]  [-spacing_horizontal          <value>       ]  [-spacing_vertical          <value>       ]  [-status {cover|fixed|noshield|routed|shield|auto}]  [-stop_at_drc {true|false}]  [-stretch_end {high | low}]  [-stretch_with_intersect {true|false}]  [-subclass {<subclass>}]   [-turn_at {center_line|wire_edge}]  [-type {regular|special|patch}]  [-unrestricted_regular_wire_width {true|false}]  [-update_shield_net {true|false}]  [-use_fixVia {true|false}]  [-use_interleaving_wire_group {true|false}]  [-use_wire_group {true|false}]  [-use_wire_group_bits          <number_of_bits>       ]   [-use_wire_group_reinforcement {true|false}]    [-use_wire_group_reinforcement_group_via {true|false}]   [-use_wire_group_reinforcement_spacing          <spacing>]   [-use_wire_group_reinforcement_width          <width>]  [-verbose {true|false}]  [-via_allow_geom_drc {true|false}]  [-via_auto_replace {true|false}]  [-via_auto_snap {true|false}]  [-via_cell_name <cellname>]   [-via_columns <value>]  [-via_create_by {viacell|parameters}]  [-via_cut_layer <cut_layer>]  [-via_exclude_spec <value>]  [-via_override_spec <value>]  [-via_rows <value>]  [-via_scale_height <value>]  [-via_scale_width <value>]  [-via_snap_honor_color {true|false}]  [-via_snap_to_intersection {true|false}]   [-via_type {auto|regular|special}]  [-width <value>]   [-width_horizontal <value>]   [-width_vertical <value>]  [-wire_override_spec <specification>] 
.P Updates the Edit Route and Edit Via forms, the design display area, and vias that are subsequently created with the editAddVia command, with the information specified by the parameters. Use the getEditMode command to check the current value of a specific setEditMode parameter.
.P Note: Before running any Wire Editor command, all objects and pre-routed wires/vias must be colorized already. 
.P 
.SH Parameters   "\fB-help\fR" Prints a brief description that includes type and default information for each setEditMode parameter.  For a detailed description of the command and all of its parameters, use the man command:  man setEditMode  "\fB-align {true|false}\fR" Specifies whether or not to support alignment of objects during interactive edits using the GUI.  Default: true  "\fB-allow_45_degree {true|false}\fR" Allows creation of a 45 degree wire.  Default: false  "\fB-arrow_increment <value>\fR" Specifies the step increments in microns to move wires with the arrow keys.  Default: 1.0.  "\fB-assign_multi_pattern_color {auto|mask1|mask2|mask3}\fR" Specifies how to assign mask color on the double patterning technology (DPT) layer of the wire segment to be created. Select one of the following:
.RS  "*" 2 auto: Mask color is assigned automatically.  "*" 2 mask1: Assigns mask1 color to the added wire segment.  "*" 2 mask2: Assigns mask2 color to the added wire segment.  "*" 2 mask3: Assigns mask3 color to the added wire segment.
.RE   Default: auto  "\fB-auto_distribute_bus {true|false}\fR" Auto-distributes a group of wires, and sets the same spacing based on option -bus_total_width_vertical or -bus_total_width_horizontal.  If -auto_distribute_bus is set to true, the tool ignores the -spacing_horizontal and -spacing_vertical settings.  While drawing a bus, the tool auto-sets spacing as:  wire spacing = (<total bus width> - <total wire width>)/ (<wire number> - 1)  If the spacing is less than the minimum spacing, the tool auto-sets it to min spacing.   Default: false  "\fB-auto_split_bus {true|false}\fR" Specifies whether or not Wire Editor should split buses automatically around power structures to avoid DRC violations.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   By default, there is no detour around via array and anchor wires of the bus being drawn always snap to the routing tracks.  The -auto_split_bus parameter also supports busses of special wires with different widths.   Default: false  "\fB-bus_honor_start_params {true|false}             \fR" Specifies that the wire width and spacing of the start points (pins) should be honored when drawing routes for a bus. The following diagram depicts how the width and spacing of the bus is maintained through turns for the the 2nd to N-1 wire segment, if you set -bus_honor_start_params to true:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false   "\fB-bus_honor_width_setting {true|false} \fR" Specifies whether or not the tool should adjust the wire width when snapping bus wires to pin. By default, if -snap_bus_to_pin is specified, the tool adjusts the wire width to be the same as the macro or IO pin width. If you do not want the wire width to be adjusted to match the pin width, set the -bus_honor_width_setting parameter to true. In this case, the tool uses the width value defined by setEditMode -width_horizontal or -width_vertical when snapping the bus to pin.  Default: false (Pin width is used with -snap_bus_to_pin)  "\fB-bus_total_width_horizontal <value>\fR" Specifies the total width of a horizontal bus.   While drawing a bus, the tool auto-sets spacing as:  wire spacing = (<total bus width> - <total wire width>)/ (<wire number> - 1)  Default: 0  "\fB-bus_total_width_vertical <value>\fR" Specifies the total width of a vertical bus.   While drawing a bus, the tool auto-sets spacing as:  wire spacing = (<total bus width> - <total wire width>)/ (<wire number> - 1)  Default: 0  "\fB-change_order_at_turn {Reverse Order | Keep Order}\fR" Specifies whether the order of the wires changes or stays the same when the wire makes a 90-degree turn.  Default: Keep Order  "\fB-check_design_boundary {true|false}\fR" Specifies that wires and vias are to be made inside the design boundary. If -check_design_boundary is set to true, you cannot manually stretch a wire into the area defined by the -pull_back_distance parameter.  Note: 45-degree wires do not follow this rule.  Default: false  "\fB-circle_NDR_vias_only {true|false}\fR" Specifies that when the Shift + N bindkey is used, the Wire Editor should circle through NDR vias only.  Default:  false  "\fB-close_polygons {true|false}\fR" Specifies whether to close a special route structure toward itself, using the Escape key. For the closing to complete, the ending wire segments must be drawn towards the start wire segments, but do not have to touch them. If you specify this parameter, the software ignores the -extend_wires start and the -extend_wires end settings.  Default: false  "\fB-color_align_with_track {true|false}\fR" Specifies whether the wire color is to be changed to match the track color during a move or copy operation. If you set the -color_align_with_track parameter to true and move or copy a wire to snap it to a track, the track color is automatically assigned to the wire. Note that if the wire does not snap to a track or if the wire covers more than one track, this parameter will not have any effect.  This parameter is turned off by default. This means when you move or copy a wire, the wire color is retained by default.  Default: false  "\fB-connect_pin {in|out|inout|nodir}\fR" Specifies the type of pin on which a via should be generated. You can specify the following pin types with this parameter:
.RS  "*" 2 in - Generates a via on an input pin.  "*" 2 out - Generates a via on an output pin.  "*" 2 inout - Generates a via on an inout pin.  "*" 2 nodir - Generates a via on a pin for which no direction is specified.
.RE   Default: in out inout nodir  "\fB-connect_with_specified_layer {true|false}\fR" Specifies whether or not the layer of connecting wires should be changed as per the -layer_horizontal or -layer_vertical setting when moving wires with the editMove command. If you set this parameter to true, editMove honors the setEditMode -layer_horizontal and -layer_vertical settings while jogging metal layers. For instance, suppose you cut a vertical wire on M4 by using editCutWire such that the wire is divided into three wire segments. Now, if you select the wire segment in the middle and move it in the horizontal direction, the tool automatically creates new connecting wires on the layer defined by setEditMode -layer_horizontal and drops vias correctly. This feature is applicable for both regular and special wires.   Default: false  "\fB-create_crossover_vias {true|false}\fR" Specifies whether the software creates a via when you draw a wire that crosses a wire or pin of the same net that is on a different layer. Does not create vias if minimum or maximum layer constraints prevent the creation of vias. If you draw a wire between two pins, the software creates vias on the pins as needed, regardless of whether this option is selected or deselected.  If you specify false for this parameter, the software does not create vias at crossovers.  Default: true  "\fB-create_is_edit_flag {true|false}\fR" Specifies whether to create the db property isEdit for wire edit. This property is used to flag nets with modified wires and vias. This is useful when evaluating how many objects need to be modified for fixing DRC violations and then deciding whether to fix the violations manually or through ECO routing. This property is written to the DEF file.  By default, this parameter is set to false. If you set the value of this parameter to true, the isEdit property is set to 1 for nets with modified wires or vias. The following type of modifications can cause isEdit to be set to 1:
.RS  "*" 2 Drawing a new wire through editAddRoute and editCommitRoute.  "*" 2 Moving a wire with/via editMove.  "*" 2 Stretching a wire/via with editResize.
.RE   dbGet can then be used to flag nets with modified wires/vias:  > dbGet $wire/via_pointer.net.isEdit  > 1  Value 1 means the wire/via on the net has been modified.  The isEdit property can be reset using the dbSet command as follows:  dbSet <<net>>.isEdit 0  Note:  The isEdit property is independent of setEditMode -keep_status true.  Default: false  "\fB-create_via_on_pin {true|false}\fR" Specifies whether the software creates vias at pins. Specify false to prevent the software from creating vias at pins. A value of false might be needed for bump pins that are not square-shaped.  Default: true  "\fB-cut_class <class_name>\fR" Specifies the cut class name of the vias.  Default: ""  "\fB-cut_wire_overlap {regular|special}\fR" Creates overlaps while cutting specified type of wires. The supported values are:
.RS  "*" 2 regular - Cuts regular wires with an overlap  "*" 2 special - Cuts special wires with an overlap
.RE   If this parameter is not specified, all wires are cut without overlap. This is equivalent to setting -cut_wire_overlap to "".  Default: regular, which means that regular wires are cut with an overlap while special wires are cut without an overlap  "\fB-debug_file <output_file>\fR" Specifies the file name for reporting untrimmed wires and vias if setEditMode -verbose is set to true. If you don't specify a name but setEditMode -verbose is set to true, the file is named editTrim_debug.rpt. If the tool finds the same file in the saved directory, the new file replaces the old one.  "\fB-delete_pin_with_wire {true|false}\fR" Deletes the pin with the wire.  Default: true  "\fB-delete_tsv {true|false}\fR" Specifies whether or not editDelete deletes the items on a Through-Silicon Via (TSV) layer. 
.RS  "*" 2 true - The tool deletes the items on TSV layers if editDelete is used without -layer or -selected.  "*" 2 false - The tool does not delete the items on TSV layers if editDelete is used without -layer or -selected.
.RE   Default: false  The editDelete command observes the layer range setting specified by setEditMode -layer_minimum <value> -layer_maximum <value>, where -layer_minimum and -layer_maximum specify the minimum and maximum routing layers, respectively. If -layer is specified with editDelete, the tool ignores the range setting from setEditMode and deletes items only from the specified layers. If -selected is specified with editDelete, the tool deletes only the selected wires and vias.  "\fB-delete_wire_via_deep_through {true|false}             \fR" Deletes wire via in the deep through mode when set to true.  For instance, assume you have two vertical wires M3 and M5 at the same location. The tool will not drop vias between these two wires when you draw M5 because both the wires have the same direction. However, when you draw the horizontal M6 wire, the tool will drop the vias from M3 to M6. All the three wires have the same net. Now, if you delete the M6 wire, the setting for -delete_wire_via_deep_through determines which vias are removed. If  -delete_wire_via_deep_through is set to true, the tool deletes the via from M3 to M6. However, if it is set to false, the tool only deletes the via from M5 to M6.  Default: false  "\fB-display_wire_length_with_cursor {true|false}\fR" Specifies whether or not to display the total and current wire length while editing wires by using the mouse. When this parameter is set to true, the tool displays the total and current wire length during the following wire edit operations:
.RS  "*" 2 Adding a new regular, special, or patch wire  "*" 2 Stretching the length of a regular or special wire  "*" 2 Resizing a patch wire
.RE   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: true  "\fB-draw_shield {true|false}\fR" Specifies whether the wire being created is a shield wire.  When -draw_shield is set to true, the wire editor creates a wire with the net name specified using the -shielding_nets option. The newly created wire/via has its status set to shield and its shield signal net set to the net name specified with the -nets option. Note that you can specify only one net with the -nets option when drawing a shield wire. The new shield wire/via also has its shape set to None. The shield wire defaults to the minimum width and spacing, unless explicitly set to other values. Note that NanoRoute supports only minimum width and minimum spacing.   When -draw_shield is set to false, the wire editor reverts to its original behavior and draws a wire/via with the net specified using the -nets option.  To learn how to use the -draw_shield parameter, see the Examples section.    Notes:
.RS  "*" 2 When -draw_shield is set to true, the following setEditMode settings are ignored:
.RS  "*" 2 -shield  "*" 2 -shield_shape
.RE 
.RE   Default: false  "\fB-draw_with_group_centerline {true|false}  \fR" Draws the bus along the center-line of whole wires when set to true.  Enable this option if you set -auto_distribute_bus to true.  If -draw_with_group_centerline is set to true, the tool ignores the -drawing_wire setting.  Default: false  "\fB-drawing_wire <value>\fR" Specifies which of the nets used with the -nets parameter corresponds to the mouse pointer location when adding an array of wires. For horizontal wires, a value of 1 indicates the bottom-most net. For vertical wires, a value of 1 indicates the left-most net. The <value> is an integer of the same or lower value as the number of nets. For example, if you specify 5 nets, you can specify 1, 2, 3, 4, or 5 as the value for this parameter.  This net is also used as the reference net when changing direction. All other nets around this net are lengthened or shortened accordingly.  Default: 1  "\fB-drc_aware_cross_metal {true|false}\fR" Specifies whether or not to stretch or move a wire back to the closest location available before a violation occurs with the crossing metal. This option works only if setEditMode -stop_at_drc is set to true:
.RS  "*" 2 If both -stop_at_drc and -drc_aware_cross_metal are set totrue, the tool stops moving or stretching the wire at the closest location available before a spacing violation occurs with the crossing metal.  "*" 2 If -stop_at_drc is set to true but -drc_aware_cross_metal is set to false, the tool moves or stretches the wire to the desired location across the crossing metal even if it results in a spacing DRC violation.
.RE   This parameter impacts the following type of modifications:
.RS  "*" 2 Drawing a new wire through editAddRoute and editCommitRoute  "*" 2 Moving a wire with/via editMove  "*" 2 Stretching a wire/via with editResize
.RE   Default: true  "\fB-drc_on {true|false}\fR" Specifies whether design rule checking (DRC) should be performed during wire and via editing.  While modifyig a via with editChangeVia, the -drc_on and -keep_via settings are used in combination to decide whether or not a via should be replaced if the new via cell results in DRC violations. For more details, see editChangeVia.  Default: true  "\fB-drc_use_non_default_spacing {true|false}\fR" Specifies whether non-default spacing defined in the non-default rule (NDR) of the editing net should be used for spacing check during wire editing.  Note
.RS  "*" 2 By default (false), the Wire Editor DRC check honors the default/minimum spacing.  "*" 2 If the net or via has an NDR with the HARDSPACING keyword, the Wire Editor DRC check honors the non-default spacing even if -drc_use_non_default_spacing is set to false.  "*" 2 After setEditMode -drc_use_non_default_spacing true  is set, all subsequent wire editing commands honor the non-default spacing during the geometry check on the net/via if the NDR is defined.
.RE   Default: false  "\fB-extend_wires {start|end|start_cell_boundary|end_cell_boundary}\fR" Specifies which boundary of the wire segment extends and connects to the first logical target, after completing a signal or power route. You can specify the following boundary options with this parameter:
.RS  "*" 2 start - Specifies that the startpoint of the route segment extends and connects to the first logical target, after completing a signal or power route. If there is no logical target, the startpoint is not changed.  "*" 2 end - Specifies that the endpoint of the route segment extends and connects to the first logical target, after completing a signal or power route. If there is no logical target, the endpoint is not changed.  "*" 2 start_cell_boundary - Specifies that the startpoint of the segment always extends to the cell boundary, after completing a special route. If the segment is extended to the boundary and crosses the wires on the same net, the tool makes a via connection to the wires. In addition, the tool creates pins at the boundary. This parameter can only be used in conjunction with -extend_wires start.  "*" 2 end_cell_boundary - Specifies that the endpoint of the segment always extends to the cell boundary, after completing a special route. If the segment is extended to the boundary and crosses wires on the same net, the tool makes a via connection to the wires. In addition, the tool creates pins at the boundary. This parameter can only be used in conjunction with -extend_wires end.
.RE  Note: If you do not want the wire segment to be extended, set -extend_wires to  "".Default:  ""  "\fB-final_check_with_verify {true|false}\fR" Specifies whether to do final checks with verify.  When -final_check_with_verify is set to true, Wire Editor calls the Full Geometry Checker (FGC) engine for the final DRC check on the bounding box of changed area after commits. This ensures that the final wire editing result is DRC clean as per FGC. Specify this parameter if you are using advanced rules, such as 20nm and 14nm.  Default: false  "\fB-ignore_drc {conn_antenna|max_via_stack|min_cut|min_enclosed_area|min_step|protrusion}\fR" Specifies which violation type should be ignored during wire editing. You can specify the following options:
.RS  "*" 2 conn_antenna - Does not check the connection antenna for DRC violations.  "*" 2 max_via_stack - Does not check maximum via stack DRC violations during wire editing.  "*" 2 min_cut - Does not check for minimum cut DRC during wire editing.  "*" 2 min_enclosed_area - Does not perform minimum enclosed area DRC during wire editing.  "*" 2 min_step - Does not perform minimum step DRC during wire editing.  "*" 2 protrusion - Does not perform protrusion DRC during wire editing.
.RE   Note: If you do not want any violation to be ignored, set -ignore_drc to "".  Default: ""  "\fB-jog_connect_layer <value>\fR" Specifies the number of layers by which the new jog wire segments created on moving a wire should be moved up or down. Note that the -jog_connect_layer parameter will have no impact if you have set the setEditMode -connect_with_specified_layer parameter to true.  To learn how to use the -jog_connect_layer parameter, see the Examples section.   Default: 0  "\fB-keep_floating_via {true|false}\fR" Controls whether or not floating vias are retained when wires are deleted. By default, floating vias are deleted when you delete a wire. Set the -keep_floating_via parameter to true if you want to retain floating vias when you delete wires.  Default: false  "\fB-keep_status {true|false}             \fR" Specifies whether or not object status should be changed during editing. This option is set to true by default, which means wire status is not changed after editing. If this option is set to false, the wire status is changed to FIXED automatically after editMove and editStretch.  Notes:  This option has impact on both regular and special wires and vias. The tool only changes the status of the wire segment that is modified.  Use the setEditMode -status fixed command to set the status of newly drawn wires to FIXED after editAddRoute.  Consider the wire segment shown in the figure below:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)
.RS  "*" 2 The following command specifies that the status of the modified wire segment should be retained after editMove and editStretch:  setEditMode -status FIXED -keep_status true  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 The following command specifies that the status of the modified wire segment should be changed to FIXED after editMove and editStretch:     setEditMode -status FIXED -keep_status false   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.RE   Default: true  "\fB-keep_via {true|false}\fR" Controls whether or not the original via is retained in a wire move or stretch. If this option is set to true, the tool keeps the via unchanged if there is no DRC violation as a result of the move or stretch. However, the tool can change the via if a DRC violation occurs. Set the -keep_via parameter to false if you do not want the original via to be retained when a wire is moved or stretched. This parameter is applicable for both regular and special vias.  While modifying a via with editChangeVia, the -keep_via and -drc_on settings are used in combination to decide whether or not a via should be replaced if the new via cell results in DRC violations. For more details, see editChangeVia.  Default: false  "\fB-lateral_movement_range <value>\fR" Specifies the maximum distance to which the wire you are adding or stretching can be moved laterally to avoid potential DRC violations with existing wires, nets, or blockages. The preferred lateral movement direction is up for horizontal wires and left for vertical wires, provided this movement does not result in a new violation.  If a violation cannot be avoided even by moving the new wire within the specified lateral movement range, the tool obeys other specified wire edit settings. For example, if the -stop_at_drc 1 setting is specified, the tool moves or stretches the new wire up till the closest location available before the DRC violation occurs.  Notes:
.RS  "*" 2 The -lateral_movement_range parameter works only if setEditMode -drc_on is set to 1. If -drc_on is set to 0, the tool ignores the -lateral_movement_range setting.   "*" 2 The -lateral_movement_range parameter can support multiple nets.  "*" 2 The -lateral_movement_range parameter is relevant only for avoiding violations with wires and vias. If the wire being added crosses a routing blockage or cell OBS, the -lateral_movement_range setting is ignored. 
.RE   See the Examples section below to understand how the -lateral_movement_range parameter works.  Default: 0.0  "\fB-layer <name>\fR" Specifies the layer for patch or polygon wires.  Default: M1 (the first routing layer)  "\fB-layer_horizontal <name>  \fR" Specifies the layer for horizontal wires. This option supports backside layers as well.  Default: M1 (the first routing layer)  "\fB-layer_maximum <layerName>\fR" Specifies the maximum layer for routing. The tool does not create wires above the specified layer. This option supports backside layers as well.  Default: UNINITIALIZED  "\fB-layer_minimum <layerName>\fR" Specifies the minimum layer for routing. The tool does not create wires below the specified layer. This option supports backside layers as well.  Default: UNINITIALIZED  "\fB-layer_vertical <name>\fR" Specifies the layer for vertical wires. This option supports backside layers as well.  Default:  M2 (the second routing layer)  "\fB-look_down_layers <integer>\fR" Specifies the number of layers below the current layer that added wires will connect to with a via.  Default: 100 (all layers)  "\fB-look_up_layers <integer>\fR" Specifies the number of layers above the current layer that added wires will connect to with a via.  Default: 100 (all layers)  "\fB-max_pointer_number <integer>\fR" Specifies the maximum number of pointers to be returned by wire edit commands. Use this parameter along with -return_object_pointer to control object pointers returned by wire edit commands. The returned pointers make it possible for you to select and further edit the newly created or modified wire or via.  Default: 100  "\fB-mirror_bus_route {true|false}\fR" Specifies whether or not to reverse the net order for the bus route. When this option is specified, the definition of the wire override spec is reversed. For example, suppose you have drawn a bus route with the following setting:  setEditMode -nets {a1 a2 a3} -override -wire_override_spec {{1 3 2.8} {2 3 3.8} {3 3 4.8}}  The bus is drawn as follows, with nets counted from left to right:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Now, by setting -mirror_bus_route to true, you can draw a mirror bus route with nets counted from right to left:  setEditMode -nets {b1 b2 b3} -override -wire_override_spec {{1 3 2.8} {2 3 3.8} {3 3 4.8}} -mirror_bus_route true  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-nets <nets>\fR" Specifies one or more nets for editing. If you specify multiple nets, separate each net name with a space and enclose the names in curly braces.  You can use the following format to specify a bus:  <netName>[<x>:<y>]  For example, to draw eight wires for a bus, type the following:  -nets <netName>[7:0]  This is equivalent to specifying <netName>[7],  <netName>[6],
...  <netName>[0].  Specifying -nets <netName>[0:7] reverses the order.  The order in which you specify the nets determines the drawing arrangement of the wires.
.RS  "*" 2 For horizontally drawn wires, the first net specified is drawn as the bottom-most wire, followed by the next net on its top side, and so on. The last net specified is drawn as the top-most wire.  "*" 2 For vertically drawn wires, the first net specified is drawn as the left-most wire, followed by the next net, and so on. The last net specified is drawn as the right-most wire.
.RE   Default: ""  "\fB-no_merge_special_wire {true|false}\fR" Specifies whether or not a wire being added should be merged automatically with any existing wire at that point. Set this parameter to true, if you want to disable the auto merge feature.  Default: false  "\fB-only_show_edit_layer {true|false}\fR" Specifies that only the layer with the objects being edited should be shown and other layers and objects should be dimmed out during the following wire/via edit operations:
.RS  "*" 2 Add  "*" 2 Resize  "*" 2 Copy/Move 
.RE   Default: true  "\fB-orthogonal_connection_only {true|false}\fR" Specifies whether to consider wires and pins that are in the same direction as a target for connection. For example, if you extend a wire to the left, any horizontal wire it meets is not considered for a target if the value of this parameter is set to true. However, a vertical wire is considered a target.  Default: true  "\fB-outer_shield_spacing <value>\fR" Specifies a spacing value in microns to be used by the -shield low and -shield high parameter settings.  Default: 0 (minimum spacing on the layer)  "\fB-outer_shield_width <value>\fR" Specifies a width value in microns to be used for outer shield(s) depending on the values of -shield low or -shield high parameter settings.  Default: 0 (minimum wire width on the layer)  Note: You must define the outer shield first. The outer shield is the shielding wire beyond the first or the last wire being created manually.  "\fB-override {true|false}\fR" Specifies whether to use the override specification.  Default: false  "\fB-partial_overlap_threshold <value>\fR" Specifies the ratio threshold for special via creation on partially overlapping wires. The threshold value may range from 0 to 100, with a value of 100 specifying that no via is dropped on a partial overlap intersection. The tool drops a via only when the overlap_width to wire_width ratio percentage is greater than or equal to the specified threshold value.  For example, suppose the threshold value is set to 100. Now consider the following cases in which the pink wire is being drawn over the existing blue wire:  Case 1 - Overlap width less than wire width  In each of the cases depicted below, the overlap_width is less than the corresponding wire_width. As the overlap_width to wire_width ratio percentage is less than 100, which is the specified threshold value, the tool does not drop a via on the partial overlap area:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Case 2 - Overlap width equal to wire width  In the following case, the overlap_width is equal to the corresponding wire_width. As the overlap_width to wire_width ratio percentage is equal to 100, which is the specified threshold value, the tool drops a via on the overlap area.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Notes: 
.RS  "*" 2 The -partial_overlap_threshold parameter is applicable only if the new wire is crossing an existing wire in a different direction. If the new wire being drawn is overlapping an existing wire in the same direction, the tool does not create a via:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "*" 2 If the -create_crossover_vias parameter is set to false, the tool ignores the setting of the -partial_overlap_threshold parameter and does not create any via on the overlap area.
.RE   Default: 0  "\fB-pull_back_distance <string>\fR" Specifies the value for forbidden distance. If the setEditMode -check_design_boundary parameter is set to 1, the tool takes into account the settings of the -pull_back_distance parameter during wire edit operations.  If the pull_back_distance value is positive, the tool marks the corresponding area inside the boundary as an extra keep-out area. For example, if you specify the following command, the tool marks 0.5 distance inside the die boundary on all edges as an extra keep-out area and does not allow you to stretch a wire into this area. You are allowed to stretch the wire only up till the forbidden line.  setEditMode -check_design_boundary true -pull_back_distance 0.5  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   If the pull_back_distance value is 0, the tool does not allow you to manually stretch a wire beyond the die boundary. If you try to stretch the wire edge beyond the boundary, the tool stops the wire edge at the boundary and prints a warning.  setEditMode -check_design_boundary true -pull_back_distance 0  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   If the edge of a wire is already beyond the boundary (with setEditMode -check_design_boundary true -pull_back_distance 0) and you attempt to stretch it further, the wire remains in the current location and the tool does not allow further stretching.  If you stretch multiple wires with -pull_back_distance set to Auto, the tool uses the largest spacing value of each layer as the pull back distance for related wire. For example, the diagram below illustrates pull back distances if the spacing for different layers is set as follows:   M1: 0.2      M2: 0.4      M3: 0.6  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   If you do not need the -pull_back_distance constraint, set -check_design_boundary to false.  Note: 45-degree wires do not follow this rule  Default: auto, which means the tool uses the largest min spacing of the layer as the forbidden distance.  "\fB-reset\fR" Resets the settings.  "\fB-reshape {true|false}\fR" Specifies that when you add new wires, existing redundant wires within the route are automatically removed.  Default: false  "\fB-return_object_pointer {true|false}\fR" Specifies whether or not pointers are returned after wire edit operations. This parameter is set to false by default. When set to true, the following wire edit commands return pointers for new or modified wires and vias:
.RS  "*" 2  editAddVia  "*" 2  editChangeLayer  "*" 2  editChangeVia  "*" 2  editCommitRoute  "*" 2  editCopy  "*" 2  editCutWire  "*" 2  editDuplicate  "*" 2  editMerge  "*" 2  editMove  "*" 2  editResize  "*" 2  editRotate  "*" 2  editSplit  "*" 2 editTrim
.RE   The returned pointers make it possible for you to select and further edit the newly created or modified wire or via. The diagrams below illustrate the pointers that are returned after some common wire edit operations:
.P (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)
.P (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)
.P (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-rule <rule>\fR" Uses the specified LEF rule for regular wires.  Default: default  "\fB-shape {RING|STRIPE|FOLLOWPIN|IOWIRE|COREWIRE|BLOCKWIRE|PADRING|BLOCKRING|FILLWIRE|FILLWIREOPC|DRCFILL|None}\fR" Specifies the shape associated with the wire you draw. Use all upper-case letters for the shape.  Default: STRIPE  "\fB-shield {high|low|adjacent}\fR" Specifies the side to which a minimum width shield wire should be added. Use the following options to specify the side:
.RS  "*" 2 adjacent - Specifies that a minimum width shield wire(s) should be added centered between two adjacent wires.  "*" 2 high - Specifies that minimum width shield wires should be added at the top (High) side of horizontal routes or at the right side of vertical routes. The spacing of the added shield wire is determined by the value of the -outer_shield_spacing parameter. If this value is 0, the spacing is determined by the minimum spacing rule in the technology file.  "*" 2 low - Specifies that minimum width shield wires should be added at the bottom (Low) side of horizontal routes or at the left side of vertical routes. The spacing of the added shield wire is determined by the value of the -outer_shield_spacing parameter. If this value is 0, the spacing is determined by the minimum spacing rule in the technology file.
.RE   Note: If you do not want to specify the side to which the minimum width shield wire should be added, set -shield to "".  Default: ""  "\fB-shield_look_down_layers <integer>\fR" Specifies the number of layers below the current layer that an added shield wire can connect using a via.  Default: 100  "\fB-shield_look_up_layers <integer>\fR" Specifies the number of layers above the current layer that an added shield wire can connect using a via.  Default: 100  "\fB-shield_shape {RING|STRIPE|FOLLOWPIN|IOWIRE|COREWIRE|BLOCKWIRE|PADRING|BLOCKRING|FILLWIRE|DRCFILL|None}\fR" Specifies the shape associated with the shield wire you draw. Use all upper-case letters for the shape.  Default: None  "\fB-shielding_nets <nets>\fR" Specifies net names for shield wires, usually power or ground names.  "\fB-show_drc_info_for_edit_shape {true|false}\fR" Specifies that the tool should display the detailed DRC information in a violation marker nearby if a violation is generated during the following wire/via edit operations:
.RS  "*" 2 Add  "*" 2 Resize  "*" 2 Move
.RE   In the example below, the wire being added will cause a Metal Short violation as mentioned in the DRC information displayed near the violation marker:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   You can address the DRC issues displayed by either:
.RS  "*" 2 Cancelling the edit operation causing the DRC violation.  "*" 2 Adjusting the edit operation to meet the DRC requirement. For instance, in the example shown below, the wire being added is causing a Parallel Run Length spacing violation:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  In this case, you can move the right edge to save spacing. The DRC violation and related information will disappear:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.RE   Note: If there are any existing violation markers, they are dimmed out so that the latest marker is more clearly visible.  Default: true  "\fB-sibling_look_down_layers <integer>\fR" Specifies the number of layers below the sibling layers that an added shield wire can connect using a via.  Default: 1   "\fB-sibling_look_up_layers <integer>\fR" Specifies the number of layers above the sibling layers that an added shield wire can connect using a via.  Default: 1   "\fB-snap {true|false}\fR" Specifies whether or not to enable wire and via snap.  Default: true  "\fB-snap_align_to {center|low|high|auto}\fR" Specifies how to align with a pin when ending a route. Select one of the following:
.RS  "*" 2 center: Snaps wires to the center of the pin.  "*" 2 low: Snaps wires to the bottom of vertical pins or to the left side of horizontal pins.  "*" 2 high: Snaps wires to the top of vertical pins or to the right side of horizontal pins.  "*" 2 auto: The software determines alignment automatically.
.RE   Note: To ensure the proper alignment, do not specify -snap_objects_to_track with this parameter.  Default: auto  "\fB-snap_bus_to_pin {true|false}\fR" Specifies whether or not to change wire width, spacing, and order according to the connected pin. The -snap_bus_to_pin parameter supports macro to IO pin snapping as well as IO pin to IO pin snapping.  When you set the -snap_bus_to_pin option to true:
.RS  "*" 2 You do not have to align the pins at the start/end macro. Just start drawing the bus from the start macro and draw the subsequent wire segments until you arrive at the end macro. When you double-click to end the bus, all the start and end segments of the bus snap to their respective pins automatically.  "*" 2 The tool gets the pin width and spacing information, and changes the wire width, spacing, and order according to the connected pins for the start and end segments of the bus.   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 If the bus has multiple corners, the tool uses the width and spacing value defined by the wire edit options for the middle segments of the bus.   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 The tool also changes the wire segment layer according to the pin layer when accessing the pins. If the connecting pin is on a single layer, such as M4, the tool changes the wire segment layer to M4 when accessing pins. If the connecting pin is on multiple layers, the tool changes layers as follows:
.RS  "*" 2  If the pin is on M2, M3, and M4, but you have defined M5 and M6 for wire edit, the tool uses M4 for the first wire segment. In that way, wire edit has minimum via when connecting the first and second wire segment.  "*" 2  If the pin is on M2, M3, and M4, but you have defined M2 and M3 for wire edit, tool uses M3 for the first wire segment when connecting to the pin in the vertical direction (Wire edit sets M2 as the horizontal layer and M3 as the vertical layer).
.RE  For middle segments of the bus, the tool still uses the wire edit layer setting.  "*" 2 snap_bus_to_pin supports snapping from one to multiple (1->N) macros for bus. When drawing the bus, the end points could be the pins on different macros. As long as the end point is inside a macro, the tool is able to auto snap to these IO cell pins. The following diagram depicts how -snap_bus_to_pin, when enabled, supports 1->N macros.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 When you click outside the design core area after drawing a bus, the wires of the bus are snapped to the IO pin. 
.RE   When using the -snap_bus_to_pin option, keep the following limitations in mind:
.RS  "*" 2 The bus routing pattern must have at least one corner. Otherwise, the tool cannot snap the bus to both the start and end target pins.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.RE
.RS  "*" 2 You must click at the macros with target pins for the start and end points of the bus. The tool searches only the specified macros for the connected pins.  "*" 2 For a regular wire, the tool creates an NDR for each pin width automatically (the width is not defined in tech LEF), but you cannot delete the NDR from the database.
.RE   Both regular and special wires support this feature.  By default, the -snap_bus_to_pin option is set to false, which means the tool does not snap each wire of the bus to the macro pin automatically.  Note: The -snap_bus_to_pin option is exclusive to the setEditMode -snap_to pin option. When setEditMode -snap_to pin is set, the tool uses the original snapping behavior in which only the first drawing wire is snapped to the pin without any wire width and spacing change.  Default: false, which means the tool does not snap each wire of the bus to the macro pin automatically.  "\fB-snap_end_to {track_regular|track_special|manufacturing_grid}\fR" Snaps the end of the wire being drawn to the specified object. You can specify the following options:
.RS  "*" 2 manufacturing_grid - Specifies that the end of an off-grid wire should be snapped to the manufacturing grid.  "*" 2 track_regular - Snaps the end of regular wires to track. For a long multi-pin net, you might want to draw the trunk wire first and then draw the branch wires along the trunk wire. The start/end points of the trunk wire are usually not on pins. So if the trunk wire start/end points do not snap to the track, it will leave an off-grid wire segment. To prevent this, snap the end of regular wires to track by setting setEditMode -snap_end_to track_regular. The start/end points of the regular wire will snap to the closest orthogonal layer preferred track.  "*" 2 track_special - Snaps the end of special routes to track. For a long multi-pin net, you might want to draw the trunk wire first and then draw the branch wires along the trunk wire. The start/end points of the trunk wire are usually not on pins. So if the trunk wire start/end points do not snap to the track, it will leave an off-grid wire segment. To prevent this, snap the end of special routes to track by setting setEditMode -snap_end_to track_special. The start/end points of the special route will snap to the closest orthogonal layer preferred track.
.RE   Note: If you do not want to snap the end of the wire to any object, use setEditMode -snap_end_to "".   Default: ""  "\fB-snap_objects_to_track {special|regular|patch|pin}\fR" Snaps the center line of wires being added or moved to the closest routing track in the preferred direction for the layer automatically. You can specify the following options:
.RS  "*" 2 special - Snaps added or moved special wires to the closest routing track in the preferred direction for the layer automatically. This parameter also controls whether to cut special wires on the routing track.   Note: See -snap_to pin for a description of the software's behavior when both -snap_objects_to_track special and -snap_to pin are specified.  "*" 2 regular - Snaps added or moved signal wires to the closest routing track in the preferred direction for the layer automatically. This parameter also controls whether to cut signal wires on the routing track.  Note: See -snap_to pin for a description of the software's behavior when both -snap_objects_to_track regular and -snap_to pin are specified.  "*" 2 patch - Snaps patch wires automatically to the closest routing track for the layer as the wires are drawn, copied, or moved.  "*" 2 pin - Snaps a moved physical pin to the closest routing track in the preferred direction for the layer automatically.
.RE   Note: If you do not want to snap any object to track, use setEditMode -snap_objects_to_track "" to disable all track snap.  Default: regular patch  "\fB-snap_to {special|pg|pin|row}\fR" Snaps the end of the wires being added or moved to the specified object. You can specify the following objects:
.RS  "*" 2 special -  Automatically extends a special wire for maximum via coverage when crossing over a same-net wire on an adjacent layer.   "*" 2 pg - Snaps new wires whose start point is within a "snap region" to the closest end of a power or ground wire on the same net. The snap region is one-half the width of the target wire.
.RS  "*" 2 The snap region for orthogonal wires forms a square with the width of the power or ground wire.  "*" 2 The snap region for wires at 45-degree angles to the power or ground wire forms a square from the point where the wire will connect. Each side of the square is the width of the power or ground wire.  "*" 2 The snap region for wires that are parallel to power or ground wires is the full power or ground wire.
.RE  "*" 2 pin - Snaps added or moved wires to a pin automatically. If you double-click at a pin, it snaps the wire to the pin. To ensure the wire is snapped to the center of the pin, specify -snap_objects_to_track special (or -snap_objects_to_track regular) and specify a value for -snap_align_to.  When you specify both -snap_objects_to_track special (or -snap_objects_to_track regular) and -snap_to pin, the software has the following behavior:
.RS  "*" 2 If the wire will fall partially outside the pin when snapped to a track, it snaps to the pin.  "*" 2 If the wire will fall inside the pin when snapped to a track, it snaps to both the pin and a track.  "*" 2 If there is no track on the pin, the wire snaps to the pin.
.RE  "*" 2 row - Snaps added or moved wires to the nearest standard cell row. Use this parameter to create followpins. This parameter supports both horizontal and vertical rows.
.RE   For example, if you want to snap a wire to a pin automatically, specify setEditMode -snap_to pin.  Note: If you do not want to snap wires to any object, use setEditMode -snap_to "" to disable all object snap.   Default: special pg pin  "\fB-snap_to_track_honor_color  {true|false}             \fR" Specifies whether to snap wires to a track with the same color automatically. This option is on by default. If you need to move a wire to a track with a different color, set this option to false.  Notes:   This is a global setting and can be used to control all the snapping behavior in wire edit commands.  This command has no impact on editAddRoute. When drawing wires, the tool honors the color setting specified by setEditMode -assign_multi_pattern_color.  Default: true  "\fB-snap_trim_metal_to_trim_grid {true|false}\fR" Specifies whether or not the trim metal should snap to the closest trim grid during trim-metal editing. If you set this parameter to false, the trim metal is drawn centered on the location specified by editAddTrimMetal -location.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Note: editMove does not follow the setting specified by the setEditMode -snap_trim_metal_to_trim_grid parameter.  Default: true  "\fB-spacing <value>\fR" Specifies the distance between wires.  Default: ""  "\fB-spacing_horizontal <value>\fR" Specifies the distance between horizontal wires.  Default: ""  "\fB-spacing_vertical <value>  \fR" Specifies the distance between vertical wires.  Default: ""  "\fB-status {cover|fixed|noshield|routed|shield|auto}\fR" Specifies the status associated with the wire you draw.  By default, when you add special wires manually using the GUI, the tool creates crossover vias with fixed status. Use the -status parameter of setEditMode to draw wires and vias with the specified status.  If the value is specified as auto, the tool sets the status of wires drawn on signal and power nets to routed and that for wires drawn on clock nets to fixed.    Note:
.RS  "*" 2 For a special wire, noshield is not supported. If you specify this value for a special wire, the tool gives a warning message and keeps the status as fixed.   "*" 2 For a regular wire, shield is not supported. If you specify this value for a regular wire, the tool gives a warning message and keeps the status as fixed.
.RE   Default: fixed  "\fB-stop_at_drc {true|false}\fR" Checks DRC rules and stops moving or stretching wires before causing a violation. 
.RS  "*" 2 Specify true to stop moving or stretching the wire at the closest location available before a violation occurs. In this case, you cannot move a wire to the desired destination if that wire passes through a location where a DRC violation occurs.   "*" 2 Specify false to ignore DRC rules when moving or stretching wires. The software moves or stretches a wire to the desired location even if it results in a DRC violation.
.RE   Default: true  "\fB-stretch_end {high | low}\fR" Specifies the direction in which to stretch or reduce wires.
.RS  "*" 2 high - Stretches or reduces wires from the top for vertical wires or from the right for horizontal wires.  "*" 2 low -Stretches or reduces wires from the bottom for vertical wires or from the left for horizontal wires.
.RE   Default: high  "\fB-stretch_with_intersect {true|false}\fR" Enables wires with intersects to be stretched easily. If this option is set to true, you can select the via and the edge of metals and then stretch the wires and via together in a single step.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-subclass {<subclass>}\fR" Specifies the subclass name.  Default: ""  "\fB-turn_at {center_line|wire_edge}\fR" Specifies the start location of the new wire segment when a wire is turned. This parameter can be used for both regular and special wires. You can specify one of the following values for-turn_at:
.RS  "*" 2 center_line - When you turn a wire, the center line of the new wire segment aligns to the end of the old wire segment.  "*" 2 wire_edge - When you turn a wire, the long edge of the new wire segment aligns to the end of the old wire segment.
.RE   The diagram below depicts the tool behavior for both options:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Use the wire_edge option when turning a wire at the Safe Line for an adjacent wire. With this option, the tool turns the wire without extending it beyond the Safe Line to avoid a minumum spacing rule violation with the adjacent wire:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   You can use the default -turn_at center_line option if there is no adjacent wire.  Default: center_line  "\fB-type {regular|special|patch}\fR" Specifies the type of the wire being created. You can specify one of the following options:
.RS  "*" 2 regular - Creates regular wires and vias.  "*" 2 special - Creates special wires and vias.  "*" 2 patch - Creates patch wires.
.RE   Default: ""  "\fB-unrestricted_regular_wire_width {true|false}\fR" Specifies whether the widening of a regular wire is unrestricted. By default, when you are changing the width of a wire, it snaps to the closest non-default route (NDR) available. If you set the -unrestricted_regular_wire_width parameter to true, a wire can be stretched to any width without any restrictions.  Default: false  "\fB-update_shield_net {true|false}\fR" Specifies whether the shield net attribute on a signal net should be automatically updated. Use this parameter if you want Nanoroute to recognize the net as a shield net and not remove it during routing.  If you set the setEditMode -update_shield_net parameter to true before drawing a signal net, for example net11, the shield net attribute is automatically set on that signal net. You can verify this by using the getAttributecommand as follows:  > getAttribute -net net11  The result is:  #NET net11 attributes:   # weight = 2 (default)   # non_default_rule = default (default)   # non_default_rule_effort = auto (default)   # shield_net = VDD  If you now run routeDesign, NanoRoute recognizes the net as a shield net and does not remove it.   Default: false  "\fB-use_fixVia {true|false} \fR" Specifies whether to use fixVia for special via with minStep DRC violation.  Note: If a design is under 20nm, the tool turns on fixVia integration by default:  setEditMode -use_fixVia true   To turn off the setting, use setEditMode -use_fixVia false.  Default: false  "\fB-use_interleaving_wire_group {true|false}\fR" Alternates the specified wires in the wire group. For example, if you specify -nets VDD VSS -use_interleaving_wire_groups true, the software alternates the power and ground wires in the wire group.  When -use_interleaving_wire_groups is set to true,the software draws a wire group like the following:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-use_wire_group {true|false}\fR" Groups multiple wires from the same net. Specify this parameter to decrease resistance and provide stronger connections.  The following figure shows power and ground wires that form a wire group.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false (The wire editor does not use wire groups.)  "\fB-use_wire_group_bits <number_of_bits>\fR" Specifies the number of times to replicate a wire in the wire group. For example, if you specify VSS and VDD nets, and specify 2 for this parameter, the software creates a wire group with two power wires and two ground wires.   Note: The value of this parameter must be greater than 1 to enable wire groups.   When -use_wire_group_bits 2 is specified, the Innovus software draws a wire group like the following:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: 0 (disabled)  "\fB-use_wire_group_reinforcement {true|false}\fR" Creates slots in the wire group by creating wires that connect the wires in the wire group, but are orthogonal to them. Slots help to reduce resistance in power networks. Specifying both this parameter and -use_interleaving_wire_group creates shorts in the wire group.  When -use_wire_group_reinforcement true is specified, the Innovus software draws a wire group like the following:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-use_wire_group_reinforcement_group_via {true|false}\fR" Specifies that the wire group uses group vias. Group vias are connected vias in a wire group. Using group vias ensures that the contact is maintained if one of the vias in the wire group produces a void.  In the following figure, the wire group has group vias:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-use_wire_group_reinforcement_spacing <spacing>\fR" Specifies the spacing for the orthogonal wires in the wire groups.  Default: 0  "\fB-use_wire_group_reinforcement_width <width>\fR" Specifies the width of the orthogonal wires in the wire groups.  Default: 0  "\fB-verbose {true|false}\fR" Reports untrimmed wires/vias that cannot be trimmed because either they are connected to a patch wire or their status is cover. Set this parameter to true before running editTrim if you want untrimmed wires/vias to be reported. You can additionally use setEditMode -debug_file to specify the name for the report. The default report file name is editTrim_debug.rpt.  Note: Only wires and vias that have connectivity issues are reported.  Default: false   "\fB-via_allow_geom_drc {true|false}\fR" Checks geometry DRC.  Default: true   "\fB-via_auto_replace {true|false}\fR" Determines whether existing vias are replaced with new ones in case of overlap.
.RS  "*" 2 Specify true to replace existing vias with the new ones added with editAddVia in case of any overlap.  "*" 2 Specify false if you want to retain the existing vias even if there is some overlap with the new vias being added.
.RE   Default: true  "\fB-via_auto_snap {true|false}\fR" Controls whether to snap vias to the intersection of tracks or to the manufacturing grid.
.RS  "*" 2 Specify true to snap the via to the center of the intersection of tracks.  "*" 2 Specify false to keep the via in the location where it is added or moved, snapping only to the manufacturing grid.
.RE   Default: true  "\fB-via_cell_name <cellname>\fR" Specifies the name of the via cell from the LEF or DEF file.  Default: ""  "\fB-via_columns <integer>\fR" Specifies the number of columns in a via cut.  Default: 0  "\fB-via_create_by {viacell|parameters}\fR" Controls whether the tool creates vias based on the -via_cell_name parameter or the cut class name.
.RS  "*" 2 Specify viacell to create the via with the same geometry as the cell specified by the -via_cell_name parameter.
.RE
.RS  "*" 2 Specify parameters to create the via cell based on the cut class parameters.
.RE   Default: parameters  "\fB-via_cut_layer <cut_layer>\fR" Specifies the via layer name for the via to be created or modified.   Default: V12  "\fB-via_exclude_spec <exclude_list>\fR" Specifies the vias to be ignored by the wire editor. You can define the list of vias in the <exclude_list> as follows:  setEditMode -via_exclude_spec {{default via0} {rule1 via2} {rule2 {via2 via3}}}  For example, the wire editor will ignore the V1L2LVH via with the following command:  setEditMode -via_exclude_spec {{default V1L2LVH}}   Default: ""  "\fB-via_override_spec <value>\fR" Specifies the default vias to be used by wire editor. You can use this parameter if you do not want wire editor to select vias automatically.  -via_override_spec allows a regular via on NDR nets. You can define the via in the via spec as follows:  setEditMode -via_override_spec {{default via0} {rule1 via2} {rule2 via1}}  Here, if you draw a wire with NDR name rule1, the tool will always drop via2 in the wire intersection area. The tool will not check whether via2 belongs to NDR rule rule1 in the Tech Lef.  You can define the full set of required vias for regular as well as NDR nets in one command with the -via_override_spec parameter. For example:   setEditMode -via_override_spec { {default via0 via1 via2 via3 via4 via5 via6 via7 via8} {NDR_rule1 via2 via3 via4 via5 via6 via7 NDR_rule1_via2 NDR_rule1_via3 NDR_rule1_via4 NDR_rule1_via5 NDR_rule1_via6 NDR_rule1_via7}  {NDR_rule2 via2 via3 via4 via5 via6 via7 NDR_rule1_via2 NDR_rule1_via3 NDR_rule1_via4 NDR_rule1_via5 NDR_rule2_via2 NDR_rule2_via3 NDR_rule2_via4 NDR_rule1_via5 NDR_rule2_via6 NDR_rule2_via7} }  This use model reduces the runtime for via selection during Wire Edit.  When you perform wire edit operations, via selection happens as follows for the above definition:
.RS  "*" 2 For regular wire edit, the tool always picks a via from the default list specified with the -via_override_spec option.   "*" 2 For editing nets with the NDR_rule1 rule, the tool picks any via from the list defined under the rule NDR_rule1 in the above example.  "*" 2 For editing nets with NDR_rule2, the tool picks any via from the list defined under the rule NDR_rule2.
.RE   During wire edit for DRC fixing on both regular and NDR wires, the tool always picks a via  that is DRC clean after any wire edit operation, from the above definition.   To see another example of using the -via_override_spec parameter, see the Examples section.   Default: ""  "\fB-via_rows <integer>\fR" Specifies the number of rows in a via cut.   Default: 0  "\fB-via_scale_height <value>\fR" Specifies the absolute height of the special vias added when drawing wires.  Default: 100  "\fB-via_scale_width <value>\fR" Specifies the absolute width of the special vias added when drawing wires.  Default: 100  "\fB-via_snap_honor_color {true|false}\fR" Specifies whether or not to snap via to the track with the same color automatically.  Default: true  "\fB-via_snap_to_intersection {true|false}\fR" Specifies whether to snap vias to the intersection of wires.  Default: true  "\fB-via_type {auto|regular|special}\fR" Specifies the type of the via to be created:
.RS  "*" 2 auto - Assigns the correct via type based on the type of connected wire.  "*" 2 regular - Creates regular vias.  "*" 2 special - Creates special vias.
.RE   For example, if you specify the type as regular by using the following command and then run the editAddVia command, the tool will create a regular via even if there are PG shapes on other layers overlapping the area:  setEditMode -via_type regular  Default: auto  "\fB-width <value>  \fR" Specifies the width of patch wires.  Default: 0  "\fB-width_horizontal <value>\fR" Specifies the width for horizontal wires.  Default: 0  "\fB-width_vertical <value>  \fR" Specifies the width for vertical wires.  Default: 0  "\fB-wire_override_spec specification\fR" Contains the details of the override specification. The specification has the following format:  {{<wire_index> <width> <spacing> <layer> <ndr_name>} {...}}  Specify the net numbers, followed by the override width, the override spacing to the next net, layer, or override NDR name for the specified nets.  The net number is the position of the net specified by the -nets parameter. If you specify more than one net, separate net numbers with commas.  For example, the following specification indicates that the first and second nets should have a width of 10.0 and a spacing of 3.0:  1,2 10.0 3.0   Similarly, the following specification indicates that the first and second nets should be reassigned to a new NDR, 2_wide:  1,2 "" "" "" 2_wide  Default: "" 
.SH Examples
.RS  "*" 2 If you want to draw a shield wire for the wire a1, run the following command before drawing the wire:  setEditMode -nets a1 -shielding_nets VDD -draw_shield true -shape none -width_horizontal 2  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  When -draw_shield is set to true, the tool automatically sets the status of the new wire to shield and its width to the minimum width (1.6um). If you also want to change the shield net attribute for the net, set the -update_shield_net parameter to true as well before drawing the wire.  "*" 2 If the current wire is on layer 2, use the following command to drop a multi-layer pin on layer 1/layer 2:   setEditMode -multi_layer_pin 1 -multi_layer_via V12  "*" 2 The following command uses the -via_override_spec parameter to specify via selections for the default rule as well as for the nondefault rule SP:   setEditMode -via_override_spec {{default via12 via23 via45} {SP spvia12}}  As specified in the command, wire editor makes via selections for layers as follows:
.RS  "*" 2 For the default rule:
.RS  "*" 2 via12 for layer V12
.RE 
.RE 
.RE
.RS
.RS
.RS  "*" 2 via23 for layer V23
.RE 
.RE 
.RE
.RS
.RS
.RS  "*" 2 via45 for layer V45
.RE 
.RE 
.RE
.RS
.RS  "*" 2 For the nondefault rule SP:
.RS  "*" 2 spvia12 for layer V12
.RE 
.RE 
.RE
.P Note: Wire editor automatically selects best vias for the layers that are not specified with -via_override_spec.
.RS  "*" 2 The following example uses the -jog_connect_layer parameter to specify that the tool should automatically move up new jog wires created on moving a wire segment by 1 layer:  setEditMode -connect_with_specified_layer false -jog_connect_layer 1  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  Here, the blue wire segments are on layer M2 while the red jog wire segments are on the M3 layer.  "*" 2 In the following example, as the -jog_connect_layer parameter is set to -1, the tool automatically moves down the new jog wires by 1 layer:  setEditMode -connect_with_specified_layer false -jog_connect_layer -1  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  In this case, the blue wire segments are on layer M2 while the red jog wire segments are on the M1 layer.  "*" 2  The following command specifies that the wire being drawn should snap to a pin automatically:  setEditMode -snap_to pin  "*" 2  The following command specifies that when a physical pin is moved, it should snap automatically to the closest routing track in the preferred direction for the layer:  setEditMode -snap_objects_to_track pin  "*" 2 The following set of commands add a via with two rows and three columns. The origin of the via is at coordinates 550, 675:   setEditMode -via_create_by geometry -via_add_rows 2 -via_add_columns 3  editAddVia 550 675  "*" 2  The following command scales the via added while drawing a wire to 80% height and width:  setEditMode -via_scale_height 80 -via_scale_width 80  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 In the following examples, the blue wire is being moved or stretched from left to right. See how the tool behavior changes with the various setEditMode settings given below:
.RS  "*" 2 setEditMode -drc_on 1 -lateral_movement_range 0 -stop_at_drc 1  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  This wire edit will generate a violation with an existing wire (see A), so the tool shrinks the new wire to a distance such that there is no violation (see B).  "*" 2 setEditMode -drc_on 1 -lateral_movement_range 0 -stop_at_drc 0  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  This wire edit will generate a violation with an existing wire (see A). However, the tool allows the new wire to be moved or stretched to any length and reports a violation (see B).  "*" 2 setEditMode -drc_on 1 -lateral_movement_range 1.6 -stop_at_drc 1  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  This wire edit will generate a violation with an existing wire (see A). So, the tool moves the new wire up by a minimum distance to avoid generating a violation (see B).  "*" 2 setEditMode -drc_on 1 -lateral_movement_range 1.6 -stop_at_drc 1  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  This wire edit will generate a violation with an existing wire (see A). The blue wire can be moved either up or down to avoid the violation. In this case, the tool moves the wire up, which is the preferred direction for horizontal wires (see B).   "*" 2 setEditMode -drc_on 1 -lateral_movement_range 1.6 -stop_at_drc 1  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  This wire edit will generate a violation with an existing wire (see A). However, even if the blue wire is moved up or down within the specified lateral movement range, the tool still cannot avoid a violation. Therefore, the tool obeys other specified wire edit settings. In this example, the tool obeys the -stop_at_drc 1 setting and moves or stretches the blue wire up till the closest location available before the DRC violation occurs (see B).   "*" 2 setEditMode -drc_on 1 -lateral_movement_range 1.6 -stop_at_drc 0  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  This wire edit will generate a violation with an existing wire (see A). However, even if the blue wire is moved up or down within the specified lateral movement range, the tool still cannot avoid a violation. Therefore, the tool obeys other specified wire edit settings. In this example, the tool obeys the -stop_at_drc 0 setting and allows you to move or stretch the wire even though it results in a DRC violation. (see B).   "*" 2  Consider the addition of a bus a[0] a[1] a[2]. The NDR name is default, and the metal layer name is M0.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)
.RS  "*" 2 The following command reassigns the first and second nets to a new NDR, 2_wide:  setEditMode -wire_override_spec {1,2    2_wide}  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 The following command assigns the M2 layer to the first wire and the M4 layer to the third wire.:  setEditMode -wire_override_spec {{1  M2} {3  M4}}  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.RE 
.RE  "*" 2 The following commands report untrimmed wires and vias with connectivity issues in a file named wireTest.rpt:  setEditMode -verbose true  setEditMode -debug_file wireTest.rpt  editTrim  The report (sample) is as follows:  ###############################################################  # Generated by: Cadence Innovus 20.10-b015_1  # OS: Linux x86_64(Host ID noi-leenap1)  # Generated on: Mon Feb 10 13:50:19 2020  # Design: carve  # Command: editTrim  ###############################################################  Removed 0 wires and 0 vias.  1 wire can't be trimmed, because it connect a patch wire or the status is Cover.  The wires status is Cover:  Wire: ram1/subram02_lower/TESTACT_INST_PERIWDSRAM001PAA512W27C3/n7 M2 97845,-642213,100551,-642147
.RE 
.SH Related Information
.RS  "*" 2 editAddRoute  "*" 2 editAdjust   "*" 2 editChangeLayer  "*" 2 editChangeNet  "*" 2 editChangeRule  "*" 2 editChangeStatus  "*" 2 editChangeVia  "*" 2 editCommitRoute  "*" 2 editCutWire  "*" 2 editDelete   "*" 2 editDuplicate   "*" 2 editMerge   "*" 2 editMove  "*" 2 editResize   "*" 2 editSplit  "*" 2 editSelect  "*" 2 editTrim   "*" 2 getEditMode  "*" 2 Editing Wires chapter in the User Guide  "*" 2 Edit Menu chapter in the Menu Reference 
.RS  "*" 2 Wire section
.RE 
.RE
.P
