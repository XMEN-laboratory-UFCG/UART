.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH setAddStripeMode  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBsetAddStripeMode\fR \-  Sets global variables for power stripes
.SH Syntax \fBsetAddStripeMode\fR  [-help]  [-reset]  [-allow_jog {none|{[padcore_ring ][block_ring ]}}]  [-allow_nonpreferred_dir {none | [blockring] [corering] [padring] [stripe]}]  [-area {<lx ly ux uy> | <x1 y1 x2 y2 x3 y3>
...}]  [-break_at {none|{[block_ring] [selected_block] [unassigned_bump][overlap_ringpin] [outer_ring][outside_ringmacro] [blocks_without_same_net]}}]  [-color_balance {same_color|alternate_color|none}]  [-continue_on_no_selection {true | false}]  [-detailed_log {true | false}]  [-domain_offset_from_core {true | false}]  [-extend_to_closest_target {ring|stripe|same_dir_stripe|area_boundary|none}]  [-extend_to_first_ring {true | false}]  [-ignore_block_check {true | false}]  [-ignore_blockring_when_breaking {true | false}]  [-ignore_DRC {true | false}]  [-ignore_nondefault_domains {true | false}]  [-inside_cell_allow_shift {true | false}]  [-inside_cell_only {true | false}]  [-keep_pitch_after_snap {true | false}]  [-max_extension_distance distance]  [-max_via_size {shape width% height% target_penetration%}]  [-merge_with_all_layers {true | false}]  [-mesh_via {true | false}]  [-offset_from_core {true | false}]  [-optimize_stripe_for_routing_track {shift|none}]  [-orthogonal_offset {[{edge1 orthogonal_offset1} {edge2 edge3 orthogonal_offset2} {edge4 edge5
... orthogonal_offset3 }
...]|[all orthogonal_offset]}]  [-orthogonal_only {true | false}]  [-over_row_extension {true | false}]  [-partial_set_thru_domain {true | false}]  [-recommend_width file_name]  [-remove_floating_stapling {true | false}]  [-remove_floating_stripe_over_block {true | false}]  [-remove_stripe_under_ring {true | false}]  [-respect_routes {none | fixed | fixed_and_clock | all}]  [-route_over_rows_only {true | false}]  [-rows_without_stripes_only {true | false}]  [-same_sized_stack_vias {true | false}]  [-skip_via_on_pin {[Pad] [Block] [Cover] [Standardcell] [Physicalpin]}]  [-skip_via_on_wire_shape {blockring | stripe | followpin | corewire | blockwire | iowire | padring | ring | fillwire | noshape}  [-spacing_type {edge_to_edge|center_to_center}]  [-spacing_from_block floating_point_value]  [-split_long_via {<threshold_value step_value offset_value height_value>}]  [-split_vias {true | false}]  [-split_wire_spacing floating_point_value]  [-split_wire_weight integer_0_to_10]  [-split_wire_width floating_point_value]  [-stacked_via_bottom_layer layerName]  [-stacked_via_top_layer layerName]  [-stapling_extend_to_minimum_spacing {true | false}]  [-stapling_nets_style {end_to_end | side_to_side | side_to_side_full_nets}]  [-stapling_shift {true | false}]  [-stop_at_closest_target {none|block_ring|core_ring|stripe}]  [-stop_at_last_wire_for_area {true | false}]  [-stripe_min_length {<floating_point_value> | stripe_width}]  [-stripe_min_width floating_point_value]  [-switch_cellname cellname]  [-switch_layer_overlap_length floating_point_value]  [-trim_antenna_back_to_shape {none | block_ring | core_ring | pad_ring | stripe}]  [-trim_antenna_max_distance distance]  [-trim_stripe {none|design_boundary|core_boundary}]  [-use_exact_spacing {true | false}]  [-use_point2point_router {true | false}]  [-use_stripe_width {true | false}]  [-via_using_exact_crossover_size {true | false}]
.P Sets global variables for power stripes. 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes the type and default information for each setAddStripeMode parameter.  For a detailed description of the command and all its parameters, use the man command:   man setAddStripeMode  "\fB-allow_jog {none|{[padcore_ring ][block_ring ]}}\fR" Specifies the type that stripe can jog to connect.  If set to padcore_ring and/or block_ring, the stripes are allowed to be on the same/different metal layer to connect to padcore_ring/block_ring.  If set to none, the stripe is not allowed to jog on any layer. A straight/direct connection (no jog) with switch layer is allowed to make the connection.  Default: padcore_ring block_ring  "\fB-allow_nonpreferred_dir {none | blockring| corering | padring | stripe}\fR" Specifies whether to allow non-preferred direction to jog to target. When set to none, the non-preferred direction jogging is disabled.  Note:  1. '0' or 'false' is not a legal value in this option.  2. There are five available option values in this option.  3. The value 'none' is exclusive to other option values.  4. The default value is padring.  "\fB-area { <lx ly ux uy> | <x1 y1 x2 y2 x3 y3
...>}\fR" Specifies the coordinates of the rectangular and/or rectilinear areas in which the stripes to be created. It appends the specified area to previous ones.  Default: ""  Note: 
.RS  "*" 2 If setAddStripeMode -area conflicts with addStripe -area, addStripe -area being on higher priority, setAddStripeMode -area is ignored.  "*" 2 If stripes are only to be created in the area in current command, reset the previous areas by one of the following three ways:
.RE   setAddStripeMode -reset -area  setAddStripeMode -area {}  setAddStripeMode -area "
.RS  "*" 2 When this parameter is used with setAddStripeMode -domain_offset_from_core true, the -start_offset value for specified area is measured from core on using setAddStripeMode -area.
.RE   "\fB-break_at {none|{[block_ring] [selected_block] [unassigned_bump][overlap_ringpin] [outer_ring][outside_ringmacro] [blocks_without_same_net]}}\fR" Specifies the break point of stripes.  Default: none  If any of the options block_ring, selected_block, unassigned_bump, overlap_ringpin, outer_ring or outside_ringmacro is specified, the stripe breaks when it encounters the specified structure that are not in the same wire group.  block_ring  Stripes break and connect to the block rings and ring pins if they are encountered.  Note: This parameter applies only to block rings that surround a block, and does not apply to block rings that surround rows or standard cells. If the block  is a ring macro, the stripe will break at the ring pin inside the block ring.  selected_block  Stripes stop at the block boundary when the block does not contain a blockage.  Stripes stop at the block boundary when the block contains a blockage and spacing from the block boundary to the edge of the blockage is greater than the minimum spacing value of that layer.  Stripes stop at the minimum spacing away from the blockage when the spacing from the block boundary to the edge of the blockage is less than the minimum spacing of that layer.  Note: If the selected block has block ring, stripes break and connect to the block ring.  unassigned_bumps  Stripes break at unassigned bumps. It prevents the unassigned bumps from being ignored and shorted with the power and ground nets by the stripes created in the same metal layer.  overlap_ringpin  Prevents stripes from overlapping with same direction ring pins of a different net.  Note: This option is only valid if the ring pin is more than half the length of the macro in the direction of the ring pin.  outer_ring  When a stripe encounters nested block rings or ring pins that are not in the same wire group, the stripe breaks at the outer ring. If not specified, the stripe breaks at the innermost ring.  Note: This parameter works only in conjunction with the following values of setAddStripeMode -break_at:
.RS  "*" 2 block_ring  "*" 2 selected_block
.RE   outside_ringmacro  Stripes break at a small distance outside the block if the selected block has ring pins.  Note: This parameter is available only if you also specify setAddStripeMode -break_at selected_block  blocks_without_same_net  Breaks stripes at blocks, where no pin has same net as the nets specified in the addStripe command.  Example  Block A has power supply VDD1 and VSS, Block B has power supply VDD and VSS, commands are as follows:  setAddStripeMode -break_at blocks_without_same_net  addStripe -nets {VDD VSS}...  In the above commands, VDD breaks at Block A, VSS goes through Block A, VDD and VSS will go through Block B. Refer to the screen below:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "\fB-color_balance {same_color | alternate_color | none}\fR" Specifies addition of VDD/VSS stripes with balanced color.  same_color   Corresponds to interlace with groups.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   alternate_color  Corresponds to interlace within the group.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   To achieve color balancing, the color of stripes occupying even number tracks is picked alternatively.    Note: The stripes location will always be either on full grid/track or half grid/track:
.RS  "*" 2 If the stripes occupy odd number of tracks, they must be on full grid.  "*" 2 If the stripes occupy even number of tracks, they must be on half grid.
.RE   To achieve color balance, the stripes color will be as mentioned below:
.RS  "*" 2 If the stripes occupy odd number of tracks, the color is opposite to the center track color.  "*" 2 If the stripes occupy even number of tracks, the color can be any of red or green and will keep alternating.
.RE   Only two nets are supported.  The option must be specified along with -recommend_width.  "\fB-continue_on_no_selection {true | false}\fR" If the design has no power domain, or no fences are selected, addStripe ignores the option -over_power_domain, and generates stripes extending to core ring.  Default: false  "\fB-detailed_log {true | false}\fR" Setting this parameter will make the addStripe output an extensive log or a detailed log.  Default: false  "\fB-domain_offset_from_core {true | false}\fR" Creates stripes over a power domain to align with the global stripes in your design by enabling you to use the offset that was used for the global stripes as the offset for the power domain stripes. This parameter uses the offset from the core, which is the default for global stripes.  Default: false  "\fB-extend_to_closest_target {none | stripe | ring | same_dir_stripe | area_boundary}\fR" Extends the stripe to the specified target. This parameter can work in conjunction with:   setAddStripeMode -max_extension_distance  Following is the description of the parameter values:
.RS  "*" 2 none: Restricts the stripe from extending to any target.  "*" 2 stripe: Allows the stripe to extend to the nearby stripe.  "*" 2 ring: Allows the stripe to extend to the nearby ring.  "*" 2 same_dir_stripe: Allows the stripe to extend to the stripe in the same direction.  "*" 2 area_boundary: Allows the stripe to extend to certain area boundary.
.RE   Default: none  "\fB-extend_to_first_ring {true | false}\fR" If set to true, stripe antennas are extended to the closest ring. If set to false, stripes stop at the boundary specified by the -extend_to parameter of the command.  Default: false  "\fB-ignore_block_check {true | false}\fR" If set to false, when a stripe encounters a ring, the software does not check whether that ring is surrounding a block. If set to true, when a stripe encounters a ring, the software automatically checks whether a block is enclosed within the ring.  Note: This parameter only works in conjunction with the -break_at parameter of the addStripe command.  Default: false  "\fB-ignore_blockring_when_breaking {true | false}\fR" If set to true, breaks the stripe outside the block if the stripe cannot go over the block.  If set to false, breaks the stripe at the block ring if it cannot go over the block.  Default: false  "\fB-ignore_nondefault_domains {true | false}\fR" Creates global stripes over domains without breaking. If you do not want the stripes to break at the non-default domains, set this variable to true before using the addStripe command.  Default: false  "\fB-ignore_DRC {true | false}\fR" Setting this parameter creates stripes ignoring DRCs but honoring user defined values. To be used for prototyping only.  Default: false  "\fB-inside_cell_allow_shift {true | false}\fR" Allows to shift the newly created pillars when meeting DRC, if there is already an existing special_wire on the given track. This parameter works only when the -inside_cell_only parameter is set to true.   When the -inside_cell_allow_shift parameter is set to false, the pillar is removed when meeting violation. When set to true, the newly created pillar is shifted to right among the three tracks when meeting violation. The next pillar's position depends on the final position of the current pillar.  The distance between these pillars should satisfy the user specified spacing. The spacing between the two pillars should not be smaller than the user-specified spacing.  The following example shows that using the -inside_cell_allow_shift parameter, the newly created pillars of VDD2 are shifted right to avoid DRC with VDD1.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-inside_cell_only {true | false}\fR" Control whether the stripe will be generated inside selected or specified instances. If no instance is selected or without the addStripe -master, no stripe will be generated.  Default: false  Note: When setAddStripeMode -inside_cell_only true is used with setAddStripeMode -domain_offset_from_core true, the -start_offset value for the value specified  std-cell area is measured from core on using setAddStripeMode -inside_cell_only true.  "\fB-keep_pitch_after_snap {true | false}\fR" When set to true, the distance between two PG sets for snapping is set to greater than or equal to the pitch value specified through the addStripe -set_to_set_distance parameter. When set to false, the newly created PG sets are snapped from the current location to the nearest location valid for the -keep_pitch_after_snap parameter. The average pitch of the newly generated stripe is approximately equal to the specified addStripe -set_to_set_distance parameter value.  This parameter works with the addStripe -snap_wire_center_to_grid parameter. The behavior of the -keep_pitch_after_snap parameter under different scenarios is explained below.  Scenario 1:  When the addStripe -snap_wire_center_to_grid parameter is set to none, the setAddStripeMode -keep_pitch_after_snap parameter does not work. See the example below for understanding:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Scenario 2:  When the addStripe -snap_wire_center_to_grid parameter is set to grid, and the setAddStripeMode -keep_pitch_after_snap parameter is set to false, all the locations for snapping are decided based on the start location. Post then, the stripes are snapped to the nearest track. The average distance between of newly generated stripes is approximately equal to the specified pitch (addStripe -set_to_set_distance parameter value). See the example below for understanding:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Scenario 3:  When the addStripe -snap_wire_center_to_grid parameter is set to grid, and the setAddStripeMode -keep_pitch_after_snap parameter is set to true, the location for snapping is decided based on the previous location. Post then, the stripes are snapped to the next track. See the example below for understanding:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Note:
.RS  "*" 2 The first stripe of the design always snaps to the next track to meet the addStripe -start_offset value. To start the first stripe snapping at the nearest track, set the addStripe -allow_snapping_override_custom_spacing parameter to 1.  "*" 2 By default, the setAddStripeMode -keep_pitch_after_snap parameter is turned on only at the N10 nodes.
.RE   Default: false  "\fB-max_extension_distance <distance>\fR" Sets the maximum extension distance between stripes to nearby stripes in the same layer and the same direction.  Default: 2.14748e+09  "\fB-max_via_size {shape width% height% target_penetration%}\fR" The maximum size of a crossover via, specified as a percentage of a full-size via. You must specify three values for each shape that you specify.  The shape values are:
.RS  "*" 2 Pad  via size between stripe and pad pin/ring  "*" 2 Ring  via size between stripe and core ring  "*" 2 Stripe  via size between stripes  "*" 2 Blockring  via size between stripe and block ring  "*" 2 Blockpin  via size between stripe and block pin, including ring pin  "*" 2 Cover  via size between stripe and the macro which has CLASS COVER defined in LEF  "*" 2 Selected  via size between stripe and selected objects  "*" 2 No shape  via size between stripe and wires with shape None  "*" 2 Standardcell  via size between stripe and standard cell pin
.RE   The three values you must specify for each shape are:
.RS  "*" 2 The maximum width for the crossover via, as a percentage of a full-size via  "*" 2 The maximum height for the crossover via, as a percentage of a full-size via  "*" 2 The target penetration, which specifies a smaller size for vias connecting to targets of the specified shape
.RE   Default: ""  "\fB-merge_with_all_layers {true | false}\fR" Merges a stripe to a block ring or pin on all layers. This parameter is similar to the -merge_stripes_value parameter of the addStripe command, except that it merges a stripe to all layers instead of only the stripe layer.  Default: false  "\fB-mesh_via {true | false}\fR" Enables to use mesh via pillars to reduce memory.  Default: false  Example 1:  The following commands use mesh via pillars with the help of the -mesh_via parameter:  setAddStripeMode -mesh_via 1  addStripe -nets {$net1 $net2 $net1 $net2}
...  Following is the output:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Example 2:  The following commands generate mesh via automatically in one stapling stripe:  setAddStripeMode -mesh_via 1  addStripe -stapling{
...} -nets {$net1
...$net1...}
...  Following is the output:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "\fB-offset_from_core {true | false}\fR" If set to true, the first or last stripe is offset from the core area of the design. If set to false, the first or last stripe is offset from core ring, pad ring, depending on the parameters specified with the option.  Note: This parameter does not affect the offset if you specify the addStripe command with any of the following parameters:
.RS  "*" 2 -over_power_domain 1  "*" 2 -extend_to all_domains  "*" 2 -area
.RE   Default: true  "\fB-optimize_stripe_for_routing_track {shift | none}\fR" Specifies the location setting to move stripe center line to avoid the forbidden spacing. If both sides cannot be fixed at the same time, one side is always fixed.  When set to shift, addStripe automatically shifts stripes to preserve routing resource.  Default: none  Example  For the rule below,   FORBIDDENSPACING 0.16 0.2 WIDTH 0.05 PRL 0;  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   After shifting the stripe 0.02 left, Top Dist. and Bot. Dist. are >=0.2, and one track is saved.  "\fB-over_row_extension {true | false}\fR" Extends the stripes to cover the followpin at the row end.  Default: false  "\fB-orthogonal_offset {[{edge1 orthogonal_offset1} {edge2 edge3 orthogonal_offset2} {edge4 edge5
... orthogonal_offset3 }
...]|[all orthogonal_offset]}\fR" Defines orthogonal_offset of stripes for every edge of block level designs, blocks or standard cells for specifying the offsets for edges orthogonally. Edge number starts from the left bottom vertical edge. When this option is set for the second time, all the orthogonal_offset values are reset firstly.  Default: {none}  Example  setAddStripeMode -orthogonal_offset {{1 orthogonal_offset1} {2 orthogonal_offset2} {3 orthogonal_offset3} {5 orthogonal_offset5} {7 orthogonal_offset7} {8 orthogonal_offset8} {9 orthogonal_offset9} {11 orthogonal_offset11} {13 orthogonal_offset13}}  addStripe -layer green
...  addStripe -layer blue
...  setAddStripeMode -orthogonal_offset {{1 orthogonal_offset1} {3 orthogonal_offset3} {7 orthogonal_offset7} {11 orthogonal_offset11}}  addStripe -layer red
...  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   See the ExampleExamples section below for more examples on this parameter.  "\fB-orthogonal_only {true | false}\fR" Creates vias only for orthogonal wires and pin intersections.  Default: If you do not specify this parameter or if you specify it with a value of 1, the software creates vias for orthogonal wires and pin intersections.  "\fB-partial_set_thru_domain {true | false}\fR" Specifies whether to go over the power domain if domain contains the specified net.  Default: false  "\fB-recommend_width <file_name>\fR" The file_name specifies a list of recommended width values for the stripes.  Note: This option must be specified along with -color_balance.  "\fB-remove_floating_stapling {true | false}\fR" Removes those floating stapling stripes that are not connected to the power stripe/follow pin, when the stapling stripes are generated using a reference layer. This parameter does not remove floating stapling stripes when they are added through the user-specified offset and pitch.  Default: true  "\fB-remove_floating_stripe_over_block {true | false}\fR" If set to true, stripe fragments that start and end inside the same block or ring macro are removed. If set to false, stripe fragments are not removed.  Default: true  "\fB-reset\fR" Resets all parameters to their default values. Any values that do not already match the default value and are reset, will be reported.  "\fB-remove_stripe_under_ring {true | false}\fR" Removes stripe segments, which have overlapped area and are in the same direction as the existing ring. The stripe can be in a different layer to the existing ring.  Default: false  "\fB-respect_routes {none | fixed | fixed_and_clock | all}\fR" Specifies the route types to ignore DRC check during stripe generation. This parameter always honor all covers and PGs, but does not honor the trail routes, Following are the parameter values:
.RS  "*" 2 none: Specifies that no route types are respected.  "*" 2 fixed: Respects fixed regular wires.  "*" 2 fixed_and_clock: Respects fixed and routed clocks.  "*" 2 all: Respects fixed and routed clocks along with the routed signals.
.RE   For more information on the support of the setAddStripeMode -respect_route parameter values with various statuses of net, see SupportRespectRouteValuesSupport of setAddStripeMode -respect_route Parameter Values.  Default: fixed_and_clock  "\fB-route_over_rows_only {true | false}\fR" If set to true, route stripes only over standard cells rows. If set to false, stripes are not limited to being routed over rows within this boundary.  Default: false  "\fB-rows_without_stripes_only {true | false}\fR" If set to true, global stripes are generated as specified by other parameters. Then stripes are also generated over row clusters that do not already contain stripes. If set to false, stripes are generated as specified by other parameters and not over row clusters without stripes.  Default: false  "\fB-same_sized_stack_vias {true | false}\fR" If set to true, the software always generates same-sized stacked vias. If set to false, the software trims the vias as needed to meet the DRC rules.  Default: false  "\fB-skip_via_on_pin {[Pad] [Block] [Cover] [Standardcell] [Physicalpin]}\fR" Prevents vias from being generated on the specified types of pins.  If you specify -skip_via_on_pin {}, the power planning software makes connections to all five categories of pins. If you do not specify this parameter, vias are generated for block pins, pad pins, and cover macro pins, but are not generated for standard cell pins.  Default: Standardcell  "\fB-skip_via_on_wire_shape {blockring | stripe | followpin | corewire | blockwire | iowire | padring | ring | fillwire | noshape}\fR" Prevents vias from being generated on the specified wire shapes.  If you specify -skip_via_on_wire_shape {}, the power planning software makes connections to all five categories of wire shapes.  Default: If you do not specify this parameter, vias can be generated on all wire shapes except no-shape wires.  "\fB-spacing_from_block <float>\fR" If the value is less than 0, over-the-block stripes end the specified distance from the boundary.  If the value is greater than 0, global stripes break at the specified user units from the obstructed blocks.  If the value is equal to 0, the stripe offset is 0.  Default: 0  "\fB-spacing_type {edge_to_edge|center_to_center}\fR" Specifies the type of spacing for addStripe -spacing.  Default: edge_to_edge  "\fB-split_long_via {<threshold_value step_value offset_value height_value>}\fR" Splits vias longer than the specified length (threshold_value, in micrometers) into smaller vias with specified center-to-center spacing (step_value, in micrometers), left/bottom end offset (offset_value, in micrometers) and vertical/horizontal height (height_value, in micrometers) values
. This is independent of the -split_vias parameter.  Default: If you do not specify this parameter, the software does not split vias.  Note: If the offset_value is given as negative, the vias will be placed symmetrically on both ends. The default value of offset_value is -1.  "\fB-split_vias {true | false}\fR" Specifies whether two or more partial vias can be created at the crossover between a stripe and any target (pin or wire) if an obstruction (macro obstruction; wire or pin on a different net) prevents the creation of a full-size via. This can be useful, for example, if several metal blockages partially obstruct the area where a full-size via would normally be placed. This parameter permits the creation of partial vias that would not violate the process rules, in the open areas. A value of 1 allows multiple partial vias to be created. A value of 0 prevents multiple partial vias from being created.  Default: false  "\fB-split_wire_spacing <floating_point_value>\fR" Specifies the spacing between each split wire.  Default: If you omit this parameter, or set its value to 0, the software uses the spacing rule in the LEF file.  "\fB-split_wire_weight <integer_0_to_10>\fR" When split wires from a stripe on one layer attempt to make a target connection on another layer but are obstructed by I/O wires, some I/O wires might be deleted so that approximately n of 10 split stripe wires complete the target connection.  Note: When you specify this option, the software deletes the fewest I/O wires to accommodate approximately n of 10 split stripe wires.  Default: If you omit this parameter, or set its value to 0, no I/O wires are deleted when the above connections are made.  "\fB-split_wire_width <floating_point_value>\fR" Specifies the width of each split wire.  Default: If you omit this parameter, or set its value to 0, the software uses the maximum width value in the LEF file.  "\fB-stacked_via_bottom_layer <layername>\fR" Specifies the lowest layer in which vias can be stacked.  Default: The lowest metal layer in the design.  "\fB-stacked_via_top_layer <layername>\fR" Specifies the highest layer in which vias can be stacked.  Default: The highest metal layer in the design.  "\fB-stapling_extend_to_minimum_spacing {true | false}\fR" Automatically extends the newly created adjacent stapling to satisfy the end-to-end minimum spacing requirement, which will also be free from DRCs. This parameter works only with the stapling wires.  When set to to false, the length of the newly added stripe follows the length defined through the addStripe -stapling parameter. The following figure presents the placing of stripes when the parameter is set to false:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   When set to true, the newly added stripes are extended automatically. The wire on the edge with only one end will have end-to-end spacing with the newly generated stripes. Only the end-to-end side is extended and the edge line end is not extended. The extended stripe still remains within the die area. The following figure presents the placing of the extended stripes when the parameter is set to true:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: false  "\fB-stapling_nets_style {end_to_end | side_to_side | side_to_side_full_nets}\fR" Specifies the stapling style, if multiple nets are used. It controls the stapling stripe arrangement style specified in addStripe -nets. The default value of this parameter is end_to_end. Please note that:
.RS  "*" 2 When end_to_end (default value) is specified, nets are arranged in end direction. Refer to the following examples:  Example 1  addStripe -stapling {0.5 0.6 0.8:1} -nets {VDD VSS} -layer metal2 -width 0.1 -direction vertical -set_to_set_distance 0.5  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  Example 2   set metal3_track_offset 3  set metal3_pitch 0.8  addStripe -stapling '3 $metal3_track_offset $metal3_pitch:5 metal5' -nets {VDD VSS} -layer metal4 -width 0.5 -direction vertical -set_to_set_distance 2 (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  "*" 2 When side_to_side is specified, nets are arranged in the side direction. Refer to the following example:  Example 3  addStripe -stapling {0.5 0.6 0.8:1} -nets {VDD VSS} -spacing 0.4 -layer metal2 -width 0.1 -direction vertical -set_to_set_distance 2  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  
.RE
.RS  "*" 2 When side_to_side_full_nets is specified, nets are arranged in the side direction. Besides the side_to_side behavior, it creates other net stapling according to the reference nets. The side_to_side_full_nets value can be generated only over the existing reference stripe (with -stapling {length refer_layer}). Refer to the following example:  Example 4  -stapling_nets_style side_to_side_full_nets #Besides side_to_side behavior, creating other net stapling according to the reference nets  -stapling {length refer_layer} #Stapling stripe is generated over existing reference stripe  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.RE   "\fB-stapling_shift {true | false}\fR" Shifts the stapling stripes automatically to avoid the DRC. See the example below:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: true  "\fB-stop_at_closest_target {<none>|<block_ring>|<core_ring>|<stripe>}\fR" Stops the stripe at closest target while drawing the stripe on the master cell.  Default: none  "\fB-stop_at_last_wire_for_area {true | false}\fR" If set to false, the stripe antennas are trimmed back to the closest wire or pin of the same net. If set to true, stripe antennas are not trimmed.  Note: This option is only available if you specify the -area parameter.  Default: false  "\fB-stripe_min_length {<floating_point_value> | stripe_width}\fR" Specifies the minimum stripe length. stripe_width is a fixed string. The fixed string here refers to the width of present wire.  Default: stripe_width  "\fB-stripe_min_width <floating_point_value>\fR" Specifies the minimum width of the remaining stripe after being trimmed.  Default: 0.0  "\fB-switch_cellname {<cellA> <cellB>
...}\fR" Treats the specified switch cell as a ring. Pins in the switch cell can then be used as targets for stripes. If the switch cell is in the core area, the software treats it as a block ring. If the switch cell is outside of the floorplan row, the cell is treated as a core ring, and used as the stripe boundary.  You can specify one or more switch cell names.  To turn off this functionality, specify one of the following:
.RS  "*" 2 -switch_cellname ""  "*" 2 -switch_cellname none
.RE   Default: none  "\fB-switch_layer_overlap_length <floating_point_value>\fR" Controls the overlap distance used for the via between a stripe layer and the layer being switched to.  Note: The overlap applies only to vias created for straight (non-jogging) connections.  Default: If you omit this parameter, or set its value to 0, the power planning software creates a square via.  "\fB-trim_antenna_back_to_shape {none | block_ring | core_ring | pad_ring | stripe}\fR" Prevents stripes from creating antennas when a wire of the specified shape is the last target before a blockage that prevents connection to another target. Specify one of the following shapes:
.RS  "*" 2 block_ring  "*" 2 core_ring  "*" 2 pad_ring  "*" 2 stripe
.RE   Default: none  The following figure illustrates the software behavior if you specify this parameter with a value of block_ring.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: Stripes extend to the blockage, leaving an antenna between the last connection and the blockage. The following figure illustrates the software behavior if you do not specify this parameter.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "\fB-trim_antenna_max_distance <distance>\fR" Use this option to specify a distance, in micrometers, between the end of the antenna and a blocked target. This value controls whether an antenna is kept or trimmed for the selected shape. Cadence recommends that you specify a value equivalent to the distance between the core area and the pad ring or core ring.
.RS  "*" 2 If the blocked target is within the specified distance, the antenna is kept, and you can use the SRoute software to complete the connection. For example, if you specify a distance of 2 micrometers and the distance between the end of the antenna and the blocked target is 1 micrometer, the antenna is not trimmed.
.RE   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)
.RS  "*" 2 If the blocked target is beyond the specified distance, the antenna is trimmed back to the last connection. For example, if you specify a distance of 2 micrometers and the distance between the antenna and the blocked target would be 3 micrometers, the antenna is trimmed back.
.RE   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: 0.0  "\fB-trim_stripe {<none>| <design_boundary>| <core_boundary>}\fR" Specifies if shape is trimmed by the specified shape.  Default: None  "\fB-use_exact_spacing {true | false}\fR" If set to true, the power stripe breaks using the exact spacing rule from the obstructing blockage, pin, or wire to avoid a design rule violation. If set to false, the power stripe breaks at 1.5 times of the maximum range rule spacing of all layers.  Default:
.RS  "*" 2 true: For advance/N7 nodes  "*" 2 false: For non-advance/non-N7 nodes
.RE   "\fB-use_stripe_width {true | false}\fR" If set to true, stripes that jog to connect to a ring always use the stripe width for the jog. If set to false, the jog is either the width of the stripe or the width of the ring segment, which ever is smaller.  Note: This parameter only works in conjunction with the following parameter of the addStripe command:  -jog_to_connect 1  Default: true  "\fB-use_point2point_router {true | false}\fR" If set to false, the point-to-point router engine is turned off. If set to true, the addStripe command automatically calls the internal point-to-point router engine to route the difficult power stripe connections (such as connecting power stripe antennas that were not connected by the addStripe command).  Default: false  "\fB-via_using_exact_crossover_size {true | false}\fR" Specifies whether to generate partial vias of the exact crossover size. A value of 1 allows partial vias to be generated. A value of 0 prevents partial vias, and the software always generates full-size vias.  Default: true 
.SH Support of setAddStripeMode -respect_route Parameter Values
.P The following table presents the support of the setAddStripeMode -respect_route parameter values with various statuses of net:  ________________________________________________________
.P |\fB Target PG Honoring a Wire\fR        | \fB -respect_route Values\fR                        |   |______________________________________________|________|
.P |\fB Net Use\fR  | \fB Status\fR               | \fB none\fR     | \fB fixed\fR    | \fB fixed_an\fR | \fB all\fR      |   |          |                       |           |           | \fB d_clock\fR  |           |   |__________|___________|___________|___________|________|
.P | Yes      |  Yes      |  Yes      |  Yes      |   |__________|___________|___________|___________|________|
.P | Yes      |  Yes      |  Yes      |  Yes      |   |__________|___________|___________|___________|________|
.P | No       |  Yes      |  Yes      |  Yes      |   |__________|___________|___________|___________|________|
.P |\fB Clock\fR    |  No       |  No       |  Yes      |  Yes      |   |__________|___________|___________|___________|________|
.P |\fB Signal\fR   |  No       |  No       |  No       |  Yes      |   |__________|___________|___________|___________|________|
.P | No       |  No       |  No       |  No       |   |__________|___________|___________|___________|________| 
.SH Examples
.P The following command specifies that stripes that jog to connect to a target always use the stripe width.
.P setAddStripeMode -use_stripe_width 1
.P The following examples include commands for specifying that stripes are generated in the block with a specified orthogonal offset:
.P setAddStripeMode -orthogonal_offset {{1 9 11 13 orthogonal_offset1} {2 orthogonal_offset2} {3 orthogonal_offset3} {5 orthogonal_offset5} {7 orthogonal_offset7} {8 orthogonal_offset8}}  addStripe -layer green
...  addStripe -layer blue
...  setAddStripeMode -orthogonal_offset {{1 orthogonal_offset1} {3 orthogonal_offset3} {7 orthogonal_offset7} {11 orthogonal_offset11}}  addStripe -layer red
...
.P (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)
.P setAddStripeMode -orthogonal_offset {{3 7 orthogonal_offset3} {1 5 9 11 13 orthogonal1}}  addStripe -layer blue
...
.P (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.) 
.SH Related Information
.RS  "*" 2 addStripe  "*" 2 getAddStripeMode  "*" 2 Power Planning and Routing chapter in the Innovus User Guide.
.RE
.P
