.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH set_clock_groups  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBset_clock_groups\fR \-  Defines clock groups with specified clock definitions
.SH Syntax  \fBset_clock_groups\fR  [-name <name_list>]   [-comment <string>]   [-logically_exclusive] | [-physically_exclusive] | [[-asynchronous]     [-allow_paths]]   [-group <clock_list>]  
.P Defines clock groups with specified clock definitions. The software assigns all clocks that are defined after you use the set_clock_groups command to a default clock group. The software does not apply clock groupings on a master clock to the generated child clocks.
.P If there is an overlap in the clock group specification, the software uses the following precedence to resolve the behavior:
.RS  "*" 2 Physically exclusive  "*" 2 Asynchronous  "*" 2 Logically exclusive
.RE
.P The software drops any explicit false path assertions between clocks that you have set as either physically or logically exclusive or asynchronous using the set_clock_groups command.
.P An alternative to setting the clocks as physically or logically exclusive using the set_clock_groups command is to use the multi-mode mechanism. Generally in an implementation flow, sequential setting of active clocks cannot be used. For concurrent analysis of different modes, you can use an multi-mode based approach to drive IPO instead of using the set_clock_groups command.
.P For more information on multi-mode multi-corner analysis, see Importing and Exporting Designs chapter in the Innovus User Guide. 
.SH Parameters    "\fB-allow_paths\fR" Allows paths between asynchronous clock groups to be traced in timing analysis. These paths are blocked by default. When you use this option, the software still considers the paths to be asynchronous for signal integrity considerations. Signal integrity analysis does not support the -allow_paths parameter. Use the -allow_paths parameter with the -asynchronous parameter.  "\fB-asynchronous\fR" Defines clock group with asynchronous clocks. Asynchronous clocks have no specified phase relationship. The software considers asynchronous nets to have infinite timing window overlap for signal integrity considerations and considers these as false paths for timing analysis. Use the -allow_paths parameter to trace these paths in timing analysis.  "\fB-comment <string>\fR" Allows you to insert comments. The comments are read but are ignored with a one-time warning message. They are not used during timing analysis reporting nor are they written out during saving of constraints.  "\fB-group <clock_list>\fR" Defines a set of clocks that are exclusive or asynchronous to the clocks defined in all other groups. If you define only one group, then all clocks not in the group implicitly belong to a default clock group. The software automatically adds any new clocks that you define after the set_clock_groups command to this default clock group.  "\fB-logically_exclusive\fR" Defines clock group with clocks that do not have any functional paths between them, but coexist in the design at the same time. The software considers aggressor interactions between these clocks for signal integrity considerations, but considers these as false paths for timing analysis.  Note: The -logically_exclusive parameter does not have any impact on SI analysis.  For example, clocks selected via a clock mux select.  "\fB-name <name_list>\fR" Specifies the names of the clock groups to be added.  "\fB-physically_exclusive\fR" Defines clock group with clocks that cannot exist in the design at the same time. The software does not consider aggressor interactions between clock groups that are physically exclusive for signal integrity considerations.  From the perspective of SI analysis, all attackers that are physically exclusive with the victim net are ignored for both glitch and noise-on-delay analysis. Attacker nets that belong to physically exclusive groups cannot attack together. In this case, all sets of attackers belonging to all the physically exclusive groups are evaluated and the set of nets that has the highest impact on SI analysis is chosen.  For timing analysis, the software considers these clock groups as false paths.  Example: multiple clocks defined on the same source pin 
.SH Examples
.RS  "*" 2 The following commands assert two different clocks on the same clock root port, and uses set_clock_group to isolate them from each other:   create_clock -name SYSCLK -period 10 [get_ports sclk]  create_clock -name SCANCLK -period 100 -add [get_ports sclk]  set_clock_groups -name PHY_EX_SCLK -physically_exclusive  -group {SYSCLK} -group {SCANCLK}
.RE
.RS  "*" 2 The following command declares a single bus clock to be asynchronous to all of the other on board clocks in the design (which remain in the default clock group):   set_clock_groups -name ASYNCH_BUS -asynchronous -group {BUSCLK}
.RE
.RS  "*" 2 The following example shows that the clock group {clkA clkB} is asynchronous only to clock group {clkC clkD}:
.RE
.P set_clock_groups -asynchronous -group {clkA clkB} -group {clkC clkD} 
.P If an extra clock clkE is defined in the design, then  timing check will be allowed in between the first group to clkE and second  group to clkE.
.RS  "*" 2 In the following example since only one clock group is specified with the command set_clock_groupscommand, so the specified clock group is considered to be asynchronous to all the other clocks in the design:
.RE
.P set_clock_groups -asynchronous -group {clkA clkB}
.P set_clock_groups -asynchronous -group {clkC clkD} 
.SH Related Information
.RS  "*" 2 create_clock  "*" 2 reset_clock_groups
.RE
.P
