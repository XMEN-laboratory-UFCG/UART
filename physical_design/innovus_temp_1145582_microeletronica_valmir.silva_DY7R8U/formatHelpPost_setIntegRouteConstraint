.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH setIntegRouteConstraint  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBsetIntegRouteConstraint\fR \-  Applies specialty routing constraints in the database for nets in the designs
.SH Syntax \fBsetIntegRouteConstraint\fR  [-help]   [-accessStyle {none | straight | clustered}]  [-bottomLayer <layerNum>]  [-busGroupWidth <integer>]  [-connectSupply {<float> anyPoint}]  [-cornerStyle {none | crossover | river}]  [-crossTieShieldInterval <string>]   [-crossTieShieldLayerLimit <string>]  [-crossTieShieldedLayers <string>]  [-groupToOutsideSpacing {<layer1 spacing1> <layer2>[<:layerN>] <spacing2>...}]  [-hard]  [-hierarchicalScope {local local_below local_above local_above_below}]  [-intergroupGap {<layer1> <spacing1> <layer2>[:layerN] <spacing2>...}]  [-layerGap {<layer1> <gap1> <layer2>[:layerN] <gap2>...}]  [-layerMatch]  [-matchGap {<layer1> <gap1> <layer2>[:layerN] <gap2>...}]  [-matchStyle {accordion | trombone | coil}]  [-maxLength <value>]  [-maxRes <value>]  [-minBusBit <integer>]   [-minLength <value>]   [-minRes <value>]  [-name <string>]  {-net {<net1 net2
...>} | -busSinkGroups <busSinkGroupNameList>  | -file <string>}  [-noshareshield]  [-rule <NDR_name>]   [-shieldGap {<layer1> <gap1> <layer2>[:layerN] <gap2>
...}]  [-shieldNet {<net1 net2>}]   [-shieldTolerance {<net1 value1 net2 value2>
...}]  [-shieldType {unspecified side bottom bottomSide top topSide topBottom coaxial tandemSplit interleaved crosstie  tandemSplitFull tandemSplitNearBy tandemSplitSpecial none}]  [-shieldWidth {<layer1> <width1> <layer2>[:layerN] <width2>...}]  [-tandemAggressorAdjacentLayerSeparation <layer separation>]  [-tandemAggressorSameLayerTrackDistance {<layer1 n1> <layer2>[:<layerN>] <n2>...}]  [-tandemCapWidth {<layer1 width1> <layer2>[:<layerN>] <width2>...}]  [-tandemNearbyNonAggressorExceptByName {<nameString>}]  [-tandemNearbyNonAggressorNets {<nameString>}]  [-tandemNearbyNonAggressorType {<typeNameString>}]  [-tandemOverhang {<layer1 width1> <layer2>[:<layerN>] <width2>...}]  [-tandemSideOverhang {<layer1 width1> <layer2>[:<layerN>] <width2>...}]  [-tandemWidth {<layer1> <width1> <layer2>[:layerN] <width2>...}]  [-tolerance <tolerance>]  [-topLayer <layerNum>]  -type {bus diffPair matchLength NDR netClass shield simpleNet additional}
.P Applies specialty routing constraints in the database for nets in the designs. It allows creation of differential pair, match pair, shield nets, and nets with non-default rules.
.P If required, all routing constraints set by this command can be deleted from the database using the deleteIntegRouteConstraint command.
.P Also see, getIntegRouteConstraint.
.P Notes 
.RS  "*" 2 Integration constraints are used to convey the design intent in a mixed signal design. These constraints are fully interoperable between the digital and custom environments.   "*" 2  If the design has a complex netClass constraint that has net members with different constraints, setIntegRouteConstraint will throw the an error. If you still wish to change the integration constraints in the design, check whether the netClass constraints under the Complex NetClass tab in the Integration Constraint Editor can be removed. If yes, use the deleteIntegRouteConstraint or the GUI to first delete such constraints, and then repeat the setIntegRouteConstraint command.   "*" 2 The rule name DefaultRule is obsolete. It still works in this release and is automatically converted to the correct name default. Update your scripts to use default so that it work correctly in future releases.
.RE 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes the type and default information for each setIntegRouteConstraint parameter.  For a detailed description of the command and all of its parameters, use the man command  man setIntegRouteConstraint.  "\fB-accessStyle {none | straight | clustered}\fR" Specifies the preferred style for routing the bus after connecting to the bus pins. This parameter is applicable only for -type bus.   Default: clustered  "\fB-bottomLayer <layerNum>\fR" Specifies the bottom routing layer that is to be used.   "\fB-busGroupWidth <integer>\fR" Specifies the width for the bus groups into which the router splits a bus. The width is specified as an integer value. For example, if a bus is 16 bits, you can specify -busGroupWidth 4 to indicate that the router can route the bus as four bus groups of 4 bits each.  Default: 1  "\fB-busSinkGroups <busSinkGroupNameList>\fR" Specifies the list of names of the busSinkGroups. It sets high-frequency/mixed signal constraints for the nets of the busSinkGroup sinks. It supports all constraints of type BUS. These constraints are honored by the NanoRoute high-frequency router.  "\fB-connectSupply {<float> anyPoint}\fR" Indicates how the shield wires will be connected to the supply line. The default option, anyPoint, tells the router to connect the wire to supply, anywhere along the length of the shield wire.  Default: anyPoint  "\fB-cornerStyle {none | crossover | river}\fR" Specifies the type of corner style that the differential pair route or bus should follow when changing directions. This parameter is applicable only for -type bus and -type diffPair.  Default: crossover  "\fB-crossTieShieldInterval <string>\fR" Specifies the number of tracks between the cross-tie wires for opportunistic coaxial shielding. The <string> value should have the following format:  {integer | {<layer interval1> <layer2>[:<layerN>] <interval2>...}}   The integer value specifies the interval in the form of the number of tracks between cross-ties created on a given layer. For example, a value of 0 means that there are no tracks between cross-ties, which means there is a cross-tie on every track. Similarly, a value of 1 means that there is one track between cross-tie wires, which results in a cross tie on every other track. A value of 2 means two tracks between the cross-tie wires and so on.  Note: This parameter is applicable only if -shieldType is specified as crosstie.  Default: 0  "\fB-crossTieShieldLayerLimit <string>\fR" Specifies the layer range that can be used to create cross-tie shields. Use the -crossTieShieldLayerLimit parameter if you want to use only specific layers to create cross-ties and keep the remaining layers free for other purposes.   The <string> value should have the following format:  {layer_number:layer_number}   For example, if the layer range specified is {METAL2:METAL7}, cross-tie shields can be created on METAL2, METAL3, METAL4, METAL5, METAL6, and METAL7 but not on METAL8 or the layers above it.  Note: This parameter is applicable only if -shieldType is specified as crosstie.   "\fB-crossTieShieldedLayers <string>\fR" Specifies the layer range that will be shield with cross-ties from above and below. Use the -crossTieShieldedLayers parameter if you want to minimize congestion by shielding only specific routing layers with cross-ties.   The <string> value should have the following format:  {layer:layer}  For example, if the layer range specified is {METAL3:METAL6}, cross-tie shields will be built for routes on the net on METAL3, METAL4, METAL5, and METAL6.  Note: This parameter is applicable only if -shieldType is specified as crosstie.  "\fB-file <string>\fR" Specifies the path for an additional constraint file, which contains the maximum resistance target values for nets.  Note: 
.RS  "*" 2 -file cannot be used with either -net or -busSinkGroups.  "*" 2 -file must be used only with -type additional.
.RE   "\fB-groupToOutsideSpacing <layer1 spacing1> <layer2>[:<layerN>] <spacing2>...\fR" Indicates the spacing per layer (in microns) between the nets in this net group, and the other nets in the design.  "\fB-hard\fR" Indicates that the top or bottom layer routing constraint created should be of hard type. By default, Innovus places the top/bottom routing layer constraints as soft routing constraints in the resulting OpenAccess database.   "\fB-hierarchicalScope {local local_above local_below local_above_below}\fR" Specifies whether the particular constraint is local, and/or can be pulled (above) or pushed (below) across the hierarchy. Setting this option to all possible values enables pull and push. If set to local, it is not saved to the database.   "\fB-intergroupGap {<layer1 spacing1 layer2>[:<layerN>] <spacing2>...}\fR" Specifies the gap to be kept between the split bus groups when -busGroupWidth is specified. Default is min spacing.   "\fB-layerGap {<layer1 gap1 layer2>[:<layerN>] <gap2>...}\fR" Indicates the layer names and the gap-spacing values for the nets routed as diffPair. For any layer not listed, the minimum legal spacing for that layer is used.  For example:   -layerGap {<layer_1 gap_1 layer_2 gap_2>...}  "\fB-layerMatch\fR" Specifies that each separate layer should be matched for matchLength nets. By default, only the total length is matched  "\fB -matchGap {<layer1 gap1 layer2>[:<layerN>] <gap2>...}\fR" Indicates the spacing between two rises of the accordion. This setting is applicable only when -type is matchLength and -matchStyle is accordion.  You may want to control the spacing between two rises of the accordion if routing resources are restricted.  "\fB-matchStyle {accordion | trombone | coil}\fR" Indicates the routing topology to be used for matching the nets routed as matchLength. It can be accordion, trombone, or coil.  In accordion, pulse structures are used to match length while in trombone we use loops.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: accordion  "\fB-maxLength <value>\fR" Indicates the maximum length the router should route a net. The maximum length is specified as a float value. This parameter is applicable only for -type matchLength and  -type simpleNet.   "\fB-maxRes <value>\fR" Indicates the maximum resistance to be used for the specific net being routed or for the nets with a matchLength constraint if -type is matchLength. The maximum resistance  is specified as a float value. This parameter is applicable only for -type matchLength.  "\fB-minBusBit <integer>\fR" Indicates the minimum bits allowed for the router to split a bus. As channels get narrower, it becomes challenging to accommodate all the bus bits in the same channel. By default, -minBusBit value is undefined, not  0. If you specify an integer value for  -minBusBit, the router splits a bundle with a minimum of this value. For example, if you set - minBusBit to  4, the router splits the bus such that each part has at least  4 bits.   "\fB-minLength <value>\fR" Indicates the the minimum length the router should route a net. The minimum length is specified as a float value. This parameter is applicable only for -type matchLength and  -type simpleNet.   "\fB-minRes <value>\fR" Indicates the minimum resistance to be used for the specific net being routed or for the nets with a matchLength constraint if -type is matchLength. The minimum resistance is specified as a float value. This parameter is applicable only for -type matchLength.  "\fB-name <string>\fR" Specifies the name of the constraint group being created, changing the default name given to the constraint by Innovus.  "\fB-net {<net1 net2>}\fR" Specifies the list of net names to be routed.   "\fB-noshareshield\fR" Specifies that there should be individual shields, instead of a common shield, between the bus nets. This option is applicable only for constraints of type bus.    "\fB-rule <NDR_name>\fR" Specifies the name of the routing rule that is used for routing a particular type of net(s).  Default: "default"  "\fB-shieldGap {<layer1 gap1 layer2>[:<layerN>] <gap2>
...}\fR" Specifies the spacing between the shielded wire and the shield net in microns. For any layer not listed, the minimum legal spacing for that layer is used.   "\fB-shieldNet {<net1 net2>}\fR" Indicates that the net group should be shielded by the specified nets. Valid net names that you can use with -shieldNet are all power and ground net names in the design. You can specify different shield nets for different sides of a wire. The routers then determine which shield net should be used on which side of the wire.  Note: You can specify a maximum of two net names with this parameter. In addition, you can specify two shield net names only for the following shield types:
.RS  "*" 2 side  "*" 2 topSide  "*" 2 bottomSide  "*" 2 coaxial  "*" 2 tandemSplit
.RE   For the top, bottom, or topBottom shield types, you can specify only one shield net.  Default: The first ground net name in the list of ground nets.  "\fB-shieldTolerance {<net1 value1 net2 value2>
...}\fR" Indicates the percentage of length of the net that can remain unshielded. You can set the same tolerance value or different tolerance values on a group of nets.  The examples below depict different use models:
.RS  "*" 2 In the following example, the same constraint shield tolerance is put on every member of the shield constraint group:  setIntegRouteConstraint -type shield -shieldNet {VSS} -shieldType side -shieldTolerance 25.0 -connectSupply anyPoint -net {scan_in_2, abc, xyz}   "*" 2 In the example below, different groups of nets get different shieldTolerance values:  setIntegRouteConstraint -type shield -shieldNet {VSS} -shieldType side -shieldTolerance 25.0 -connectSupply anyPoint -net {scan_in_2, abc, xyz} -shieldTolerance {net1 30 net2 30 net3 30}   "*" 2 In the following example, the nets scan_in_2, abc and xyz are already nets with the shield constraint, but without tolerance values. The command below adds the tolerance value to the existing shielding constraint of the nets. Note that adding shield tolerance changes the net to a complex shield as opposed to a simple shield:  setIntegRouteConstraint -type shield -shieldTolerance 25 -net {scan_in_2 abc xyz}
.RE   Note:
.RS  "*" 2 The shield tolerance value can be set only on nets that are not intended to be routed by NanoRoute. This means that setting the shield tolerance on any net will make that net a complex shield.  "*" 2 If you use the setIntegRouteConstraint command to set the shield tolerance on a net or a group of nets, those nets automatically get the MS bit in the DB and show up in the GUI as a complex shield.  "*" 2 Percentage tolerance is considered by VSR as a soft constraint.  "*" 2 PVS-cv is the only tool in the flow that checks the percentage tolerance against the geometries created by VSR, and flags any such violations.
.RE   Default: 20.0  "\fB-shieldType {unspecified side bottom bottomSide top topSide topBottom coaxial tandemSplit interleaved crosstie  tandemSplitFull tandemSplitNearBy tandemSplitSpecial none} \fR" Specifies the shielding type for the net(s) being routed.  For complex coaxial shields, shield type can be specified as explained below:
.RS  "*" 2 tandemSplitNearBy - Specifies that shielding should be added only where required.  "*" 2 tandemSplitFull - Specifies that one-layer tandem shielding with overhang should be added. The overhang can be specified using the new -tandemOverhang and -tandemSideOverhang parameters.  "*" 2 tandemSplitSpecial - Specifies that two-layer tandem shielding should be added for complete shielding from other nets. Use the new -tandemCapWidth parameter to specify the width of the tandem cap shield (second layer shield).
.RE   (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   Default: unspecified for diffPair, matchLength, and bus; side for NDR, simpleNet, and netClass  "\fB-shieldWidth {<layer1 width1 layer2>[:<layerN>] <width2>...}\fR" Indicates the width of the shield wire in microns per layer. This only applies to side shields.   "\fB-tandemAggressorAdjacentLayerSeparation <layer separation>\fR" Specifies the minimum distance between the given signal layer and the above/below layers containing the aggressors.   "\fB-tandemAggressorSameLayerTrackDistance {<layer1 n1> <layer2>[:<layerN>] <n2>...}\fR" Specifies the minimum pitch tracks (distance) between the given signal net and any aggressors on the same layer.   "\fB-tandemCapWidth {<layer1 width1> <layer2>[:<layerN>] <width2>...}\fR" Specifies the wire width (in microns) of the tandem cap shield beyond the edge of the route being shielded. For any layer not listed, the minimum legal width for that layer is used. This parameter is needed only for the tandemSplitSpecial shield type.   "\fB-tandemNearbyNonAggressorExceptByName {<nameString>}\fR" Specifies that only the nets mentioned by name are aggressors; the rest are not considered as aggressors for shielding.   "\fB-tandemNearbyNonAggressorNets {<nameString>}\fR" Specifies the net names that are not considered as aggressors for shielding.   "\fB-tandemNearbyNonAggressorType {<typeNameString>}\fR" Specifies those signal types that are not considered as signal types of aggressors. Even if they exist within a certain range, the signal net does not need to be protected by shielding.   "\fB-tandemOverhang {<layer1 width1> <layer2>[:<layerN>] <width2>...}\fR" Specifies the overhang value (in microns) for the tandem shield.   "\fB-tandemSideOverhang {<layer1 width1> <layer2>[:<layerN>] <width2>...}\fR" Specifies the overhang value (in microns) for the tandem side shield.   "\fB-tandemWidth {<layer1 width1 layer2>[:<layerN>] <width2>...}\fR" Specifies the width (in microns) of the top and bottom shields, beyond the edge of the route being shielded. For any layer not listed, the minimum legal width for that layer is used.  "\fB-tolerance <tolerance>\fR" Indicates the percentage difference in length that is allowed when routing nets as matchLength and diffPair.  Default: 20%  "\fB-topLayer layerNum\fR" Specifies the top routing layer that is to be used for routing.   "\fB-type {bus diffPair matchLength NDR netClass shield simpleNet additional}\fR" Specifies the type of routing constraints to be created:
.RS  "*" 2 bus - Specifies constraints for bus nets.  "*" 2 diffPair - Specifies constraints for differential pair nets.  "*" 2 matchLength - Specifies constraints for matched nets.  "*" 2 NDR - Specifies constraints for a net with a non-default rule.  "*" 2 netClass - Specifies constraints for shielding a group of nets. It can also be used for a group of nets that have the same NDR.  "*" 2 shield - Specifies constraints for shielding a single net.  "*" 2 simpleNet - Specifies constraints for a simple net.  "*" 2  additional - Specifies the maximum resistance target constraints for nets. The NanoRoute High Frequency (NRHF) router routes to match the targets by wire widening. A prerequisite for the maximum resistance flow is that NDRs should be predefined for the used layers.  Note: -type additional can be used only if -file is specified.  
.RE 
.SH Examples
.RS  "*" 2 The following command sets the layer 1 gap as 0.4,  layer 2 gap as 0.39, and layer 3 gap as 0.38:   setIntegRouteConstraint -type diffpair -net {n_7862 n_7875} -layerGap {1 0.4 2 0.39 3 0.38}   "*" 2 The following command specifies a shield constraint for the analogS41 net:  setIntegRouteConstraint -type shield -shieldNet VSS -shieldType side -connectSupply anyPoint -rule NDR4 -net analogS4I   "*" 2 The following command specifies a shield constraint for the net group comprising nets analogW1I, analogW2I, analogW3I, and analogW4I:  setIntegRouteConstraint -type netClass -shieldNet VSS -shieldType side -connectSupply anyPoint -net {analogW1I analogW2I analogW3I analogW4I}  "*" 2 The following command specifies minimum and maximum length constraints for the xyz net:  setIntegRouteConstraint -type simpleNet -net xyz -minLength 2.0 -maxLength 3.0  "*" 2 The following command specifies that individual shields should be used between the nets in the bus constraint:  setIntegRouteConstraint -type bus -nets {nets_1 nets_2
...} -shieldNet VSS -noshareshield
...
.RE
.RS  "*" 2 The following command specifies maximum resistance constraints for nets as specified in the target file, 1.txt:  setIntegRouteConstraint -type additional -file 1.txt
.RE 
.SH Related Information
.RS  "*" 2 deleteIntegRouteConstraint  "*" 2 getIntegRouteConstraint  "*" 2 writeIntegRouteConstraint
.RE
.RS  "*" 2 Routing Constraint Interoperability chapter in the Mixed Signal Interoperability Guide  "*" 2 Tools Menu chapter in the Menu Reference 
.RS  "*" 2 Mixed Signal -> Integration Constraint Editor
.RE 
.RE
.P
