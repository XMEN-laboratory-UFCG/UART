.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH fix_floorplan  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBfix_floorplan\fR \-  Fixes the detected violations as part of the UFC methodology by adding routing blockages around macro, snapping macro location, or re-shaping core shape
.SH Syntax \fBfix_floorplan\fR  [-help]   -file <fileName>  -type {ufc tcic}  [-selected ]   [-report_file <string>]   [-report_unplaced_block ]   [-break_at_conflict ]  [-honor_snap_block_grid ]  [-selected_rules <rule_name_list>] 
.P Fixes the detected violations as part of the UFC methodology by adding routing blockages around macro, snapping macro location, or re-shaping core shape. The UFC methodology also provides the capability to automatically fix the violations with imported UFC rules.
.P Note: The Unified Floorplan Constraints (UFC) methodology is a  powerful Innovus capability that can define several rules on floorplan objects, check specified rules, and report the violations with rule name as well as severity. The violations can be shown in the violation browser. UFC also provides the ability to automatically fix specific violations. It can add routing blockages, snap macro location, adjust core shape to fix corresponding violations. In addition, UFC also provides the ability to exclude rules from checking for specified objects.
.P Usage Model:
.RS  "*" 2 Load the Design.  "*" 2 Create a UFC file with floorplan rules.  "*" 2 Run UFC checking. (check_ufc)  "*" 2 Fix reported violations. (fix_floorplan)
.RE
.P You can use the fix_floorplan command to fix the detected violations as part of the UFC methodology. It fixes violations by:
.RS  "*" 2 Adding routing blockages around macros  "*" 2 Snapping macro locations  "*" 2 Re-shaping core shapes
.RE
.P The UFC methodology also provides the capability to automatically fix the violations with imported UFC rules.
.P Note: The fix_floorplan command tries to fix all the detected floorplan violations by default, however, it currently does not support fixing die size and core size violations. If a floorplan has rule conflicts, then the results after the fix may not be perfect. Cadence recommends you ensure that the rules used are not conflicting and that the die or core size satisfy the rules. Cadence also recommends you contact your Cadence representative if your constraints file comes from a third party, but you want to use the fix_floorplan command to fix the violations.
.P Note: The fix_floorplan command honors the setFPlanMode -no_cut_row parameter that specifies if rows are not required to be cut before operations. With setFPlanMode -no_cut_row false or not specified, the fix_floorplan command will work based on the current row shape. If there is any violation for rows, the fix_floorplan command will run the cutRow command to fix.  With setFPlanMode -no_cut_row true, the tool identifies that the  rows should not be cut. The fix_floorplan command will fix the row violations by adding place blockages instead of cutting row. The place blockages will be added to the row area that will be cut out and kept after fix_floorplan to satisfy the row constraint. The actual row shape will not be changed after the fix_floorplan command. 
.SH Parameters   "\fB-break_at_conflict\fR" Enables the tool to exit from fixing violations when conflict of rules is encountered. You must fix the conflict of rules and then re-run the fix_floorplan command.  Data_type: bool, optional  "\fB-file <fileName>\fR" Specifies the name of file containing the rules or constraints.  Data_type: string, required  "\fB-help\fR" Prints a brief description that includes type and default information for each fix_floorplan parameter. For a detailed description of the command and all of its parameters, use the man command:   man fix_floorplan  "\fB-honor_snap_block_grid\fR" When specified, the fix_floorplan command honors the block snap grid defined by the setFPlanMode -snapBlockGrid command.  Data_type: bool, optional  "\fB-report_file <string>\fR" Specifies the name of the file that saves the report summary.  Data_type: string, optional  "\fB-report_unplaced_block\fR" Enables the tool to show the number of unplaced macros in summary.  Data_type: bool, optional  "\fB-selected\fR" Specifies that only the selected objects can be moved to fix violations.  Note: The fix_floorplan command currently only support selected macros.  Data_type: bool, optional  "\fB-selected_rules <rule_name_list>\fR" When specified, the fix_floorplan command only fixes violations for specified rules. The -selected_rules parameter accepts rule names, rule names list, variables, and wildcards.  Note: When this option is not specified, the fix_floorplan command fixes all violations by default.  Data_type: bool, optional  "\fB-type {ufc tcic}\fR" Specifies the type of input file. The fix_floorplan command supports ufc and tcic files.  Data_type: enum, required 
.SH Example
.RS  "*" 2 The following command fixes the ufc violations based on the rules defined in the DTMF1.ufc file and writes the report to the  fix_cmds.tcl file.  fix_floorplan -type ufc -file DTMF1.ufc -report_file fix_cmds.tcl
.RE
.RS  "*" 2 The following command fixes the ufc violations for Rule A and Rule B only.  fix_floorplan -type tcic -file test.tcic -selected_rules RuleA RuleB
.RE 
.SH Related Information
.RS  "*" 2 check_ufc  "*" 2 Floorplanning the Design chapter in the Innovus User Guide
.RE
.P
