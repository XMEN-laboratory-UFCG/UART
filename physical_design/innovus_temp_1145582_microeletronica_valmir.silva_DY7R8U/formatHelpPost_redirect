.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH redirect  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBredirect\fR \-  Redirects the output to a file or variable
.SH Syntax \fBredirect\fR  [-help]   [<file_or_var_name>]   [<command>]   [-tee]   [-stdin | -append]   [-stdin | -variable]   [-variable]   [-stderr | -stdin]
.P Redirects the output to a file or variable. You can also directly use redirect characters without explicit use of the redirect command for Innovus commands.
.P Any Tcl return value from command is returned by redirect.  If redirect is used at the prompt, any echoing of the Tcl return at the prompt is not redirected.
.P You can also use the redirect command to write the contents directly to a gzip compressed file by ending the file name with
.gz. 
.SH Parameters   "\fB-help\fR" Prints a brief description that includes type and default information for each redirect parameter.  "\fB<file_or_var_name>\fR" File or variable name for output to go.  Data_type: string, optional  "\fB<command>\fR" Command to be executed.  Data_type: string, optional  "\fB-append\fR" Appends stdout/stderr to file or variable.  Data_type: bool, optional  "\fB-stderr\fR" Redirects stderr.  Data_type: bool, optional  "\fB-stdin\fR" Redirects stdin.  Data_type: bool, optional  "\fB-tee\fR" Redirects output to both screen and file or variable.  Data_type: bool, optional  "\fB-variable\fR" Redirects to a Tcl variable.  Data_type: bool, optional
.P It is also possible to use redirect characters similar to Unix usage, for Innovus commands, but not for built-in Tcl commands. This usage works for any Innovus command that does not explicitly register > or >> as options (if > or >> are visible in the man page or -help output for the command, it is explicitly registered). Note that the "source" command is overlaid by Innovus to add various verbose options, so it also supports these characters.
.P The table below shows the usage of redirect characters, and how to use & to indicate a Tcl var name.  Redirect CharactersMeaning  "\fB > <name> \fR" Redirects stdout to the file <name>   "\fB >> <name> \fR" Redirects stdout and appends to the file <name>   "\fB > &<name> \fR" Redirects stdout to the Tcl var <name>   "\fB >> &<name> \fR" Redirects stdout and appends to the Tcl var <name> 
.SH Examples
.RS  "*" 2 Redirects the output to a new file timing.txt.  redirect timing.txt "timeDesign -postRoute"  "*" 2 Appends the output to the file test.out.gz in compressed gzip format.  redirect test.out.gz "source test.tcl" -append  "*" 2 Redirects the output to both screen and a file.  redirect timing.txt "timeDesign -postRoute" -append -tee  "*" 2 Redirects to the file a.log in compressed gzip format  source test.out > a.log.gz  "*" 2 Redirects and appends to the file a.log  report_area >> a.log  "*" 2 Redirects to the Tcl var a  report_area > &a  "*" 2 Redirects and appends to the Tcl var a  report_area >> &a  "*" 2  The dbGet and get_property commands return their values as TCL_RESULTS. To redirect the output to any file, you can use any of the following methods:
.RE
.RS  "*" 2
.RS  "*" 2  You can redirect output of dbGet and get_property using the following commands:  redirect {puts "[dbGet top.insts.name]"} > inst_name.rpt  redirect {puts "[get_property [get_lib_cells F1] area]"} > property.rpt  "*" 2  You can get the value of output stored in a variable using the following commands:  redirect a {puts "[dbGet top.insts.name]"} -variable  redirect b {puts "[get_property [get_lib_cells F1] area]"} -variable
.RE 
.RE
.P
