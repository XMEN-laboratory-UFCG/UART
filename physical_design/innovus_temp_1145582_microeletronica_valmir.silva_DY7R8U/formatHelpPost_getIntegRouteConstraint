.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH getIntegRouteConstraint  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBgetIntegRouteConstraint\fR \-  Displays the settings needed for the setIntegRouteConstraint command
.SH Syntax \fBgetIntegRouteConstraint\fR  [-help]   [-net <net_name> | -name <constraint_name> | -additional]
.P Displays the settings needed for the setIntegRouteConstraint command.
.P If mixed-signal constraints have not yet been defined, the getIntegRouteConstraint command does not return anything.
.P If you run the getIngegRouteConstraint command without any option, all nets with all constraint names are displayed on the console window. 
.P Note: The output is displayed only on the console window and is not written to the log file. You cannot use > to write to a file. The only way to send the output to a file is to run the following:
.P redirect {puts [getIntegRouteConstraint <xxxx>]} > <filename>
.P Alternatively, use the command writeIntegRouteConstraint.
.P Note: Integration constraints are used to convey the design intent in a mixed-signal design. These constraints are fully interoperable between the digital and custom environments. 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes the type and default information for each getIntegRouteConstraint parameter.  For a detailed description of the command and all of its parameters, use the man command  man getIntegRouteConstraint.  "\fB-additional\fR" Returns the path to the additional constraint file, which contains the maximum resistance target values for nets.   "\fB-name <constraint_name>\fR" Returns a specific constraint by name. You can specify multiple constraint names, enclosed in braces.  "\fB-net <net_name>\fR" Specifies the net for which the constraints will be returned. If the net is part of a netClass, the constraints for the netClass is returned. You can specify multiple net names, enclosed in braces. 
.SH Example
.RS  "*" 2  The following command returns the constraint(s) defined for the net scan_out_1:  getIntegRouteConstraint -net scan_out_1  The output of the command is:  {-type shield  -shieldNet { VSS } -shieldType side -shieldTolerance 30.0 -net { scan_out_1 }  }  "*" 2  The following command returns details of the constraint named Constr_13__analogSW__DTMF_INST/analogSW_INST:  getIntegRouteConstraint -name Constr_13__analogSW__DTMF_INST/analogSW_INST  The output of the command is:  {-type netClass -name Constr_13__analogSW__DTMF_INST/analogSW_INST -shieldNet VSS -shieldType side -connectSupply anyPoint -rule NDR8 -net {analogW4I}  }  "*" 2  The following command returns the constraints on the specified nets:  getIntegRouteConstraint -net {DTMF_INST/cntrlxo[3] DTMF_INST/cntrlxo[0]}  The output of the command is:  {-type diffPair -name Constr_2__analogNW__DTMF_INST/analogNW_INST -tolerance 20 -rule default -net {DTMF_INST/cntrlxo[3] DTMF_INST/cntrlxo[2]}  } {-type diffPair -name Constr_1__analogNW__DTMF_INST/analogNW_INST -tolerance 5 -rule default -net {DTMF_INST/cntrlxo[0] DTMF_INST/cntrlxo[1]}  }  "*" 2  The following command returns all the constraints on all the nets in the design:  getIntegRouteConstraint  A sample output of the command is displayed below:  {-type diffPair -name Constr_3__analogNL__DTMF_INST/analogNL_INST  -tolerance 20   -rule default -net {DTMF_INST/digsyncc DTMF_INST/digsyncd}  } {-type diffPair -name Constr_2__analogNL__DTMF_INST/analogNL_INST  -tolerance  20 -rule default -net {DTMF_INST/digsynca DTMF_INST/digsyncb}  } {-type diffPair -name Constr_1__analogNW__DTMF_INST/analogNW_INST  -tolerance  5 -rule default -net {DTMF_INST/cntrlxo[0] DTMF_INST/cntrlxo[1]}  } {-type diffPair -name Constr_2__analogNW__DTMF_INST/analogNW_INST  -tolerance  20 -rule default -net {DTMF_INST/cntrlxo[3] DTMF_INST/cntrlxo[2]}  } {-type matchLength -name Constr_4__analogNL__DTMF_INST/analogNL_INST  -toleran  ce 20 -matchStyle accordion -rule default -net {DTMF_INST/digsync3 DTMF_INST/dig  sync4}  } {-type matchLength -name Constr_5__analogNL__DTMF_INST/analogNL_INST  -toleran  ce 20 -matchStyle accordion -shieldNet VSS -shieldType unspecified -connectSuppl  y anyPoint -shieldWidth { Metal1 0.56 Metal2 0.56 Metal3 0.56 Metal4 0.56 Metal5   0.88 Metal6 0.88} -rule default -net {DTMF_INST/digsync2 DTMF_INST/digsync1} ha  sUnknownConstraint  } {-type netClass -name Constr_10__analogSW__DTMF_INST/analogSW_INST  -shieldNet   VSS -shieldType side -connectSupply anyPoint -rule NDR8 -net {analogW1I} hasUnk  nownConstraint  } {-type netClass -name Constr_11__analogSW__DTMF_INST/analogSW_INST  -shieldNet   VSS -shieldType side -connectSupply anyPoint -rule NDR8 -net {analogW2I}  } {-type netClass -name Constr_12__analogSW__DTMF_INST/analogSW_INST  -shieldNet   VSS -shieldType side -connectSupply anyPoint -rule NDR8 -net {analogW3I}  } {-type netClass -name Constr_13__analogSW__DTMF_INST/analogSW_INST  -shieldNet   VSS -shieldType side -connectSupply anyPoint -rule NDR8 -net {analogW4I}  } {-type shield  -shieldNet { VSS } -shieldType side -net { analogS4I } hasUnkno  wnConstraint  } {-type shield  -shieldNet { VSS } -shieldType side -net { analogS3I } hasUnkno  wnConstraint  } {-type shield  -shieldNet { VSS } -shieldType unspecified -net { analogS2I }  } {-type shield  -shieldNet { VSS } -shieldType side -net { analogS1I }  } {-type shield -rule NDR0.6__analogNE  -shieldNet { AVSS } -shieldType coaxial  -connectSupply anyPoint -shieldWidth { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal  4 0.28 Metal5 0.28 Metal6 0.44} -tandemWidth { Metal1 1.4 Metal2 1.4 Metal3 1.4  Metal4 1.4 Metal5 1.4 Metal6 1.4} -shieldGap { Metal1 0.23 Metal2 0.28 Metal3 0.  28 Metal4 0.28 Metal5 0.28 Metal6 0.46} -net { analogE1I } hasUnknownConstraint  } {-type shield  -shieldNet { AVSS } -shieldType coaxial -connectSupply anyPoint   -shieldWidth { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal4 0.28 Metal5 0.28 Meta  l6 0.44} -tandemWidth { Metal1 1.4 Metal2 1.4 Metal3 1.4 Metal4 1.4 Metal5 1.4 M  etal6 1.4} -shieldGap { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal4 0.28 Metal5 0 
.28 Metal6 0.46} -net { analogN4I } hasUnknownConstraint  } {-type shield  -shieldNet { AVSS } -shieldType coaxial -connectSupply anyPoint   -shieldWidth { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal4 0.28 Metal5 0.28 Meta  l6 0.44} -tandemWidth { Metal2 1.4 Metal3 1.4 Metal4 1.4 Metal5 2.24 Metal6 1.4}   -shieldGap { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal4 0.28 Metal5 0.28 Metal6   0.46} -net { analogN3I } hasUnknownConstraint  } {-type shield  -shieldNet { AVSS } -shieldType coaxial -connectSupply anyPoint   -shieldWidth { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal4 0.28 Metal5 0.28 Meta  l6 0.44} -tandemWidth { Metal1 1.4 Metal2 1.4 Metal3 1.4 Metal4 1.4 Metal5 1.4 M  etal6 1.4} -shieldGap { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal4 0.28 Metal5 0 
.28 Metal6 0.46} -net { analogN2I } hasUnknownConstraint  } {-type shield -rule NDR0.6__analogNE  -shieldNet { AVSS } -shieldType coaxial  -connectSupply anyPoint -shieldWidth { Metal1 0.23 Metal2 0.28 Metal3 0.28 Metal  4 0.28 Metal5 0.28 Metal6 0.44} -tandemWidth { Metal1 1.4 Metal2 1.4 Metal3 1.4  Metal4 1.4 Metal5 1.4 Metal6 1.4} -shieldGap { Metal1 0.23 Metal2 0.28 Metal3 0.  28 Metal4 0.28 Metal5 0.28 Metal6 0.46} -net { analogN1I } hasUnknownConstraint  }
.RE
.RS  "*" 2 The following command returns the path to the additional constraint file, which contains the maximum resistance target values for nets:  getIntegRouteConstraint -additional  A sample output of the command is displayed below:  {-type additional -file 1.txt  }
.RE 
.SH Related Information
.RS  "*" 2 deleteIntegRouteConstraint  "*" 2 setIntegRouteConstraint  "*" 2 writeIntegRouteConstraint  "*" 2 Routing Constraint Interoperability chapter in the Mixed Signal Interoperability Guide  "*" 2 Tools Menu chapter in the Menu Reference 
.RS  "*" 2 Mixed Signal -> Integration Constraint Editor
.RE 
.RE
.P
