.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH dbGet  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBdbGet\fR \-  Returns object and attribute information for the specified database object in the design
.SH Syntax \fBdbGet\fR  [-p <num>]  [-u]   [-regexp]  [-d]  {<obj> | <objList> | head | top | selected}  [.<objType>]...[.<attrName> |
.? |
.?? |
.?h]   [<pattern>]  [expression]  [-v]  [-e]  [-i <num>]  [-help] 
.P Returns object and attribute information for the specified database object in the design. The dbGet command takes an object or object list as a starting point, then uses a period to traverse to other related objects, or to access attributes. Additional periods can be used to continue traversing the database schema.
.P For example, the following command returns the master cell names for all of the instances in the design:
.P dbGet top.insts.cell.name 
.RS  "*" 2 top is a pointer to the top cell.  "*" 2 insts is a list of pointers to the instances in the top cell.  "*" 2 cell is a list of pointers to the master cells for each instance.  "*" 2 name is the master cell name.
.RE
.P Copying and pasting pointers in an active session may cause the tool to crash. To prevent this situation, do not:
.RS  "*" 2 Copy pointers from the output of the dbGet command and paste to another command as input.  "*" 2 Copy a pointer from one session to another.
.RE
.P The dbGet command is case insensitive. An empty field returns a value of 0x0.
.P For a list of the object attributes that can be queried for information, or changed, see Innovus Database Object Information. 
.P 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes the type and default information for each dbGet parameter.  For a detailed description of the command and all its parameters, use the man command:  man dbGet  "\fB-e\fR" To avoid NULL (0x0) pointers and results from being printed. This is an optional option of type boolean and would effect all kinds of outputs.  In cases of nested dbGet statements:
.RS  "*" 2 The option should not be used in the inner dbGet statement.
.RE   Correct usage example: dbGet -e [dbGet -p2 [dbGet -p  top.insts.pStatus fixed].cell.name INV1] 
.RS  "*" 2 If none of the instances have 'fixed' placement status, the outer dbGet will not return a 0x0 but an empty list which TCL would not consider as a list element. For example,
.RE   dbGet [dbGet -p2 [dbGet -p -e top.insts.pStatus  fixed].cell.name INV1]  "\fB-i <num>\fR" For selecting a specific element from the list being returned as output. The option -i <num>would select the the <num>th element starting from 0. The option would also reduce a starting '{' and ending '}' for box and pt type attributes  Example : dbGet top.nets.name sum* -p -i 0   The option would return 1st pointer in the list of the nets whose name matches the pattern sum*  "\fB-p <num>\fR" Specifies the level to traverse back through the specified objects for the query.  For example, if you specify -p or -p1, the software traverses one level back through the specified objects. If you specify -p2, the software traverses two levels back through the specified objects.The -p parameter is used with pattern name matching (<pattern>) to create a subset of names by which to query.  "\fB-u\fR" Removes duplicate objects from the query results so that the results list only contains unique entries.  For information such as cell names, the results list can have the same entry multiple times. You can use the -u parameter to filter the results, so that the software only returns a unique list of different cell names.  "\fB-regexp\fR" Uses regular expression pattern matching (Tcl regexp command).  Default: Uses simple wild card pattern matching  "\fB-d\fR" Returns values in database integers.  Default: Returns values in floating point user units  "\fB{<objList> | head | top | selected}\fR" Specifies the starting point for the query.
.RS  "*" 2 objList: Specifies one or more object pointers as the starting point. You can specify a homogeneous or heterogeneous list.  "*" 2 head: Specifies the pointer for the root, or head of the design as the starting point (also known as dbgHead).  "*" 2 top: Specifies the pointer to the top cell in the design as the starting point (also known as dbgTopCell).  "*" 2 selected: Specifies that the selected objects are the starting point.
.RE   "\fB.<objType>*\fR" Specifies the object type to query.  "\fB{<attrNname>|
.? |
.?? |
.?h}\fR" Specifies the type of information to return.
.RS  "*" 2
.<attrName:>Returns the value of the specified object attribute.  "*" 2
.?: Returns a list of the available objects and attributes for the last object in the query.  The software returns the object and attribute names only, not their values.  For a list of objects, the field information is returned once for each type of object in the list.  Most lists are of the same type; therefore, returning the same fields many times does not make sense.  "*" 2
.??: Returns a list of the objects and attributes, and their values, for the last object in the query.  Use the setDbGetMode command to set controls for displaying
.?? query information.  "*" 2
.?h: Returns a list of the available objects and attributes for the last object in the query, and also includes the following information:
.RS  "*" 2 A short description for each object and attribute.  "*" 2 The type for each object.  "*" 2 The legal enum values for each attribute.  "*" 2 Whether the attribute value can be set (whether it is editable).
.RE 
.RE   "\fB<pattern>\fR" Specifies a string expression to use to match object or attribute names, or attribute values.  When you use <pattern>to match object or attribute names, the <pattern>is case insensitive. For example the following commands all return the instance placement status (inst: pStatus):dbGet top.insts.? ps*    dbGet top.insts.? PS*    dbGet top.insts.? pS*    dbGet top.insts.? pstatus    dbGet top.insts.? PSTATUS    dbGet top.insts.? pStatus    When you use <pattern>to match attribute values (strings or enums), the <pattern>is case sensitive. For example, the following command returns the list of pointers for the instances that have placed status: dbGet -p top.insts.pStatus placed   However, the following command returns 0x0, because PLACED does not match the legal placed enum value: dbGet -p top.insts.pStatus PLACED   Default: The software uses simple wildcard matching (*, ?).  "\fB<expression>\fR" Specifies a Tcl expression where values of attributes and also of objects can be accessed and utilized in Tcl "expr" style comparisons.  Note: Only child attributes and objects of the obect to be tested can be accessed, no additional traversal is allowed.  dbGet top.insts {.cell.name == "myBlock"}  is not allowed, the correct usage would be:  set myBlock [dbGet -p head.allCells.name myBlock]  dbGet top.insts {.cell == $myBlock}  For example,
.RS  "*" 2 Instead of a limited search like:   dbGet -p head.allCells.numRefs 5
.RE   Which is now equivalent to:   dbGet head.allCells {.numRefs == 5}  The search can also include a number of attributes and objects inside a Tcl expression, such as:   dbGet head.allCells {.numRefs > 5 && [string  match AND*
.name]}
.RS  "*" 2 For objects, note that the search will be limited to the children of the current object.
.RE   By a normal dbGet <pattern>method you use:  dbGet -p2 top.nets.sWires.layer.extName metal2  When you use the the <expression>method:  set L2 [dbGet -p head.layers.extName metal2]   dbGet top.nets.sWires {$L2 ==
.layer}
.RS  "*" 2 Logical matching:
.RE   dbGet top.nets {.name ne "clk"}  Returns a list of pointers to nets whose names do not match "clk".  "\fB-v\fR" Returns all attributes that do not match the pattern/ expression  or Reverses the result of pattern/expression matching. This is similar to the grep -v option in UNIX.  Example:  dbGet -v top.nets.name clk*  Returns all net names that do not match the clk* pattern   "\fB
.RS  "*" 2 Expanded numeric matching:
.RE dbGet top.nets {.numInputTerms > 5}\fR" Returns a list of pointers to nets that have more than five input terminals.
.RS  "*" 2 Multiple attribute matching: accessing multiple attributes of the same object.
.RE   dbGet top.nets {.name ne "clk" &&
.numInputTerms > 5 }  Returns list of pointers to nets with at least one input, but less than or equal to five input.  Note: The dbGet command can not be executed inside a prior instance of dbGet.   Note: Tokens in the expressions which begin a `.' and that are not intened to reference an attribute should be passed inside a Tcl variable, otherwise the expression will try and reference an attribute that does not exist (example:> dbGet top.insts {[string match
.xyzzy
.name]}should be changed to> set test_name
.xyzzy> dbGet top.insts {[string match $test_name
.name]}
.P Note 1: The system  can make suggestions or auto-complete entries using predictive text in case you enter a wrong dbGet command. The system no longer throws up errors, instead it lists all the probable commands starting with the letters entered so that you can choose which the one which you want to use. This behavior is implemented with the use of the tab, like when you press the Esc key in UNIX.
.P For example,
.P innovus 1> dbGet top.n<tab>   name numInputs numPGTerms numPhysTerms   nets numInsts numPhysInsts numTerms   numBidirs numNets numPhysNets   innovus 1> dbGet top.<tab>   bumps numPhysNets statusPlaced   fPlan numPhysTerms statusPowerAnalyzed   hInst numTerms statusRCExtracted   insts objType statusRouted   markers pgTerms statusScanOpted   name physInsts symmetryR90   nets physNets symmetryX   numBidirs physTerms symmetryY   numInputs pinToCornerDist terms   numInsts props texts   numNets statusClockSynthesized   numPGTerms statusGRouted   numPhysInsts statusIoPlaced 
.P innovus 1> dbGet top.insts.<tab>   box isJtagElem pHaloBot pgCellTerms rHaloTopLayer   boxes isPhysOnly pHaloBox pgTermNets   cell isSpareGate pHaloLeft props   instTerms name pHaloRight pt   isDontTouch objType pHaloTop rHaloBotLayer   isHaloBlock orient pStatus rHaloSideSize 
.P innovus 1> dbGet top.insts.instTerms.name
.P Note 2: The "return" value from dbGet is always a list or a string, so when the attribute that is being queried is a list (like pt and rect attributes) the return result is a list-of-lists structure, even if there is only one internal list being returned. For example:
.P $instPtrList is a pointer to a list of instances  $instPtr is a pointer to a single instance
.P > dbGet $instPtrList.pt  {65.34 85.68} {81.84 65.52} {83.16 85.68}
...
.P What is listed above is what is printed to the screen. But since the value is a string and the quotes (") are not displayed.   The actual return result from a scripting point of view is:  "{65.34 85.68} {81.84 65.52} {83.16 85.68}
..."
.P Similarly, in case of a single instance:
.P > dbGet $instPtr.pt   {65.34 85.68}
.P What is listed above is what is printed to the screen. But since the value is a string and the quotes (") are not displayed, the actual return result from a scripting point of view is:
.P "{65.34 85.68}"
.P So, to access the X value for the instance,
.P set x [lindex [lindex [dbGet $instPtrList.pt] 0] 0]
.P or
.P set x [lindex [join [dbGet $instPtrList.pt]] 0]
.P Usage in foreach, as foreach breaks down the list-of-lists into each pt.
.P foreach pt [dbGet $instPtrList.pt] {puts "X= [lindex $pt 0]"}
.P As the behavior of dbGet always returns the list-of-lists form, the foreach can be used even if there is only a single internal list. 
.SH Frequently used queries   "\fBGet the attributes of the selected object\fR" dbGet selected.??  "\fBFind all nets with name including clk\fR" dbGet top.nets.name *clk*  "\fBAll instance pointers of a particular cell type\fR" dbGet -p2 top.insts.cell.name INV1  "\fBGet all of the inverter lib cells\fR" dbGet [dbGet -p head.libCells.isInverter 1].name  "\fBAll the cell names, which are used in the design\fR" dbGet -u top.insts.cell.name  "\fBThe num of insts in the design\fR" dbGet top.numInsts  "\fBAll the physical only insts\fR" dbGet [dbGet -p top.insts.isPhysOnly 1].name  "\fBGet all power and ground name in the design\fR" dbGet [dbGet -p top.nets.isPwrOrGnd 1].name  "\fBFind the cell name of an instance\fR" dbGet [dbGet -p top.insts.name pm_arbiter/mc_pm_arbiter_regs/U290].cell.name  "\fBPointers to all registers in the design\fR" dbGet -p2 top.insts.cell.isSequential 1  "\fBAll blocks/macros\fR" dbGet -p2 top.insts.cell.subClass block  "\fBAll top level ports\fR" dbGet top.terms.name  "\fBPointers to all CTS clock nets\fR" dbGet -p1 top.nets.isCTSClock 1  "\fBAll of the nets skipped during routing\fR" dbGet [dbGet top.nets.skipRouting 1 -p].name  "\fBFind the net connected to a pin\fR" dbGet [dbGet -p top.insts.instTerms.name <full pin name>].net.name  "\fBPointers to all fixed nets\fR" dbGet -p2 top.nets.wires.status fixed  "\fBPointers to all donttouch insts\fR" dbGet top.insts.isDontTouch 1 -p  "\fBFind all the power domains\fR" dbGet top.fplan.groups.pd.name  "\fBFind nets with no DEF SPECIALNETS wiring\fR" dbGet [dbGet top.nets {.sWires == 0x0 &&
.sVias == 0x0}].name  "\fBFind the metal2 routing pitch (X)\fR" dbGet [dbGet -p [dbGet -p1 head.layers.type routing].name *2].pitchX  or  dbGet [dbGet head.layers.name metal2 -p].pitchX  "\fBFind all instance connected to a port\fR" dbGet [dbGet -p top.terms.name <port_name>].net.instTerms.inst.name  "\fBPointers to AND gates that used more than 5 times in the design\fR" dbGet head.allCells {.numRefs > 5 && [string match AND*
.name]}  "\fBPointers to cells that are used more than 10 times in the design\fR" dbGet [dbGet -p head.allCells.objType libCell] {.numRefs > 10}  "\fBPointers to cells that have 4 or less inputs and more than 2 PG terms\fR" dbGet [dbGet -p head.allCells.objType libCell] {.numInputs <= 4 &&
.numPGTerms > 2}  "\fBPointers to non-clk nets that have more than five input terminals\fR" dbGet top.nets {.name ne "clk" &&
.numInputTerms > 5 } 
.SH Examples
.RS  "*" 2 The following command returns the instance names for the instances with names that match the *reg* pattern:   dbGet top.insts.name *reg*
.RE
.RS  "*" 2 The following command returns the names of all nets that start with the letter I. Specifying this command returns the same information as specifying the dbFindNetsByName      I* command.   dbGet top.nets.name I*
.RE
.RS  "*" 2 The following command returns the names of all terminals that start with the letter I. Specifying this command returns the same information as specifying the dbFindTermsByName      I* command.   dbGet top.terms.name I*
.RE
.RS  "*" 2 The following command returns a list of pointers to the instances that have a placement status of Fixed:   dbGet -p top.insts.pStatus fixed
.RE
.RS  "*" 2 The following command returns a list of names for instances that have a placement status of Fixed:   dbGet [dbGet -p top.insts.pStatus      fixed].name
.RE
.RS  "*" 2 The following commands also return a list of instance names for instances that have a placement status of Fixed:   set fixedInst [dbGet -p top.insts.pStatus fixed]  dbGet $fixedInsts.name
.RE
.RS  "*" 2 The following command returns the status of the top cell in the design:   dbGet top.?? status*  The software displays the following information:  statusClockSynthesized: 0  statusGRouted: 0  statusIoPlaced: 1  statusPlaced: 1  statusPowerAnalyzed: 0  statusRCExtracted: 0  statusRouted: 0  statusScanOpted: 0
.RE
.RS  "*" 2 The following command returns a list of the available objects and attributes for instances of the top cell:   dbGet top.insts.?  The software displays the following information:  inst: box cell instTerms      isDontTouch isHaloBlock isJtagElem isPhysOnly isSpareGate name objType      orient pStatus pgCellTerms pgTermNets pt
.RE
.RS  "*" 2 The following command displays the available objects and attributes, and their values, for the instances in the top cell. By default, the software displays information for the first 10 instances only. Use the setdbGetMode command to change the display limit.   dbGet top.insts.??  The software displays the following information:  box: {314.16 302.4 316.8      307.44}  cell: 0x12186fa8  instTerms: 0x1330fa38      0x1330fa6c   isDontTouch: 0  isHaloBlock: 0  isJtagElem: 0  isPhysOnly: 0  isSpareGate: 0  name: i_10181  objType : inst  orient : MX  pStatus : placed  pgCellTerms: 0x13811088      0x138110cc   pgTermNets: 0x0  pt: {314.16 302.4}  box: {258.72 282.24 261.36      287.28}  cell: 0x12186c38  instTerms: 0x1330faa0      0x1330fad4   isDontTouch: 0  isHaloBlock: 0  isJtagElem: 0  isPhysOnly: 0  isSpareGate: 0  name: i_10177  objType : inst  orient : MX  pStatus : placed  pgCellTerms: 0x13810ef0      0x13810f34   pgTermNets: 0x0  pt: {258.72 282.24} 
...
.RE
.RS  "*" 2 The following command returns a list of the available objects and attributes for instances of the top cell. The software also displays a short description for each object and attribute, the type of each object, the legal enum values for each attribute, and whether the attribute value can be set by the user.   dbGet top.insts.?h  The software displays the following information:  ===========================================================================  inst: Instance - canonical      (flat), equivalent to DEF COMPONENT. Points to a libCell or ptnCell  ===========================================================================  box: rect, Bounding box of      instance  cell: obj(libCell ptnCell),      Pointer to child cell master or ptnCell  instTerms: objList(instTerm),      List of pointers to instance terminal  isDontTouch: bool, Indicates      that the instance is marked Don't Touch  isHaloBlock: bool, Indicates      that the instance is a halo block  isJtagElem: bool, Indicates      that the instance is a Jtag element  isPhysOnly: bool, Indicates      that the instance is physicl only   isSpareGate: bool, Indicates      that the instance is a spare gate  name: string, Fully qualified      (path) name of the instance  objType: enum(bndry      densityShape fPlan group hInst hInstTerm hNet hTerm head inst instTerm      layer libCell net netGroup pBlkg pd pinGroup prop ptnCell rBlkg sNet sWire      shape stdRow term topCell vCell via wire), Object type: Instance   orient(settable): enum(MX MX90      MY MY90 R0 R180 R270 R90 Unknown), Instance placement orientation  pStatus(settable): enum(cover      fixed placed unplaced), Instance placement status   pgCellTerms: objList(term),      List of pointers to the instance's power terminals  pgTermNets: objList(net), List      of pointers to nets attached to P/G terminals  pt(settable): pt, Location of      the instance  b
.RE
.RS  "*" 2 In order to query all nets that have no wiring (regular or special) more efficently, use:  set netsWithNoRouting [dbGet      top.nets {.wires == 0x0 &&
.vias == 0x0 &&
.sWires== 0x0      &&
.sVias == 0x0} ]  foreach netWithNoRouting      $netsWithNoRouting { Puts "** Net [dbGet $netWithNoRouting.name]      has no wiring."}
.RE
.RS  "*" 2 In order to display the Power/Ground connections for a specified instance, use:  set inst [dbGet -p      top.insts.name my_inst_name]  foreach      pgCellTermName [dbGet $inst.pgCellTerms.name] pgTermNetName [dbGet      $inst.pgTermNets.name]   {Puts      "Instance \\"[dbGet $inst.name]\\" terminal      \\"$pgCellTermName\\" is connected to net      \\"$pgTermNetName\\"."}
.RE
.RS  "*" 2 Finding nets with no DEF SPECIALNETS wiring  set netNames [dbGet [dbGet top.nets {.sWires == 0x0 &&
.sVias == 0x0}].name]  foreach netName $netNames {      Puts "$netName has no special wiring"  }  vs  foreach net [dbGet top.nets] {      if { [dbGet $net.sWires] == 0x0 && [dbGet $net.sVias] == 0x0 } {  	Puts "[dbGet $net.name] has no special wiring"      }  }
.RE
.P The first method calls dbGet once to access the DEF SPECIALNETS data, the second makes 2xN calls (where N is the number of nets in the design) to access the DEF SPECIALNETS data. The calls to access the DEF SPECIALNETS data do an internal initialization that can be expensive on large designs, so minimizing the number of times that happens can greatly improve the run time of a proc/script.
.P
