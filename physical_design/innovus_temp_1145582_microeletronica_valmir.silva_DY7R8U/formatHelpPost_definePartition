.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH definePartition  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBdefinePartition\fR \-  Defines a new partition corresponding to a hierarchical instance. The definePartition command supports nested partitions and can be used to specify partitions inside a partition
.SH Syntax   \fBdefinePartition\fR    [-help]   [-coreSpacing {left right top bottom}]   [-minPitchBottom <x>]  [-minPitchLeft <x>]   [-minPitchRight <x>]   [-minPitchTop <x>]  [-pinLayerBottom {<list_of_layers>}]   [-pinLayerLeft {<list_of_layers>}]  [-pinLayerRight {l<list_of_layers>}]   [-pinLayerTop {l<list_of_layers>}]  [-placementHalo {<left right top bottom> }]   [-railwidth <railWidth>]   [-reservedLayer {<list_of_layers>}]   [-routingHalo <floatValue>]   [-routingHaloBottomLayer <integerValue>]   [-routingHaloTopLayer <integerValue>]   [-stdCellHeight <x>]  {-hinst <string> | -proto {master_hinst_name_list} | -cell <cellName>}   [-checkCloneAlignment ]   [-hinst <hInstName> [-copyFrom <refPtnName>]]   [-cell <cellName> [-copyFrom <refPtnName>]]
.P Defines a new partition corresponding to a hierarchical instance. The definePartition command supports nested partitions and can be used to specify partitions inside a partition. While specifying partitions, you can specify the definition in any order. You can use this command after importing the design.
.P Note: The definePartition command does not check for fence constraint on clones and does not align them to the partition with respect to the master. If the clones do not have fence constraint, definePartition makes fences for clone modules. 
.P Note: For designs that have backside metal layers, both the backside and frontside layers are accepted. However, the automatic pin assignment flow is not impacted with the support for backside metal layers. It assigns pins on front layers only.  
.SH Parameters   "\fB-cell <cellName>\fR" Specifies the name of the cell for defining a new partition at an instance that has R0 orientation.  Note: For  black-boxes, an instance with non-R0 orientation is chosen if an instance with R0 orientation is not found.  Data_type: string, optional  "\fB-checkCloneAlignment         \fR" When specified, the definePartition command only checks the alignment of the clone with the master partition and reports a mismatch.  Note: The definePartition command does not move the clones.  Data_type: bool, optional  "\fB-copyFrom <refPtnName>\fR" Specifies the name of the reference partition from which to copy their properties. While copying the constraints, the shape, orientation, and location are considered:
.RS  "*" 2 Orientation: The orientation of the partition being defined is copied from the reference partition (refPtnName). If the reference partition has clones, then the orientation of the master is considered.  "*" 2 Shape: The shape of the partition being defined is copied from the reference partition (refPtnName).  "*" 2  Location: The fence location of the partition hinst being defined takes priority. In case the target partition hinst does not have a fence constraint (location), the location information is copied from the reference partition master hinst. This will result in overlapping fences.  Note: If the -copyFrom parameter is being used with the -cell parameter that has multiple Hinsts, then the location of the hinst that has a fence (location) constraint is considered as the master of the partition being defined.
.RE   Data_type: string, optional  "\fB-coreSpacing {left right top bottom}\fR" Specifies the space, in micrometers, between the module boundary and core design area of the partition module on the left, right, top, and bottom sides respectively.  The partition pins will be located at the partition instance boundary and the core area.  Note: These core-to-edge values are always synchronized between the partition and the corresponding power domain as follows:  If the specified instance was also earlier defined as a power domain, these values for the partition, by default, will have the same value as the values for the power domain. If you specify different values for the partition, the values for the power domain are updated so that they are the same as the values defined for the partition. Similarly, if a power domain is created (or an existing power domain modified) on the specified instance after the partition is defined, the values set earlier for the partition are updated so that they are the same as the values defined for the power domain.  Data_type: string, optional  "\fB-help\fR" Outputs a brief description that includes the type and default information for each definePartition parameter.  For a detailed description of the command and all of its parameters, use the man command:   man definePartition  "\fB-hinst <hInstName>\fR" Specifies the name of the hierarchical instance.  Note: None of its ancestors or descendants in the netlist tree can be a partition.  Data_type: string, optional  "\fB-minPitchBottom <x>  \fR" Specifies the pin pitch dimension for the bottom partition side.  The default is 2, which places one pin for every two metal tracks. The actual pin pitch depends on the pin's metal layer.  The Partition Pin Guide floorplan object will supersede this entry and use the Min. Space entry in the object's Attribute Editor.  Data_type: int, optional  "\fB-minPitchLeft <x>\fR" Specifies the pin pitch dimension for the left partition side.  The default is 2, which places one pin for every two metal tracks. The actual pin pitch depends on the pin's metal layer.  The Partition Pin Guide floorplan object will supersede this entry and use the Min. Space entry in the object's Attribute Editor.  Data_type: int, optional  "\fB-minPitchRight <x>\fR" Specifies the pin pitch dimension for the right partition side.  The default is 2, which places one pin for every two metal tracks. The actual pin pitch depends on the pin's metal layer.  The Partition Pin Guide floorplan object will supersede this entry and use the Min. Space entry in the object's Attribute Editor.  Data_type: int, optional  "\fB -minPitchTop <x> \fR" Specifies the pin pitch dimension for the top partition side.  The default is 2, which places one pin for every two metal tracks. The actual pin pitch depends on the pin's metal layer.  The Partition Pin Guide floorplan object will supersede this entry and use the Min. Space entry in the object's Attribute Editor.  Data_type: int, optional  "\fB-pinLayerBottom {<list_of_layers>}\fR" Specifies the metal layers to use for the partition. The metal layers correspond to the sides of the partition, where the vertical metal layers (for example, Metal2, Metal4, and so on) are for the Top and Bottom sides, and horizontal metal layers (for example, Metal3, Metal5, and so on) are for the Left and Right sides of the partition. Specify this value in integers, for example -pinLayerBottom {2 4}  Note: Only layers in their preferred routing direction are accepted.  Note: If these option is not supplied, all allowed layers in preferred routing direction will be assumed for that side.  Note: For designs that have backside metal layers, both the backside and frontside layers are accepted.  Default: All allowed layers in preferred direction.  Data_type: string, optional  "\fB-pinLayerLeft {<list_of_layers>}\fR" Specifies the metal layers to use for the partition. The metal layers correspond to the sides of the partition, where the vertical metal layers (for example, Metal2, Metal4, and so on) are for the Top and Bottom sides, and horizontal metal layers (for example, Metal3, Metal5, and so on) are for the Left and Right sides of the partition. Specify this value in integers, for example -pinLayerLeft {3 5}  Note: Only layers in their preferred routing direction are accepted.  Note: If these option is not supplied, all allowed layers in preferred routing direction will be assumed for that side.  Note: For designs that have backside metal layers, both the backside and frontside layers are accepted.  Default: All allowed layers in preferred direction.  Data_type: string, optional  "\fB-pinLayerRight {<list_of_layers>}\fR" Specifies the metal layers to use for the partition. The metal layers correspond to the sides of the partition, where the vertical metal layers (for example, Metal2, Metal4, and so on) are for the Top and Bottom sides, and horizontal metal layers (for example, Metal3, Metal5, and so on) are for the Left and Right sides of the partition. Specify this value in integers, for example -pinLayerRight {3 5}  Note: Only layers in their preferred routing direction are accepted.  Note: If these option is not supplied, all allowed layers in preferred routing direction will be assumed for that side.  Note: For designs that have backside metal layers, both the backside and frontside layers are accepted.  Default: All allowed layers in preferred direction.  Data_type: string, optional  "\fB-pinLayerTop {<list_of_layers>}\fR" Specifies the metal layers to use for the partition. The metal layers correspond to the sides of the partition, where the vertical metal layers (for example, Metal2, Metal4, and so on) are for the Top and Bottom sides, and horizontal metal layers (for example, Metal3, Metal5, and so on) are for the Left and Right sides of the partition. Specify this value in integers, for example -pinLayerTop {2 4}  Note: Only layers in their preferred routing direction are accepted.  Note: If these option is not supplied, all allowed layers in preferred routing direction will be assumed for that side.  Note: For designs that have backside metal layers, both the backside and frontside layers are accepted.  Default: All allowed layers in preferred direction.  Data_type: string, optional  "\fB-placementHalo {<left right top bottom>}\fR" Specifies extra spacing, in micrometers (around the left, bottom, right and top sides respectively) of the partition that should not be used for placement. The placement program will not place standard cells in the area for partition placement. This spacing is called placement halo. At the top-level design, this information is saved as part of the partition section in a floorplan file. This information is also saved in a partition floorplan file when saving partitions. By default, the value is 0 for all the sides.  If the hierarchical instance was earlier defined as a power domain, then this field corresponds to the minimum gap parameter of the power domain.  Note: The minimum gap value of the power domain and the placement halo values of the partition are always synchronized as follows:  If the specified instance was also earlier defined as a power domain, the placement halo values for the partition, by default, will have the same value as the minimum gap values for the power domain. If you specify a different value for the partition, the value for the power domain is updated so that it is the same as the value defined for the partition. Similarly, if a power domain is created (or an existing power domain modified) on the specified instance after the partition is defined, the value set earlier for the partition is updated so that it is the same as the value defined for the power domain.  Note: placementHalo created by definePartition cannot be honored by place_design before partitions have not been committed.  Data_type: string, optional  "\fB-proto {<master_hinst_name_list>}\fR" Specifies the master hierarchical instances list for the prototyping flow. It defines new partitions for the specified hierarchical instances with guide constraints. It is used before proto_design, which will convert the physical constraint from guide to fence finally.  Data_type: string, optional  "\fB-railwidth <railWidth>\fR" Specifies the standard cell power rail width, in micrometers. If partition pins are not allowed above power or ground rail width, specify the dimension of the power rail width. If a value of 0.0 is entered (the default), the width from the Technology file will be used.  Data_type: float, optional  "\fB-reservedLayer {<list_of_layers>}\fR" Specifies the metal layers that are used for routing in the partition and generating partition pins. Any metal layers that are not specified, usually the top-most metal layers, are allowed to route over the partition. A normal six-metal layer specification is Metal1, Metal2, Metal3, Metal4 and Metal5 specified, and Metal6 unspecified. When saving the partition, the LEF generated for this partition will have routing blockages on their layers so that the top-level router is aware of which metal layers are being used in the partition.  Note: For designs that have backside metal layers, both the backside and frontside layers are accepted.  Data_type: string, optional  "\fB-routingHalo <floatValue>  \fR" Specifies routing spacing, in micrometers, around the sides of the partition. A routing halo is honored only by the signal router. The signal router treats routing on the specific routing layers in the routing halo area as very high cost routing. However, perpendicular routing or straight connections to pins are acceptable. The special router does not honor routing halos. To block special routing, use routing blockages instead.  You can specify a positive or a negative value for the routing halo. A positive value means that the halo will be outside the partition. A negative value means that the halo will be applicable during block implementation, inside of the partition. The same value is used for all sides of the partition.  Note: For instance blocks - blackboxes, hard macros or block-level designs - specify the routing halo through the Floorplan - Edit Floorplan - Edit Halos form in the GUI or through the addRoutingHalo command.  Also, for bottom- up hierarchical flow, specify routing halo for a block at the top-level design or at the block-level design through the Floorplan - Edit Floorplan - Edit Halos form in the GUI or through the addRoutingHalo command.  Data_type: float, optional  "\fB-routingHaloTopLayer <integerValue>  \fR" Specifies the top partition layer for which routing halo will be created.  Default: By default, the top layer reserved for the partition is used.  Data_type: int, optional  "\fB-routingHaloBottomLayer <integerValue>  \fR" Specifies the bottom partition layer for which routing halo will be created.  Default: By default, the bottom layer reserved for the partition is used.  Data_type: int, optional  "\fB-stdCellHeight x\fR" Specifies the standard cell height for the partition.  Default: The default value is derived from the default technology site and row height.  Data_type: float, optional 
.SH Example
.RS  "*" 2 The following example defines a new partition:   definePartition -hinst ctr_inst   -coreSpacing 0.56 0.56 0.0 0.0   -railWidth 0.0   -minPitchLeft 2 -minPitchRight 2   -minPitchTop 2 -minPitchBottom 2   -reservedLayer {1 2 3 4}   -pinLayerTop {2 4} -pinLayerLeft {3} -pinLayerBottom {2 4} -pinLayerRight {3}   -placementHalo 10.0 0.0 0.0 0.0 -routingHalo 10.0   -routingHaloTopLayer 7 -routingHaloBottomLayer 1
.RE
.RS  "*" 2  The following commands define a nest partition where PTN1 is a parent partition and PTN2 is a child:  definePartition -hinst PTN1  definePartition -hinst PTN2  or  definePartition -hinst PTN2  definePartition -hinst PTN1
.RE 
.SH Related Information
.RS  "*" 2 partition  "*" 2 deletePartition  "*" 2 savePartition  "*" 2 Partitioning the Design chapter in the Innovus User Guide 
.RS  "*" 2 Defining Partitions  "*" 2 Working with Nested Partitions
.RE 
.RE
.P
