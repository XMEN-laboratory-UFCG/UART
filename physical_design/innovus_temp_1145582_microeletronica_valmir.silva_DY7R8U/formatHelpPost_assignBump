.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH assignBump  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBassignBump\fR \-  Assigns the bumps closest to the I/O cells, using euclidean distance, and adds bump connection target property onto bump. These bumps can be signal bumps specified in the Verilog netlist or power/ground (PG) bumps specified in the command line. From the 14.1 release, assignBump adds bump connect target to bumps by default during bump assignment
.SH Syntax  \fBassignBump\fR  [-help]   [{-area <x1 y1 x2 y2> | -selected }]   [-constraint_file <file_name>]  [-exclude_region <llx> <lly> <urx> <ury
...>]   [-maxDistance <distance>]   [-multiBumpToMultiPad]  [{[[-pgnet net_list] | [-exclude_pgnet net_list]][-pginst instance_list]} [-pgonly]] 
.P Assigns the bumps closest to the I/O cells, using euclidean distance, and adds bump connection target property onto bump. These bumps can be signal bumps specified in the Verilog netlist or power/ground (PG) bumps specified in the command line. From the 14.1 release, assignBump adds bump connect target to bumps by default during bump assignment.
.P This command is for flip chip designs. Bumps must be created or loaded from the I/O assignment file.
.P Use this command after the design is placed.
.P Note: The assignBump command does not affect any existing assignment. Hence, it will not reassign any existing power/ground assignments. 
.SH Support for CLASS BUMP Property
.P The assignBump command supports the CLASS BUMP of PORT in LEF. Using the LEF 5.7 syntax, you can add a new property in the PORT of the hard macro LEF called CLASS BUMP. With this property, fcroute is able to route from these ports to the assigned bump.
.P The assignBump command supports I/O pads or hard macros that have pins with multiple geometries. For the following hard macro definition in LEF, assignBump assigns three bumps for block1, including two bumps for pin signal1 and one for pin powerpin.
.P :
.P     MACRO block1
.P         PIN signal1
.P             PORT 
.P                 CLASS BUMP ;
.P                 LAYER
... ;
.P                 RECT
... ;
.P             END
.P             PORT
.P                 CLASS BUMP ;
.P                 LAYER
... ;
.P                 RECT
... ;
.P             END
.P         END signal1
.P         PIN powerpin
.P             PORT
.P                 CLASS BUMP ;
.P                 LAYER
... ;
.P                 RECT
... ;
.P             END
.P         END powerpin
.P     END block1
.P fcroute also supports routing for this kind of assignment. In the above example, routing happens from the two signal bump to the two port geometries and one power bump to the powerpin geometry with CLASS BUMP property.
.P The behavior of CLASS BUMP is summarized as below:
.RS  "*" 2 If the CLASS BUMP property is not defined in any cell, assignBump assigns one bump to each IO pin and fcroute works normally.
.RE
.RS  "*" 2 If any pin port in CLASS PAD AREAIO or CLASS BLOCK cells contains the CLASS BUMP property, assignBump uses the property for assignment.
.RE
.RS  "*" 2 Each pin port with the CLASS BUMP property will have a bump assigned. This means a pin can have multiple bumps assigned to it if it has more than one port defined as CLASS BUMP. fcroute honors this property and routes the port and its assigned bump. A port with CLASS BUMP attribute with multiple geometries is considered as one object for assignment and routing.
.RE 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes type and default information for each assignBump parameter.  For a detailed description of the command and all of its parameters, use the man command:  man assignBump  "\fB-area <x1 y1> <x2><y2>\fR" Assigns objects in the area specified by the <x1>, <y1>, <x2>, and <y2> coordinates.
.RS  "*" 2 If the specified area includes only bumps, assignBump assigns the selected bumps to IO cells based on the total shortest distance.   "*" 2 If the specified area includes only IO cells, assignBump assigns the selected IO cells to bumps based on the total shortest distance.   "*" 2 If the specified area includes both IO cells and bumps, then assignBump assigns the selected IO cells to the selected bumps. If the number of bumps are not enough, assignBump issues a warning.
.RE   Note: The selected objects must be same as the ones selected by the command windowSelect.  For designs with double pad rows, the following conditions must be kept in mind while defining area with assignBump -area:
.RS  "*" 2  All IO pads inside the area should be regular and should be placed in either two rows or two columns. If the pads are irregular, the tool will turn off double pad row assignment automatically and use the traditional optimization algorithm, based on minimal global length.  "*" 2  Define areas in such a way that there is only one double pad row in one area.   "*" 2  If two areas overlap, it means there are now two double pad rows in one area. The results of bump assignment in such situations might not be the most optimal. To get the most optimal results, split one of the areas into two to avoid overlap as shown below:  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)  Now, you can assign bumps using the following commands:  assignBump -area area1  assignBump -area area2  assignBump -area area3  assignBump -area area4
.RE   Note that for assigning bumps in a design with single pad rows, you can use assignBump without the -area option.  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   In the following example, the double pad area should be split to avoid overlaps as shown below. The rest of the bumps can be assigned without using the -area option:  assignBump -area area1  assignBump -area area2  assignBump  (<Image> To view the image, refer to the Innovus Text Command Reference - Release 22.1 manual.)   "\fB-constraint_file <file_name>\fR" Specifies the path to the file containing bump assignment constraints. At present, the following types of bump assignment constraints are supported:
.RS  "*" 2 SHARE_FIND_PORT constraint to filter unnecessary ports  "*" 2 ASSIGN_ANALOG_PG_NETS constraint to specify which signal nets are analog PG nets  "*" 2 SHARE_IGNORE_* and ASSIGN_IGNORE_* constraints to exclude instances, macros, pins, or nets for assignment.  "*" 2 ASSIGN_PAD2BUMP_RATIO constraint to specify the pad to bump ratio per net, macro, or instance.
.RE   For more information on specifying bump assignment constraints, refer to the "Using Bump Assignment Constraints" section of the  Flip Chip Methodologies chapter of the User Guide.  "\fB-exclude_pgnet <net_list>\fR" Specifies the names of the power/ground nets that must be excluded from bump assignment. Wild cards are supported in net names.  The net names should be enclosed in double quotation marks (" ") or braces {}.    "\fB-exclude_region <llx><lly><urx><ury> <...>\fR" Excludes bumps in the area specified by the lower-left x (<llx>), lower-left y (<lly>), upper-right x (<urx>), and upper-right y (<ury>) coordinates. You can specify multiple regions, which may be disjoint.  "\fB-maxDistance <distance>\fR" Specifies the maximum distance, in microns, to look for a bump connection.  "\fB-multiBumpToMultiPad\fR" Specifies that multiple pads need to be assigned to multiple bumps. This parameter is useful when you need to assign multiple pads on one net to multiple bumps based on shortest distance.  "\fB-pginst <instance_list>\fR" Specifies the names of power/ground instances to which the power bumps are assigned. The instance names should be enclosed in double quotation marks (" ") or braces {}.  "\fB-pgonly\fR" Assigns only power/ground nets to bumps. When this option is specified, signals are not assigned to bumps.  Note: Option -pginst or -pgnet|-exclude_pgnet is required for option -pgonly.  "\fB-pgnet <net_list>\fR" Specifies the names of the power/ground nets to which the bumps are assigned. The net names should be enclosed in double quotation marks (" ") or braces {}.  By default, bumps are assigned to all pads whose ports are connected to power/ground nets.  "\fB-selected\fR" Assigns selected bumps to the closest I/O instances or selected I/O instances to the closest bumps.
.RS  "*" 2 If only bumps are selected, assignBump assigns the selected bumps to IO cells based on the total shortest distance.  "*" 2 If only IO cells are selected, assignBump assigns the selected IO cells to bumps based on the total shortest distance.  "*" 2 If both IO cells and bumps are selected, assignBump assigns the selected IO cells to the selected bumps. If there are not enough bumps, assignBump issues a warning.
.RE   Note: The -selected parameter works with other options of assignBump, except -area and -exclude_region. 
.SH Examples
.RS  "*" 2 The following command assigns bumps to the power and ground nets, VDD and VSS, within the area specified by 600.0 (llx), 960.0 (lly), 2600.0 (urx), and 4100.0 (ury) coordinates.  assignBump -pgnet {VDD VSS} -area {600.0 960.0 2600.0 4100.0}   "*" 2 The following command assigns multi-PG pads to bumps:  assignBump -pgonly -pgnet {VDD VSS}
.RE 
.SH Related Information
.RS  "*" 2 assignPGBumps  "*" 2 assignSigToBump  "*" 2 checkBump  "*" 2 create_bump  "*" 2 unassignBump  "*" 2 Flip Chip Methodologies chapter of the User Guide  "*" 2 Tools Menu chapter of the Menu Reference 
.RS  "*" 2 Flip Chip
.RE 
.RE
.P
