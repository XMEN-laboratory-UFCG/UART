.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH writeMicroBumpMappingFile  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBwriteMicroBumpMappingFile\fR \-  Writes the micro bump mapping file for Quantus and Voltus use
.SH Syntax \fBwriteMicroBumpMappingFile\fR  [-help]  <fileName>[-mergeWith {<filename1 filename2
...>}] 
.P Writes the micro bump mapping file for Quantus and Voltus use. Use this command after the aligned bump pair is created by readBumpLocation command. This command supports the embedded bump flow for hierarchical designs. 
.SH Parameters    "\fB-help\fR" Prints a brief description of the writeMicroBumpMappingFile command usage. For a detailed description of the command, use the man command:  man writeMicroBumpMappingFile  "\fB-mergeWith\fR" If there are more than two dies in the design, this command may be called more than one time. This option should be specified at the last time to merge the previously generated files.  "\fB<fileName>\fR" Specifies the file name. 
.SH Example
.RS  "*" 2 The following command creates a bump mapping file:  writeMicroBumpMappingFile tier2.map2 -mergeWith tier1.map  Here is an example of a bump mapping file, tier2.map2:  ###############################################################  # Generated by: Cadence Innovus 22.10-a007_1  # OS: Linux x86_64(Host ID sjfcl024)  # Generated on: Wed Apr 27 04:03:56 2022  # Design: die1  # Command: writeMicroBumpMappingFile tier2.map2 -mergeWith tier1.map  ###############################################################  # Format:  # SIGNAL: <Die Name>(<Module Name>) <Net name> <Pin name> <Die Name>(<Module Name>) <Net name> <Pin name>  # POWER/GROUND: <Die Name>(<Module Name>) <Net Name> <Bump Name> <Die Name>(<Module Name>) <Net Name> <Bump Name>  SIGNAL {  die1(DIE1) i_a[0] i_a[0] die2(DIE2) i_a[0] i_a[0]  die1(DIE1) i_a[1] i_a[1] die2(DIE2) i_a[1] i_a[1]  die1(DIE1) i_a[2] i_a[2] die2(DIE2) i_a[2] i_a[2]  die1(DIE1) i_a[3] i_a[3] die2(DIE2) i_a[3] i_a[3]  die1(DIE1) i_a[4] i_a[4] die2(DIE2) i_a[4] i_a[4]  die1(DIE1) i_a[5] i_a[5] die2(DIE2) i_a[5] i_a[5]  die1(DIE1) i_a[6] i_a[6] die2(DIE2) i_a[6] i_a[6]  die1(DIE1) i_a[7] i_a[7] die2(DIE2) i_a[7] i_a[7]  die1(DIE1) i_a[8] i_a[8] die2(DIE2) i_a[8] i_a[8]  die1(DIE1) i_a[9] i_a[9] die2(DIE2) i_a[9] i_a[9]  die1(DIE1) i_ceb i_ceb die2(DIE2) i_ceb i_ceb  die1(DIE1) i_d[0] i_d[0] die2(DIE2) i_d[0] i_d[0] 
.................................................... 
....................................................  }  POWER {  die1(DIE1) VDD frontBump_251 die2(DIE2) VDD backBump_296  die1(DIE1) VDD frontBump_252 die2(DIE2) VDD backBump_297  die1(DIE1) VDD frontBump_253 die2(DIE2) VDD backBump_298  die1(DIE1) VDD frontBump_254 die2(DIE2) VDD backBump_299  die1(DIE1) VDD frontBump_255 die2(DIE2) VDD backBump_300  die1(DIE1) VDD frontBump_256 die2(DIE2) VDD backBump_301 
....................................................... 
.......................................................  }  GROUND {  die1(DIE1) GND frontBump_226 die2(DIE2) VSS backBump_271  die1(DIE1) GND frontBump_227 die2(DIE2) VSS backBump_272  die1(DIE1) GND frontBump_228 die2(DIE2) VSS backBump_273  die1(DIE1) GND frontBump_229 die2(DIE2) VSS backBump_274  die1(DIE1) GND frontBump_230 die2(DIE2) VSS backBump_275  die1(DIE1) GND frontBump_231 die2(DIE2) VSS backBump_276  die1(DIE1) GND frontBump_232 die2(DIE2) VSS backBump_277  die1(DIE1) GND frontBump_233 die2(DIE2) VSS backBump_278  die1(DIE1) GND frontBump_234 die2(DIE2) VSS backBump_279 
....................................................... 
.......................................................  }
.RE 
.SH Related Information
.RS  "*" 2 readBumpLocation
.RE
.P
