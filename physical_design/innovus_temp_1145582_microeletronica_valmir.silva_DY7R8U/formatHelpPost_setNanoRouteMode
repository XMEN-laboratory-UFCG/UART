.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH setNanoRouteMode  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBsetNanoRouteMode\fR \-  Controls certain aspects of how the NanoRoute router routes the design. Use the getNanoRouteMode command to return the current settings for the setNanoRouteMode command
.SH Syntax \fBsetNanoRouteMode\fR  [-help]  [-extract_keep_fill_wires {true|false}]   [-reset]   [-route_adjust_auto_via_weight {true|false}]   [-route_allow_inst_overlaps {true|false}]  [-route_ignore_follow_pin_shapes {true|false}]   [-route_process_node <value>]  [-route_rc_extraction_corner <value>]   [-route_skip_analog {true|false}]   [-route_via_weight{<via_name> <via_weight
...>}]  [-route_detail_add_passive_fill_only_on_layers <layers>]  [-route_detail_allow_passive_fill_only_in_layers <layers>]  [-route_detail_antenna_eco_list_file <file_name>]  [-route_detail_auto_stop {true|false}]  [-route_detail_check_mar_on_cell_pin {true|false}]  [-route_detail_end_iteration <pass_number>]  [-route_detail_fix_antenna {true|false}]  [-route_detail_fix_antenna_on_secondary_pg_nets {true|false}]  [-route_detail_fix_antenna_with_gate_array_filler_mode {true|false}]  [-route_detail_merge_abutting_cut {true|false}]  [-route_detail_min_length_for_spread_wire {<layer_1 length_1
... layer_n length_n>}]  [-route_detail_min_length_for_widen_wire <value>]  [-route_detail_min_slack_for_opt_wire <value>]  [-route_detail_no_taper_in_layers "<bottom_layer_number>:<top_layer_number>"]  [-route_detail_no_taper_on_output_pin {true|false|auto}]  [-route_detail_on_grid_only none | false | true | all | {[wire [ml:mh]] | [via [ml:mh]]}]  [-route_detail_post_route_litho_repair {true|false}]  [-route_detail_post_route_spread_wire {auto| true | false | 0 | 0.25 | 0.5 | 1 }]  [-route_detail_post_route_swap_via {true | multiCut | false | none}]  [-route_detail_postroute_via_priority {auto | allNets | criticalNetsfirst | nonCriticalNetOnly}]  [-route_detail_post_route_via_pillar_effort {none | low | medium | high}]  [-route_detail_post_route_wire_widen {widen | shrink | none}]   [-route_detail_post_route_wire_widen_rule <rule_name>]  [-route_detail_search_and_repair {true|false}]  [-route_detail_signoff_effort {high | medium | low | auto | n}]  [-route_detail_stub_routing_in_first_layer {true|false}]   [-route_detail_use_multi_cut_via_effort {low | medium | high}]  [-route_number_fail_limit <integer>]   [-route_number_thread <number_processors>]   [-route_number_warning_limit <integer>]  [-route_third_party_data {true|false}]  [-route_high_freq_constraint_groups {order net match bus pair shield}]  [-route_high_freq_match_report_file <file_name>]   [-route_high_freq_num_reserved_layers <value>]  [-route_high_freq_remove_floating_shield {true|false}]   [-route_high_freq_search_repair {auto | false | true | only}]  [-route_high_freq_shield_trim_length <value>]  [-route_interposer_allow_diagonal_trunk {auto | true | false}]  [-route_interposer_interlayer_shielding_layers <value>]   [-route_interposer_interlayer_shielding_nets <value>]  [-route_interposer_interlayer_shielding_offsets <value>]  [-route_interposer_interlayer_shielding_widths <value>]   [-route_interposer_same_layer_shielding_net <net_name>]  [-route_interposer_same_layer_shielding_width_spacing {<width> <width>}]  [-route_interposer_trunk_routing_layers <value>]   [-route_interposer_trunk_routing_width_spacing {<width> <width>}]  [-route_add_antenna_inst_prefix <value>]  [-route_allow_pin_as_feedthru {true|TRUE|false|FALSE|none|NONE|output|input|inout, <bottomLayerNum>:<topLayerNum>}]  [-route_antenna_cell_name {"<cell_name>" | "<list_of_cell_names>"}]   [-route_concurrent_minimize_via_count_effort <value>]  [-route_connect_to_bumps {true | false}]  [-route_fix_clock_nets {true|false}]  [-route_route_clock_nets_first {true|false}]  [-route_eco_ignore_existing_route <value>]  [-route_enable_route_rule_si_limit_length <value>]   [-route_enforce_route_rule_on_special_net_wire {false | true | <special_net_name_list>}]  [-route_extra_via_enclosure <distance>]  [-route_honor_exclusive_region {true|false}]  [-route_honor_power_domain {true|false}]   [-route_ignore_antenna_top_cell_pin {true|false}]  [-route_antenna_diode_insertion {true|false}]  [-route_diode_insertion_for_clock_nets {true|false}]  [-route_relaxed_route_rule_spacing_to_power_ground_nets {<layer>:<spacing layer>:<spacing>}]  [-route_reserve_space_for_multi_cut {true|false}]   [-route_reverse_direction {(<lx ly ux u>y <bottom_layer>:<top_layer>)}]  [-route_selected_net_only {true|false}]   [-route_shield_crosstie_offset {<layerName>:<numTrack1> <layerName2>:<numTrack2>...}]  [-route_shield_report_skip_status {true|false}]  [-route_shield_stripe_layer_range <value>]  [-route_shield_tap_cell_insertion {true|false}]   [-route_shield_tap_cell_name <string>]  [-route_strictly_honor_1d_routing <value>]  [-route_strict_honor_route_rule {true | false | <bottomLayerNum>:<topLayerNum>| wire <bottomLayerNum>:<topLayerNum>}]   [-route_stripe_layer_range "<bottomLayerNum>:<topLayerNum>"]  [-route_tieoff_to_shapes "auto | stripe | ring | followpin | powergroundpin"]  [-route_trim_pull_back_distance_from_boundary {<layer>:<value
...>}]   [-route_trunk_with_cluster_target_size <integer>]  [-route_use_auto_via <value>]  [-route_with_eco {true|false}]   [-route_with_litho_driven {true|false}]  [-route_with_si_driven {true|false}]   [-route_with_timing_driven {true|false}]   [-route_with_trim_metal <value>]  [-route_with_via_in_pin {true| false | <bottomLayerNum>:<topLayerNum>}]   [-route_with_via_only_for_block_cell_pin <value>]  [-route_with_via_only_for_stdcell_pin {true| false | <bottomLayerNum>:<topLayerNum>}] 
.P Controls certain aspects of how the NanoRoute router routes the design. Use the getNanoRouteMode command to return the current settings for the setNanoRouteMode command. The setNanoRouteMode parameters affect the behavior of the following commands:
.RS  "*" 2 detailRoute  "*" 2 globalRoute  "*" 2 globalDetailRoute  "*" 2 routeDesign
.RE
.P Notes:
.RS  "*" 2 The Nanoroute Router honors litho routing halos (addRoutingHalo -lithoHalo). It only  allows planar connections to macro pins inside the litho routing halos. It does not allow any other wire or via insertion above and below the litho halo.  "*" 2 The NanoRoute Router enables off grid shielding when the default track is not available in order to optimize the routing resources. 
.RE 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes type and default information for each setNanoRouteMode parameter.  For a detailed description of the command and all of its parameters, use the man command: man setNanoRouteMode.  "\fB-extract_keep_fill_wires {true|false}\fR" When enabled, the NanoRoute Router imports metal fill wires so that RC extraction can calculate them.  Default: false  Data_type: bool  "\fB-reset\fR" Restores all parameters modified using setNanoRouteMode to their default settings. The -reset parameter must be the first parameter specified. If you specify -reset by itself, the software resets all setNanoRouteMode parameters to their default values. If you specify parameters after -reset, the software resets only those parameters to their default values.  Any values that do not already match the default value and are reset will be reported.  "\fB-route_add_antenna_inst_prefix <value>\fR" Specifies the prefix that is added in the diode inst names. These diodes are added to fix antennas during routing.  Default: " "    Data_type: string  "\fB-route_adjust_auto_via_weight {true|false}\fR" Allows auto tuning of internal via weight. It adjusts auto via weight for via swapping.
.RS  "*" 2 When set to true, it enables NanoRoute to auto tune internal via weight for double cut via ratio improvement.  "*" 2 When set to false, it disables NanoRoute to auto tune internal via weight and the via weight specified using the -route_via_weight parameter is honored for via swapping.
.RE   Note: NanoRoute does not swap the existing dcut via's to DFM via's.   Default: true  Data_type: bool  "\fB-route_allow_inst_overlaps {true|false}\fR" Specifies that instance overlap check will be skipped when this parameter is set to true.  Default: true  Data_type: bool  "\fB-route_allow_pin_as_feedthru {true|TRUE|false|FALSE|none|NONE|output|input|inout, <bottomLayerNum>:<topLayerNum>}\fR" Specifies that pins are allowed as feedthrough within the specified layer range.
.RS  "*" 2 true: Specifies that input/output/inout pins can be used as feedthrough.  "*" 2 false: Specifies that output/inout pins can be used as feedthrough.  "*" 2 none: Specifies that no pin is allowed as feedthrough.  "*" 2 output: Specifies that output pins can be used as feedthrough.  "*" 2 input: Specifies that input pins can be used as feedthrough.  "*" 2 inout: Specifies that all inout pins can be used as feedthrough.  "*" 2 <bottomLayerNum>:<topLayerNum>: Specifies the layer range that allows pins as feedthroughs.
.RE   For example, the following command allows feedthrough for M1 and M2 pins only.  setNanoRouteMode -route_allow_pin_as_feedthrough "true, 1:2"   Default: true  Data_type: enum  "\fB-route_antenna_cell_name {"<cell_name>" | "<list_of_cell_names>"}\fR" Specifies antenna diode cells to use during postroute optimization. The cells must have the same LEF SITE definition as the standard cells. Use this parameter with -route_antenna_diode_insertion.  Default: "" (empty string) If you do not specify a cell, the router uses a core macro of type ANTENNACELL specified in the LEF MACRO statement.  Data_type: string  "\fB-route_antenna_diode_insertion {true|false}\fR" Inserts and places antenna diode cells if there are available placement locations. By default, the NanoRoute router repairs antenna violations by changing layers (also called antenna stapling or layer hopping), but it can also repair antenna violations by inserting diode cells as close as possible to input gates to discharge current. The router inserts antenna diode cells even if filler cells are already placed. It can swap filler cells with antenna diode cells and fill the gap automatically if an antenna diode cell is not the same size as the filler cell it replaced.  To specify the diode cells, use -route_antenna_cell_name.  Default: false  Data_type: bool  "\fB-route_concurrent_minimize_via_count_effort <value>\fR" Specifies the effort level for reducing the total number of vias during routing. Use this parameter together with the -route_detail_use_multi_cut_via_effort parameter to control the effort toward reducing the total number of vias and the effort toward increasing the ratio of double-cut vias to single-cut vias concurrently with routing.  If you specify -route_detail_use_multi_cut_via_effort medium or high, the software sets the value of -route_concurrent_minimize_via_count_effort to medium unless you specify -route_concurrent_minimize_via_count_effort yourself. To realize further savings, set -route_concurrent_minimize_via_count_effort to high. This could further reduce the total via count up to 10 percent.  Note: If you specifysetDesignMode -flowEffort express, the software sets the value of -route_concurrent_minimize_via_count_effort to high.  Note: Results might vary with your design.  Specify one of the following parameters:
.RS  "*" 2 low: Reduces the total via count using low effort.  "*" 2 medium: Reduces total via count by 15 percent, with negligible runtime overhead. This is the default setting.  "*" 2 high: Reduces the total via count by 20 percent to 25 percent, with marginal runtime overhead.
.RE   Default: medium  Data_type: string  "\fB-route_connect_to_bumps {true | false}\fR" Enables bump to bump routing.  Default: false  Data_type: bool  "\fB-route_detail_add_passive_fill_only_on_layers <layers>\fR" Specifies the layers where passive fill will be added.  Default: ""(empty string)  Data_type: string   "\fB-route_detail_allow_passive_fill_only_in_layers <layers>\fR" When specified, allows passive fill only in layers.   Default: false  Data_type: string  "\fB-route_detail_antenna_eco_list_file <file_name>\fR" Specifies the file generated during process antenna repair that contains the list of diodes that were inserted. If you insert diodes during more than one detailed routing pass, the NanoRoute router creates a separate file for each pass and gives it a unique name. For example, if you use the default filename, the router creates the following files:
.RS  "*" 2 After the first detailed routing pass: nano_ant_diode.list  "*" 2 After the second detailed routing pass: nano_ant_diode.list1  "*" 2 After the third detailed routing pass: nano_ant_diode.list2
.RE   Default: ""(empty string)  Data_type: string  "\fB-route_detail_auto_stop {true | false}\fR" Controls whether NanoRoute continues routing if there are many violations. In highly congested designs, NanoRoute stops if the number of violations is too high. Specify false to continue routing until there is no improvement.    Note: -route_detail_auto_stop is false by default for 20nm designs and below.  Note: You should only override this setting when you are sure that NanoRoute will be able to resolve the violations.  There are several reasons due to which NanoRoute may find the design unrouteable and stop:
.RS  "*" 2 Congestion: Review the congestion map to identify hot spots. If the majority of the violations are centered on these hot spots then reduce the congestion in this area by reducing the placement density using partial placement blockages or by modifying the floorplan.  "*" 2 Pin Access Issue: If majority of violations are on Metal1 and Metal2, it can indicate pin access problems on standard cell pins. Review the violations at these pins and determine why they are occurring. For example, check if the blockage is too close to the pin, pin is off the routing grid, or a proper via is not defined which can be dropped to the pin.  "*" 2 Pins under Stripes: If the violations are occurring when trying to route to standard cells placed under stripes, then use the setPlaceMode -place_detail_preroute_as_obs command to treat these stripes as placement blockages.
.RE   Default: <true>   Data_type: bool  "\fB-route_detail_check_mar_on_cell_pin {true|false}\fR" Enables mar checking on used cell pins.  Default: false  Data_type: bool  "\fB-route_detail_end_iteration <pass_number>\fR" Specifies the last pass in a detailed routing step. To run postroute optimization and repair remaining violations, including process antenna violations, set this parameter to its default value using the following command:  setNanoRouteMode -reset -route_detail_end_iteration   When set to its default value, the router dynamically decides when to stop. However, when you specify -route_detail_end_iteration 0, the end iteration will be at 0.  Note:  Specifying a higher value than 20 for  -route_detail_end_iteration generally does not improve results.  Default: 0  Data_type: int  "\fB-route_detail_fix_antenna {true|false}\fR" Repairs process antenna violations by jumping layers (antennastapling). The router repairs process antenna violations if it can do so without creating DRC violations. The router might need to make several passes before repairing all antenna violations. Specify -route_detail_fix_antenna true to fix antenna violation on clock net during ccopt and routeDesign (clock eco).  Note: You must set this option to true explicitly. The default value is true if you have antenna information defined in the LEF, but the router fixes antenna violations only on data nets during routeDesign, globalDetailRoute, ordetailRoute.  Default: true  Data_type: bool  "\fB-route_detail_fix_antenna_on_secondary_pg_nets {true|false}\fR" Fixes the antenna violation on secondary pg nets.  Default: false  Data_type: bool  "\fB-route_detail_fix_antenna_with_gate_array_filler_mode {true|false}\fR" When enabled, the NanoRoute routers detects the GA filler flow and uses the GA filler diode cells for antenna violation fixing.  Default: false  Data_type: bool  "\fB-route_detail_merge_abutting_cut {true|false}\fR" Allows you to enable or disable the capability to merge cell cut shapes. When enabled, it merges two abutting cell cut shapes into a new one.   Default: true  Data_type: bool  "\fB-route_detail_min_length_for_spread_wire {<layer_1 length_1
... layer_n length_n>}\fR" Specifies the minimum length in microns for a wire segment of a net before the necessity or a jog to avoid OPC issues. Spreading wires further apart (creating jogs in the wires) helps avoid design rule violations, signal integrity problems, and yield loss caused by shorts in the wires.  This parameter supports the following values:
.RS  "*" 2 layer: Specifies the metal layer. The supported metal layer name is Mx, they are Metal1, Metal2, Metal3, etc.  "*" 2 length: Specifies the minimum length, in microns. The length value can be a floating number, default, or skip. 
.RS  "*" 2 The default value is 0, it means wire spreading will determine the threshold automatically.  "*" 2 The skip value means there is no wire spreading on this layer.
.RE 
.RE   Note: You should specify the value for each metal layer. To get the number of metal layers used in the design, use db command (dbGet head.layers.name).  Note: Turn wire spreading on or off with -route_detail_post_route_spread_wire  For example, when you specify the following command, no wire spreading is done on layer Metal1. For layer Metal2, the wire spreading value is set to 0 signifying that wire spreading will determine the threshold automatically. Similarly, for layers Metal3, Metal4, Metal5, and Metal6 the wire spreading length is set to 2.0.  setNanoRouteMode -route_detail_min_length_for_spread_wire {Metal1 skip Metal2 0 Metal3 2.0 Metal4 2.0 Metal5 2.0 Metal6 2.0 }  Default: 0  Data_type: string  "\fB-route_detail_min_length_for_widen_wire <value>\fR" Specifies the minimum length in microns for a wire segment of a net before the segment is a candidate for widening. Wires are widened by an amount defined by a nondefault rule. They are not widened unless they meeting the following criteria:
.RS  "*" 2 Timing is not adversely affected  "*" 2 Routing resources are available  "*" 2 No overflow is created  "*" 2 No design rule or process antenna violations are created
.RE   Widening wires helps avoid design rule violations, signal integrity problems, and yield loss.  Note: To enable this parameter, you must also include a wide wire nondefault rule in the LEF file and specify the   -route_detail_post_route_wire_widen_rule true parameter.  Default: 1  Data_type: float  "\fB-route_detail_min_slack_for_opt_wire <value>\fR" Specifies the minimum slack on pins associated with nets that are candidates for wire spreading or wire widening. Using this parameter reduces the timing impact of wire spreading, wire widening, and via swapping, and helps reduce congestion and the yield loss due to shorts and opens.  Note: To enable this parameter, you must also specify -route_with_timing_driven true.  Wire spreading and wire widening use the minimum slack value differently. While wire spreading only works for timing critical nets where the worst setup slack is less than the minimum slack value, wire widening only works for non-timing critical nets where the worst setup slack is greater than the minimum slack value.  You can use the -route_detail_min_slack_for_opt_wire parameter to reduce the timing closure effort during post-route ECO. NanoRoute will replace via to multi-cut via on non-critical nets, if a violation does not occur.  Default: 1  Data_type: float  "\fB-route_detail_no_taper_in_layers "<bottom_layer_number>:<top_layer_number>"\fR" Prohibits the detailed router from tapering in the specified layer range, creating non-default-width wires in that range.  <bottom_layer_number>:<top_layer_number> signifies the layer range format.  Default: "" (empty string)  Data_type: string  "\fB-route_detail_no_taper_on_output_pin {true|false|auto}\fR" Prohibits the detailed router from tapering at standard cells, macro cells, and block output pins.  Note: The default value of -route_detail_no_taper_on_output_pin is auto for 32nm and below nodes.   Default: false  Data_type: ternary  "\fB-route_detail_on_grid_only none | false | true | all | {[wire [ml:mh]] | [via [ml:mh]]}\fR" Controls the routing of the objects, wires, and vias in relation to the user-defined routing tracks.  
.RS  "*" 2 On grid wire means that the center of the wire is on the preferred routing track.  "*" 2 On grid via means that the center of the via is on the intersection of preferred routing tracks.
.RE   Note: A preferred routing track is the track which has the same direction as that of the metal routing direction defined in the LAYER section in LEF.
.RS  "*" 2 When there are off-grid objects on fully-routed data, NanoRoute skips those nets and issues a warning message.  "*" 2 When there are fixed off-grid objects, NanoRoute skips those nets and issues a warning message.  "*" 2 When there are non-fixed off-grid objects, NanoRoute deletes those nets and issues a warning message.
.RE   Specify one of the following arguments:
.RS  "*" 2 all: Specifies that all routing objects (vias and wires) have to be on the preferred and non-preferred routing tracks.  It forces all routing objects to be on grid.  "*" 2 none: Specifies that the routing objects (vias and wires) can be off-grid. It does not force routing objects to be on grid
. They can go off-grid depending on other restrictions.  "*" 2 via [ml:mh]: Specifies that the center of the vias must be at the intersection of preferred routing tracks. If ml and mh are specified, all the vias between ml and mh must be at the intersection of preferred routing tracks.  For example, via [1:3] means all via12 must be at the intersection of preferred routing tracks of layer Metal1 and Metal2 and all via23 must be at the intersection of preferred routing tracks of layer Metal2 and Metal3.  "*" 2 wire [ml:mh]: Specifies that the center of the wire must be on preferred routing tracks. When a wire makes a turn on the non-preferred direction, the center of the wire might not fall on any routing tracks. If ml and mh are specified, all the center of the wires in between those metal layers ml and mh must be on the preferred routing tracks.  For example, wire [1:3] means the center of the Metal1, Metal2, and Metal3 wires must be on the preferred routing tracks of Metal1, Metal2, and Metal3.  "*" 2 false: For backward compatibility purpose, the -route_detail_on_grid_only parameter also takes the value of false. This is equivalent to 'none'.  "*" 2 true: Specifies that all wires have to be on the preferred and non-preferred routing tracks, but vias can be off the preferred and non-preferred routing tracks.
.RE   Note: Block pins can be accessed by planar off-track wires.  Default: none  Data_type: string  "\fB-route_detail_post_route_litho_repair {true|false}\fR" Corrects bridging, necking, and line-end shortening problems caused by lithography. Takes the severity of the problems into account and fixes the high-severity problems first. Prior to running the router with this parameter, import a hotspot interface format (HIF) file with loadViolationReport.  Default: false  Data_type: bool  "\fB-route_detail_post_route_spread_wire {auto| true | false | 0 | 0.25 | 0.5 | 1 }\fR" Spreads routing, post route, by the percentage of the track. The router moves the wires without moving the vias. Specifying false for this parameter signifies no spreading, while specifying true signifies 0.5 / 1 track spreading by default for all nodes. The use of true and false is not needed as a value greater than 0 and less than equal to 1 (0<x=<1) activates the spreading. Specifying this parameter will not increase the overall routing run-time much but helps avoid yield loss caused by shorts and improve the timing as well.  Specify one of the following:
.RS  "*" 2 auto: Spreading is on if the timing effort is set to high (setDesignMode -flowEffort express). Otherwise it is off.  "*" 2 true: 0.5 / 1 track spreading.  Set -route_detail_post_route_spread_wire to true if you want to spread.  "*" 2 false: no spreading  "*" 2 0.25: 0.25 / 0.5 / 1 track spreading  "*" 2 0.5: 0.5 / 1 track spreading  "*" 2 1: 1 track spreading
.RE   Note: To turn off this feature, set setNanoRouteMode -route_detail_post_route_spread_wire to false explicitly.  To call wire spreading explicitly, set -route_detail_post_route_spread_wire to true and call routeDesign -wireOpt.  Post route wire spreading automatically avoids fractional spreading for DPT designs.   If -route_detail_post_route_spread_wire is enabled in 20nm designs and below, only 1 track wire spreading is done on DPT layers.  Default: auto  Data_type: string  "\fB-route_detail_post_route_swap_via {true | multicut | false | none}\fR" Swaps single-cut vias for multiple-cut vias or reverses swapping on critical nets in a fully routed design, so that multiple-cut vias are swapped for single-cut vias on those nets. It swaps single-cut vias to multi-cut vias including vias of non-default nets. However, while swapping multi-cut vias to single cut vias, NanoRoute does not swap the vias of non-default rule nets. In timing-driven routing, does not swap vias if doing so would negatively impact timing.  A net with a pin on a critical path is considered a critical net if the pin slack, plus the margin defined by the -route_detail_min_slack_for_opt_wire parameter, is less than or equal to 0. Use this parameter with the routeDesign command. You do not have to specify a value for this parameter when you run the following command, because the software does so automatically:  routeDesign -viaOpt  Note: This parameter is not enabled concurrently with postroute wire widening or wire spreading. In addition, the software does not perform via swapping if --route_detail_post_route_litho_repair true is specified.  Specify one of the following:
.RS  "*" 2 true: Swaps all nets. The nets with attributes will get double cut and DFM precedence for others. Its weight can be specified with -route_via_weight.   "*" 2 multicut: All nets will be swapped with dcut precedence.  "*" 2 none: Does not swap vias.   "*" 2 false: Only nets with attributes are swapped.
.RE   Default: false  Data_type: string  "\fB-route_detail_postroute_via_priority {auto | allNets | criticalNetsfirst | nonCriticalNetOnly}\fR" Sets the net priority for postRoute via swapping based on timing.
.RS  "*" 2 auto: Specifies the current behavior of the software, which is to detect the node and timing files to determine whether to do criticalNetsFirst or nonCriticalNetOnly. This is the default behavior.  "*" 2 allNets: Swaps single-cut vias for multiple-cut vias on all nets.  "*" 2 criticalNetsFirst: Specifies that swapping should be performed first on timing critical nets and then on other nets. This option is recommended for process nodes below 32nm.  "*" 2 nonCriticalNetOnly: Specifies that swapping should not be performed on timing critical nets. This option is recommended for 32 nm and above process nodes.
.RE   Default: auto  Data_type: string  "\fB-route_detail_post_route_via_pillar_effort {none | low | medium | high}\fR" Specifies the effort levels for adding via pillars. Specify one of the following:
.RS  "*" 2 none: Adds via pillars only during routing that are required for EM constraints.  "*" 2 low: Adds via pillars during timing-driven global routing where they help in timing and do no impact congestion  "*" 2 medium: Adds via pillars more aggressively during routing.  "*" 2  high: Adds via pillars throughout routing to maximize via pillar impact on timing and area.
.RE   Default: low  Data_type: string  "\fB-route_detail_post_route_wire_widen {widen | shrink | none}\fR" Applies the rule specified by the -route_detail_post_route_wire_widen_rule parameter to widen or shrink wires. Use this parameter with the routeDesign command.   Note: This parameter is not enabled concurrently with postroute via swapping.  Note: Wire widening is not performed on layer Metal1.  Specify one of the following:
.RS  "*" 2 widen: During timing-driven routing, widens only non-critical nets; otherwise widens as many nets as possible that are covered by the non-default rule for widening wires.  "*" 2 shrink: During timing-driven routing, shrinks only critical nets; otherwise shrinks as many nets as possible that are covered by the non-default rule for widening wires.  "*" 2 none: Turns off this parameter, so the router does not widen or shrink wires.
.RE   Default: none  Data_type: string  "\fB-route_detail_post_route_wire_widen_rule <rule_name>\fR" Specifies the non-default rule for widening wires. The rule is specified in the LEF file. Use this parameter with the routeDesign command.   Default: "" (empty string)  Data_type: string  "\fB-route_detail_search_and_repair {true|false}\fR" Runs a search-and-repair step after the initial detailed routing (end iteration 20).   Tip: Specify false for this parameter and run detailed routing to determine quickly if the design is routable.  Default: true  Data_type: bool  "\fB-route_detail_signoff_effort {high | medium | low | auto | n}  \fR" Specifies when to skip fixing violations related to fixed objects. The default value is high. In this mode, the software will ignore violations related to fixed objects after 20 detail route iterations and will continue with post-route operations.
.RS  "*" 2 When set to medium, the software will ignore any violations related to fixed objects after detail route iteration number 15.  "*" 2 When set to low, the software will ignore any violations related to fixed objects after detail route iteration number 5 and it will also skip post-route operations.  "*" 2 When set to auto, the software will automatically detect when to ignore violations related to fixed objects and it will also skip post-route operations.
.RE   You can also specify the number of iterations or "n". When the iteration number is specified, the software will ignore violations related to fixed objects after the specified number of detail route iteration and will also skip post-route operations.  Note: n must be between 3 and 20.  Default: high  Data_type: string  "\fB-route_detail_stub_routing_in_first_layer {true|false}\fR" Specifies that minimum routing should be done on the first routing layer defined in the LEF.  Default: false  Data_type: bool  "\fB-route_detail_use_multi_cut_via_effort {low | medium | high}\fR" Specifies the effort level toward increasing the ratio of double-cut vias to single-cut vias concurrently with routing. Increasing the effort level increases the double-cut via ratio and decreases the total number of vias in the design, which means that it also decreases the number of single-cut vias. The lower the number of single-cut vias, the better the yield will be. After routing with this parameter specified, you can add more double-cut vias or larger overhang vias by using therouteDesign command.  Specify one of the following:
.RS  "*" 2 low: Specifies normal routing, so the router uses single-cut vias only.  "*" 2 medium: Balances the need for a high double-cut viaration with run time and congestion. Specifying this parameter increases the run time somewhat compared with the low parameter. The router inserts some double-cut vias, although not as many as if the high parameter were specified.  "*" 2 high: Specifies the highest yield possible for vias, as the router puts its best effort toward achieving the highest possible double-cut via ratio at the expense of run time and congestion.
.RE   Default: low  Data_type: string  "\fB-route_diode_insertion_for_clock_nets {true|false}\fR" Inserts diodes to repair process antenna violations on clock nets that are in the regular net section of the DEF file.  Default: false  Data_type: bool  "\fB-route_eco_ignore_existing_route <value>  \fR" When specified, the selected net will be routed with highest priority by ignoring existing routes in post-route mode.
.RS  "*" 2 all: Ignores all other nets in the design that are not selected, including clock, secondary PG, and signal nets.  "*" 2 signal: Ignores only other signal nets that are not selected, but honors clock and secondary PG nets.
.RE   For example, the following commands select and route a list of nets by ignoring only other signal nets, and considers secondary PG and clock nets during routing. After that, a second ecoRoute is run to fix DRC violations:  selectNet {net1 net2 net3}  setNanoRouteMode -route_selected_net_only true  setNanoRouteMode -route_eco_ignore_existing_route signal  ecoRoute  setNanoRouteMode -reset -route_selected_net_only  setNanoRouteMode -reset -route_eco_ignore_existing_route  verify_drc -limit 0  ecoRoute   Default:    Type: string  "\fB-route_enable_route_rule_si_limit_length <value>\fR" Use MAR wire length as NDR PRL requirement for metal spacing check.  Default: false  Data_type: string  "\fB-route_enforce_route_rule_on_special_net_wire {false | true | <special_net_name_list>}\fR" Specifies that non-default rule will be enforced on all special wire segments of specified nets.  Specify one of the following parameters:
.RS  "*" 2 false: When specified, the non-default rule is not enforced on any wire segment of any special net.  It is the default value.  "*" 2 true:  When specified, the non-default rule is enforced on all wire segments of all special nets (with non default rules attached).  "*" 2 specified_special_net_list:  When specified, the non-default rule is enforced on all wire segments of those specified special nets.
.RE   Default: false  Data_type: string  "\fB-route_extra_via_enclosure <distance>\fR" Specifies an extra via enclosure to use when connecting to block pins and special wires. To center vias for via access, specify a value that is equal to one-half the width of the largest pin or wire. An extra enclosure of this size forces NanoRoute to connect tie-high and tie-low nets to the center of power routes.  Default: 0 (microns)  Data_type: float  "\fB-route_fix_clock_nets {true|false}\fR" Specifies whether to maintain the current status of clock nets when the routeDesign command runs or change the status to ROUTED.
.RS  "*" 2 If you specify true for this parameter, the routeDesign command does not change the status of clock nets.  "*" 2 If you do not specify this parameter (or you specify false for this parameter), the routeDesign command  changes the status of clock nets changes to ROUTED.
.RE   Note: The settings of this parameter apply to the routeDesign command only. They do not impact the globalRoute, detailRoute, or globalDetailRoute commands.  Default: false   Data_type: bool  "\fB-route_high_freq_constraint_groups {order net match bus pair shield}\fR" Routes only the specified constraint groups. The constraint groups can be -  net match bus pair shield.  Note: You can add "order" in front to control the route order. If order is present, the NanoRoute high frequency router will honor the order, if not, the router will determine the order.  Default: " "   Data_type: string  "\fB-route_high_freq_match_report_file <file_name>  \fR" Specifies the name of the match report file.  Default: " "    Data_type: string  "\fB-route_high_freq_num_reserved_layers <value>  \fR" Specifies the number of metal layers to reserve for high frequency routing above the standard cell area so that routing has more resources to access  standard cell pins.  Default: 1    Data_type: int  "\fB-route_high_freq_remove_floating_shield {true|false}  \fR" Removes floating shield segments for high frequency nets.  Default: false   Data_type: bool  "\fB-route_high_freq_search_repair {auto | false | true | only}  \fR" Runs search and repair to remove violations.  Default: auto  Data_type: string  "\fB-route_high_freq_shield_trim_length <value>\fR" Specifies the shielding wire length. All shielding wires longer than the specified value are preserved by NanoRoute for high frequency nets.  Default: 0  Data_type: float  "\fB-route_honor_exclusive_region {true|false}  \fR" When set to true, it enables the NanoRoute router to honor exclusive region routing.  Default: true  "\fB-route_honor_power_domain {true|false}\fR" Routes nets without crossing power domains.
.RS  "*" 2 If a net connects pins that all belong to one power domain, the software tries to route the net within that power domain. If completing the routing is not possible without breaking the rules, due to congestion for example, completes the routing and issues a warning message.
.RE
.RS  "*" 2 If a net connects pins that belong to different power domains, the software tries to route the net within the involved power domains, without crossing over into other power domains that do not include any of the pins in the net. If completing the routing is not possible without breaking this rule, completes the routing and issues a warning message.
.RE   Note: You must specify a power domain before using this parameter.  Default: false  Data_type: bool  "\fB-route_ignore_antenna_top_cell_pin {true|false}\fR" If true, ignores any process antenna data from external I/O pins (e.g. DEF PIN ANTENNA* data), so only the routing and antenna data from cells inside the design are used to find and repair local antenna violations.  This is most commonly used with methodologies that insert diodes at the boundary pins (either inside the block or at the next level up), or in bottom-up flows where the block is routed, updated antenna data is created with the verify_antenna command, and then passed up to the top-level in an updated block abstract for the top-level to resolve any violations with added diodes or layer-hops.  If false, the external IO antenna data is used to find and repair violations.  This option will add protection diodes if needed to any external output/inout IOs that have antenna data that requires protection (e.g. have gate area), and will include the effects of external antenna data when finding and fixing local antenna violations. This is used when the user has antenna budgets added to the external IOs that estimate the worst-case top-level routing and gate-areas that needs protection inside this block.  Currently these types of antenna budgets can only be added with defIn or oaIn.  Default: true  Data_type: bool  "\fB-route_ignore_follow_pin_shapes {true|false}\fR" Ignores follow pin via shapes.  Default: false  Data_type: bool  "\fB-route_interposer_allow_diagonal_trunk {auto | true | false}  \fR" Allows you to control the trunk patterns in interposer routing.
.RS  "*" 2 auto: Allows the routing to decide the diagonal or straight trunk patterns based on the routing resources.  "*" 2 true: Enables diagonal trunk in interposer routing.  "*" 2 false: Disables diagonal trunk in interposer routing.
.RE   Default: " "  Data_type: string  "\fB-route_interposer_interlayer_shielding_layers "<layer_name direction> <layer_name1>:<layer_name2> <direction>
..."\fR" Specifies the signal layers that require shielding along with the direction - top, bottom, both. By default, all routing layers (used by current routing command) are shielded from bottom.  For example, the following command specifies that the M2/M3/M4 signal layers will be shielded from the top, M7 from the bottom, and M9 will be shielded from both sides:  setNanoRouteMode -route_interposer_interlayer_shielding_layers M2:M4 top M7 bottom M9 both  Default: " "  Data_type: string  "\fB-route_interposer_interlayer_shielding_nets "<layer_name1>:<layer_nameN> <net_name>
..."\fR" Specifies the inter-layer shielding nets.   For example, the following command specifies that the M3/M4/M5/M6 shielding net name is VSS and the M8/M9/M10 shielding net name is VDD:  setNanoRouteMode -route_interposer_interlayer_shielding_nets M3:M6 VSS M8:M10 VDD  Default: " "  Data_type: string  "\fB-route_interposer_interlayer_shielding_offsets "<layer_name offset> <layer_name1>:<layer_name2> <offset>
..."\fR" Specifies the center-to-center offset values between the shielding and signal wires. By default, all routing layers (used by current routing command) have an offset value of 0.  For example, the following command specifies that the offset value is 1.1 um between the M1 shielding wire and signal wire and the offset value is 2.2 um between M2:M3 shielding wire and signal wire:  setNanoRouteMode -route_interposer_interlayer_shielding_offsets M1 1.1 M2:M3 2.2   Default: " "  Data_type: string  "\fB-route_interposer_interlayer_shielding_widths "<layer_name width> <layer_name1>:<layer_name2> <width>
..."\fR" Specifies the inter-layer shielding widths. By default, all routing layers (used by current routing command) are shielded by the default width wires.  For example, the following command specifies that the shielding M1 wires width is 1.1 um, shielding M2/M3 wires width is 2.2 um:  setNanoRouteMode -route_interposer_interlayer_shielding_widths M1 1.1 M2:M3 2.2  Default: " "  Data_type: string  "\fB-route_interposer_same_layer_shielding_net <net_name>  \fR" Specifies the same-layer shielding nets.  For example, the following commands specifies that the  M1/M3/M5 shielding net name is VSS:  setNanoRouteMode -route_interposer_trunk_routing_layers {M1 M3 M5}  setNanoRouteMode -route_interposer_same_layer_shielding_net {VSS}   Default: " "  Data_type: string  "\fB-route_interposer_same_layer_shielding_width_spacing {<width> <width>}\fR" Specifies the same-layer shielding widths.  For example, the following commands specify that the shielding width space between M1/M3/M5 is 0.6 and 1.2:  setNanoRouteMode -route_interposer_same_layer_shielding_width_spacing {0.6 1.2}  Default: " "  Data_type: string  "\fB-route_interposer_trunk_routing_layers <value>  \fR" Specifies the trunk routing layers.  For examples, the following command sets layers M1, M3, and M5 as the interposer trunk routing layers.  setNanoRouteMode -route_interposer_trunk_routing_layers {M1 M3 M5}  Default: " "  Data_type: string  "\fB-route_interposer_trunk_routing_width_spacing {<width> <width>}\fR" Specifies the trunk routing width spacing.  For example,  setNanoRouteMode -route_interposer_trunk_routing_width_spacing {1.0 1.0}  Default: " "  Data_type: string  "\fB-route_number_fail_limit <integer>  \fR" Specifies the maximum number of command fails allowed. In interactive mode, if a command fails you can continue with the next command. But in batch mode, if one command fails, the script stops at the failed command, however you can increase the fail limit to let it continue.  Default: 1  Data_type: int  "\fB-route_number_thread <number_processors>\fR" Note: This parameter is included for backward compatibility. Cadence recommends that you use the setMultiCpuUsage command to specify the number of threads in multiple-CPU processing.  Specifies the maximum number of threads to use in multi-threading. Generally, using more threads decreases the run time. Specify this parameter before running any routing commands. There is no absolute limit to the number of threads the router can use, however, Cadence recommends that you do not specify more threads than the number of CPUs available.  The router does not necessarily use the number of threads you specify - it determines the optimal number up to the value you specify. A small design generally uses fewer threads than a large design.  Default: 1  Data_type: int  Note: To enable a value greater than 1 for this parameter, you must have licenses available for the additional threads.  "\fB-route_number_warning_limit <integer>\fR" Specifies the maximum number of warning messages for any one command reported to the log file. After reaching this number, the router continues processing, but does not report warnings for this command.  Default: 20   Data_type: int  "\fB-route_process_node <value>\fR" Specifies the  process node. This parameter is an umbrella option to set the process related settings for routing. It supports the following values:
.RS  "*" 2
.RS  "*" 2 S2: Sets the Samsung 2nm process related settings.  "*" 2 N2: Sets the TSMC 2nm process related settings.  "*" 2  N2X: Sets the TSMC N2X process related settings.  "*" 2 S3: Sets the Samsung 3nm process related settings.
.RE
.RS  "*" 2  N3: Sets the TSMC 3nm process related settings.  "*" 2 N3E: Sets the TSMC N3E process related settings.  "*" 2  S4 : Sets the Samsung 4nm process related settings.  "*" 2 I5 : Sets the INTEL 5nm process related settings.  "*" 2  N6: Sets the TSMC 6nm process related settings  "*" 2 C7: Sets the SMIC 7nm process related settings.  "*" 2 G7: Sets the GlobalFoundries 7nm process related settings.  "*" 2  I7 : Sets the INTEL 7nm process related settings.  "*" 2  N7: Sets the TSMC 7nm process related settings.  "*" 2 S7: Sets the Samsung 7nm process related settings.  "*" 2 I10: Sets the ICF 10nm process related settings.  "*" 2 N10: Sets the TSMC 10nm process related settings.   "*" 2 SU10: Sets the Samsung 10LPU process related settings.  "*" 2 S11: Sets the Samsung 11nm process related settings.  "*" 2 G12: Sets the GlobalFoundries 12nm process related settings.  "*" 2 N12: Sets the TSMC 12nm process related settings.  "*" 2 G14: Sets the GlobalFoundries 14nm process related settings.  "*" 2 N22: Sets the TSMC 22nm process related settings.
.RE 
.RE   Note: Some advance process nodes may have minimum width pins smaller than the default width defined in the LEF. For such cases, the NanoRoute Router automatically tapers from the default width to the min width pin.    Default: " "  Data_type: string  "\fB-route_rc_extraction_corner <value>\fR" Specifies the RC extraction corner to use in routing. This helps in better resistance calculation.  Default: " "  Data_type: string  "\fB-route_relaxed_route_rule_spacing_to_power_ground_nets {<layer>:<spacing layer>:<spacing>}\fR" Relaxes the spacing requirement from NDR spacing for the layers. <Layer_spacing> signifies a distance in microns (per layer) of how close any net with NDR can get to to the power/ground stripes.  For example,  setNanoRouteMode -route_strict_honor_route_rule true  setNanoRouteMode -route_relaxed_route_rule_spacing_to_power_ground_nets {metal1:0.04 metal2:0.04 metal3:0.04 metal4:0.04 metal5:0.04}  It only works for PG usage net and relaxes the NDR requirement to the specified spacing. The specified spacing should be greater than the min_spacing and less than the hard_ndr_spacing.  Default: none  Data_type: string  "\fB-route_reserve_space_for_multi_cut {true|false}\fR" Reserves space to insert multicut vias in postroute stage. This option has to be set before routing. After routing with this parameter specified, you can add double-cut vias or larger overhang vias by using therouteDesign -viaOpt command.  Note: -route_reserve_space_for_multi_cut is true by default for 32nm designs and below.  Default: false  Data_type: bool  "\fB-route_reverse_direction {(<lx ly ux u>y <bottom_layer>:<top_layer>)}\fR" Reverses the preferred routing direction in the specified area or layer. You can specify one or more areas.  Note: <bottom_layer> and <top_layer> can be either layer names or layer routing IDs.  Note: Changing the routing direction can conflict with the power planning and pin access for macros and standard cells. It can also add congestion that may impact the runtime and result in violations. Cadence recommends that you use caution when using this parameter.  Default: " "  Data_type: string  "\fB-route_route_clock_nets_first {true|false}\fR" Detects whether clock nets require ECO routing after the routeDesignsuper command checks whether the existing clock nets were fully or partially routed with the NanoRoute router and reroutes them before routing the remaining nets. If the existing clock nets were not routed with NanoRoute, routeDesign skips routing on those nets.  Default: true  Data_type: bool  "\fB-route_selected_net_only {true|false}  \fR" Specifies whether NanoRoute routes all nets at once or routes selected nets only. To route critical nets as short as possible, select the critical nets and set this parameter to true. NanoRoute does the following:
.RS  "*" 2 Removes incomplete nets unless they are marked + FIXED or have a -skip_routing net attribute.
.RE
.RS  "*" 2 Routes the remaining selected nets.
.RE   Note: To select a net, use the selectNet command or click the net in the design display window.  Default: false  Data_type: bool  "\fB-route_shield_crosstie_offset {<layerName>:<numTrack1> <layerName2>:<numTrack2>...}  \fR" Specifies the offset in terms of number of tracks for adding crossties. It enables you to control the starting track for adding crossties. Default is 0 offset for all layers.  Default: " "  Data_type: string  "\fB-route_shield_report_skip_status {true|false}  \fR" Generates a report file containing a list of nets that have been skipped for shielding.  Default: false  Data_type: bool  "\fB-route_shield_stripe_layer_range <value>\fR" Specifies the target layer range of stripes for tie net connection.   Default: " "  Data_type: string  "\fB-route_shield_tap_cell_insertion {true|false}\fR" Specifies the tap cell names for shielding.  Default: " "  Data_type: string  "\fB-route_shield_tap_cell_name <string>  \fR" Specifies the tap cell names for shielding.  Default: " "  Data_type: string  "\fB-route_skip_analog {true|false}\fR" Skips routing nets or pins marked + USE ANALOG in the DEF file or where signalType modified to analog in the OA DB. Specify this parameter for NanoRoute to skip the routing of nets with Analog Signal Type.  Default: false  Data_type: bool  "\fB-route_strictly_honor_1d_routing {true | false | <bottomLayerNum>:<topLayerNum>}\fR" When specified, the NanoRoute router strictly honors 1d routing. This enables you to turn off jog routing on a per layer basis.  Default: false  Data_type: string  "\fB-route_strict_honor_route_rule {true | false | <bottomLayerNum>:<topLayerNum>| wire <bottomLayerNum>:<topLayerNum>}]   \fR" Uses nondefault spacing rules for nondefault wires.  Note: The router tapers wires and uses default vias even when this parameter is set to true.  You define nondefault routing rules in the NONDEFAULTRULE statement of the LEF file. Specify one of the following arguments:
.RS  "*" 2 false: Specifies that the nondefault rule (NDR) spacing is a soft rule. In congested areas NanoRoute may need to use the extra NDR spacing to meet the minimum foundry rule set.
.RE
.RS  "*" 2 true: Specifies that the nondefault rule spacing is a hard rule. NanoRoute will attempt to honor the requested NDR spacing irrespective of resource availability.
.RE
.RS  "*" 2 <bottomLayerNum>:<topLayerNum>: Specifies that the nondefault rule spacing is a hard rule for all the layers specified in the layer range.
.RE
.RS  "*" 2 wire <bottomLayerNum>:<topLayerNum>: Specifies that the nondefault rule spacing is a hard rule for the wire but not the via metal to enable better DFM via optimization.
.RE   For example,
.RS  "*" 2 setNanoRouteMode -route_strict_honor_route_rulee 3:6  Specifies that the NDR spacing will be used in layers Metal3, Metal4, Metal5, and Metal6 for wire and via metal.
.RE
.RS  "*" 2 setNanoRouteMode -route_strict_honor_route_rule wire 3:6  Specifies that the NDR spacing will be used in Metal3, Metal4, Metal5, and Metal6 for wire and not via metal.
.RE   Note: Setting the rule to false will attempt to honor the NDR rule and allow short hot spots without detouring. If you set the rule to true (hard rule) we recommend you work more on minimizing the congested areas to preserve the NDR topology.  Default: false  Data_type: string  "\fB-route_stripe_layer_range "<bottomLayerNum>:<topLayerNum>"\fR" Specifies the range of routing layers for stripes.  Default: "" (empty string)  Data_type: string  "\fB-route_third_party_data {true|false}\fR" When enabled, NanoRoute supports third-party data as input. It accepts non-DEF connectivity models, multiple NDRs per net, and other third-party structures in order to enable ECO routing on non-native data.   Note: Since the third-party data uses DEF data types for different purposes and is formed for a completely different use model, it is important to translate it into Cadence types. With proper setup Innovus accepts third-party data for ECO Routing.   Default: false  Data_type: bool  "\fB-route_tieoff_to_shapes "auto | stripe | ring | followpin | powergroundpin"  \fR" Specifies the target to special wire shapes or target instance pin for tie net connection. Specify one of the following arguments:
.RS  "*" 2 auto: Specify auto to target special wire shapes, including stripe, ring, and standard cell followpin.  "*" 2 stripe: Specify stripe to target stripes only. Stripes are the special wiring used for creating the power mesh.  "*" 2 ring: Specify ring to target only rings.  The power mesh along the macro boundary forms a ring. If it is in a macro placed in the design, only exposes power ring-pin shapes. When power stripes are added across the macro, they connect to each side of the ring-pin but do not go inside the ring.  "*" 2 followpin: Specify followpin to target standard cell followpin only.  Followpin is the special wiring used for connecting standard cells to power mesh.  "*" 2 powergroundpin: Specify powergroundpin to target the power and ground pin of the instances only.  "*" 2 auto powergroundpin: Specifies the target to special wire shapes or target instance pin for tie net.
.RE   Note: The target shapes can be specified together. The value auto can only be specified with powergroundpin, since the other values stripe, ring, and followpin are included in auto.  For example:
.RS  "*" 2 The following command signifies that it can tie to followpin or stripe.  -route_tieoff_to_shapes "followpin stripe"  "*" 2 The following command signifies that it can tie to followpin or power ground pin  -route_tieoff_to_shapes "followpin powergroundpin"  "*" 2 The following command signifies that it can tie to stripe or power ground pin  -route_tieoff_to_shapes "stripe powergroundpin"
.RE   Note: Using "auto stripe" is not recommended as stripe is included by auto.  Default: auto  Data_type: string  "\fB-route_trim_pull_back_distance_from_boundary {<layer>:<value
...>}\fR" Specifies the boundary pullback value per layer for trim metal layers. The pullback value signifies how far the trim metal router brings signals and fill metal to a boundary (for example, block edge) in the absence of any obstructions.  Default: " "  Data_type: string  "\fB-route_trunk_with_cluster_target_size <integer>\fR" Controls the routing pattern of nets with the trunk pattern attribute. By default, the router connects each pin in nets on which you have applied setAttribute -pattern trunk directly to the trunk of the special net; use this parameter to change the routing pattern for those nets:
.RS  "*" 2 Specify 0 to route nets with the trunk pattern specified with a Steiner tree pattern instead of a trunk pattern.  "*" 2 Specify an integer greater than 1 to route the nets with a fishbone pattern. In a fishbone pattern, several pins in a column are clustered together before connecting to the special net. The value of this parameter represents the approximate number of pins in each cluster.
.RE   Default: 1  Data_type: int  "\fB-route_use_auto_via <value>\fR" When specified, it allows the use of internal generated vias. In new advance nodes, it enables you to specify some custom via's names from the LEF for the router to use. This helps to provide better pin access.  The following is the syntax of the supported values:  {true | false| auto | {-rule ruleName1 viaName viaName} {-rule ruleName2 viaName viaName} {-prefix_name viaPrefix }}  Specify one of the following arguments:
.RS  "*" 2 true: Specify true to turn on auto via generation.  "*" 2 false: Specify false to turn off auto via generation.  "*" 2 auto: Specify auto to enable via generation based on process nodes and allow Innovus to decide to turn on or off.  "*" 2 -rule <ruleName1 viaName viaName>: Specify -rule to enable Innovus to use the provided via list for the specified rule.  "*" 2 -prefix_name: Specify -prefix_name to add a prefix to the auto generated via names. By default, NR_ prefix is used by the tool.
.RE   For example,
.RS  "*" 2 The following command signifies that M0 pins use VIA0_1 and VIA0_2 for default routing.  setNanoRouteMode -route_use_auto_via "-rule default VIA0_1 VIA0_2"  "*" 2 The following command signifies that for nets with HV_NDR rule, use the specified list via's only for those layers. For other layers Innovus can choose other via's defined in the NDR rule section or it can auto generate. Only 5 via's per layer per rule can be defined:  setNanoRouteMode -route_use_auto_via {-rule HV_NDR HV_NDR_VIA4_2x1 HV_NDR_VIA5_2x1 HV_NDR_VIA6_2x1HV_NDR_VIA7_2x1}  Note: If you have two NDR rules for which you want to specify a list of via's then it should be specified as one string.  setNanoRouteMode -route_use_auto_via { {-rule ruleName viaName viaName} {-rule ruleName2 viaName2 } }  routeDesign/globalDetailRoute  Note: The NanoRoute router treats VIA and USEVIA definitions as soft constraints when the -routeUseAutoVia parameter is enabled (default is enabled). The vias specified with VIA or USEVIA LEF rules are considered as target vias along with other auto-generated vias. To specify a hard constraint for the vias to use, use the USEVIACUTCLASS rule. Alternatively, specify the following:  setNanoRouteMode -route_use_auto_via -rule ndr_rule_name viaName  "*" 2 The following command signifies that the NanoRoute router will use blockA as the prefix for auto generated vias names instead of NR_.  setNanoRouteMode -route_use_auto_via "-prefix_name blockA
.RE   Default: auto  Data_type: string  "\fB-route_via_weight{<via_name> <via_weight
...>}\fR" Specifies the priority or the order of vias for post route via swap to use. It sets the via weight for the specified via. The bigger the number, the higher priority the via is given. A negative value means the via will not be used.  You can use wildcards for the via_name. For example:  setNanoRouteMode -route_via_weight {*FBD* 8, *FBS* 7, *PBD* 6, *PBS* 5, *2cut_p1* 4, *2cut_p2* 3, *2cut_p3* 2, *FAT* 1}  Note: Via name can be a predefined class of vias such as @1cut and @2cut. Here, @1cut stands for single cut vias, @2cut stands for double cut vias.  In case of duplicated value setting of via, the latest value will be used. For example:setNanoRouteMode -route_via_weight {@1cut 2 @2cut 4 VIA12_1cut 1}  Here, VIA12_1cut was first set weight to 2, and then set to 1, the final weight of VIA12_1cut is 1.  When you specify this option to do post route via swap, it's important to set the related options to improve the DFM and double cut via ratio.
.RS  "*" 2 Specify -route_reserve_space_for_multi_cut true before detail route to reserve space for inserting multicut vias in postroute via swap stage.
.RE
.RS  "*" 2 Specify -route_with_timing_driven false and -route_detail_post_route_swap_via multiCut to swap the single cut via to DFM and double cut via as much as possible.
.RE   Note: If you have two NDR rules for which you want to specify a list of via's then it should be specified as one string.  setNanoRouteMode -route_use_auto_via { {-rule rule_name via_name via_name} {-ruleruleName2 viaName2 } }  routeDesign/globalDetailRoute  Note: The NanoRoute router treats VIA and USEVIA definitions as soft constraints when the -routeUseAutoVia parameter is enabled (default is enabled). The vias specified with VIA or USEVIA LEF rules are considered as target vias along with other auto-generated vias. To specify a hard constraint for the vias to use, use the USEVIACUTCLASS rule. Alternatively, specify the following:  setNanoRouteMode -route_use_auto_via -rule ndr_rule_name viaName  The following command signifies that the NanoRoute router will use blockA as the prefix for auto generated vias names instead of NR_.  setNanoRouteMode -route_use_auto_via "-prefix_name blockA  Default: auto   Data_type: string  Range: -1 to 256  Default: ""(empty string)  Data_type: string  "\fB-route_with_eco {true|false}  \fR" Routes in engineering change order (ECO) mode if globalDetailRoute is specified. During ECO mode, NanoRoute completes partial routes with added logic, while maintaining the existing wire segments as much as possible.   Note: The Innovus software also has an ecoRoute command.  Default: false  Data_type: bool  "\fB-route_with_litho_driven {true|false}  \fR" Avoids lithography problems during routing by avoiding certain routing patterns that might lead to the creation of lithography hotspots.  Default: false  Data_type: bool  "\fB-route_with_si_driven {true|false}  \fR" Prevents or reduces crosstalk. Works in conjunction with timing-driven routing. When timing-driven routing is specified, uses SMART routing to identify victim nets and minimize crosstalk by wire spacing, layer hopping, net ordering, and minimizing the use of long parallel wires. When timing-driven routing is not specified, uses an older signal integrity engine to minimize crosstalk by preventing or reducing the use of long parallel wires.  Specify -route_with_timing_driven and -route_with_si_driven to run SMART routing.  Default: false  Data_type: bool  "\fB-route_with_timing_driven {true|false}  \fR" Minimizes timing violations by analyzing the timing slack for each path, the drive strengths of each cell in the library, and the maximum capacitance and maximum transition limits. During timing-driven routing, NanoRoute routes multi-pin nets to the most critical sink first, performs wire optimization by reducing resistance and coupling, and continually adjusts detouring.  When this parameter is set to true, the router automatically generates a timing information file named
.timingfile.tif in the working directory. It uses this file when it runs timing driven routing.  Note: Specify the following commands and to skip the CTE call and timing file generation step and use the specified file:writeDesignTiming <file_name>   setNanoRouteMode -route_with_timing_driven true   Specify -route_with_timing_driven and -route_with_si_driven to run SMART routing.  You can use the -route_with_timing_driven parameter to reduce the timing closure effort during post-route ECO. NanoRoute will replace via to multi-cut via on non-critical nets, if a violation does not occur.  Default: false  Data_type: bool  "\fB-route_with_trim_metal <value>  \fR" Specifies the preferred trim metal grid for NanoRoute Router to use. You can specify the value in the following format:  {-layer layerNumber -mask1 {-pitch value -core_offset value} -mask1 { -pitch value
... } -mask2 { -pitch value
... } -mask2 {-pitch value
... }}  For example, the following command specifies the preferred trim metal grid on layer 2.  setNanoRouteMode -route_with_trim_metal {-layer 2 -mask1 {-pitch 0.300 -core_offset 0.025 } \\  -mask1 {-pitch 0.300 -core_offset 0.195 } \\  -mask2 {-pitch 0.300 -core_offset 0.065 } \\  -mask2 {-pitch 0.300 -core_offset 0.235  }}  Note: The width value is taken from the LEF.  Default: " "  Data_type: string  "\fB-route_with_via_in_pin {true| false | <bottomLayerNum>:<topLayerNum>}  \fR" Encloses via geometries completely inside standard cell pins. Specify true for this parameter to avoid MINSTEP violations for standard cell pin access.  Default: false  Note: To avoid violations, specify the same value for this parameter throughout the entire design flow.
.RS  "*" 2 true: Enclose vias inside standard cell pins on all layers.
.RE
.RS  "*" 2 false: The router is not required to enclose vias inside standard cell pins.
.RE
.RS  "*" 2 bottomLayerNum:topLayerNum: Enclose vias inside standard cell pins on layers in the specified layer range.
.RS  "*" 2 1:1: Specifies that Metal1 pins must enclose vias.  "*" 2 2:5: Specifies that pins on Metal2, Metal3, Metal4, and Metal5 must enclose vias. Pins on other layers are not required to enclose vias.
.RE 
.RE   Default: false  Data_type: string  "\fB-route_with_via_only_for_block_cell_pin <value>  \fR" Encloses via in pin shape for macro cell pins.  Default: false  Data_type: string  "\fB-route_with_via_only_for_stdcell_pin {true| false | <bottomLayerNum>:<topLayerNum>}\fR" Allows standard cell pins to be accessed by vias only. Prohibits planar access.   Default: false
.RS  "*" 2 true: Always use vias for standard cell pin access on all layers.
.RE
.RS  "*" 2 false: Use vias or planar access for standard cell pins on all layers.
.RE
.RS  "*" 2 <bottomLayerNum>:<topLayerNum>: Always use vias for pin access in the specified layer range.
.RE
.RS  "*" 2
.RS  "*" 2 1:1: Always use vias for access to Metal1 standard cell pins. Metal2 and above can use vias or planar access.  "*" 2 2:5: Always use vias for access to standard cell pins on Metal2, Metal3, Metal4, and Metal5. Metal1 and Metal6 (and above) can use vias or planar access.
.RE 
.RE   Note: Set this option before any routing or verification because it affects the pin access preparation steps. In addition, after you set this option, the access remains for same the entire Innovus session. Do not change the setting, even for future routing sessions that load saved data from the database or a saved DEF file.  For example, if a design with pins on Metal1 and Metal2 is routed with this option set to 1:1, the router uses vias for access to all standard cell pins on Metal1, and vias or planar access to standard cell pins on Metal2. If you save the design after routing, then import the design in a different Innovus session and route it again with this option set to true (that is, forcing the router to use vias to access all standard cell pins on all layers), you might have planar connections (from the previous routing session) to pins on Metal2. All the planar connections to those pins become violations, because they are not allowed when this option is set to true.  Default: false  Data_type: string
.P 
.SH Examples
.RS  "*" 2 The following commands show the steps in basic routing strategy with the NanoRoute router.  The router globally routes the design:  globalRoute
.RE
.RS  "*" 2 The router does the initial detailed routing (iteration 0 does not include a search-and-repair step), and saves the design as droute0:  setNanoRouteMode -route_detail_end_iteration 0  detailRoute  saveDesign droute0
.RE
.RS  "*" 2 The router does the first search-and-repair iteration, and saves the design for analysis:  setNanoRouteMode -route_detail_end_iteration 1  detailRoute  saveDesign droute1
.RE
.RS  "*" 2 The router does the second to nineteenth search-and-repair iterations, and saves the design for analysis. The switch box grows larger as the iteration number increases.  setNanoRouteMode -route_detail_end_iteration 19  detailRoute  saveDesign droute19
.RE
.RS  "*" 2 The router runs postroute optimization (-route_detail_end_iteration default) and additional search-and-repair operations, and saves the design as droute:  setNanoRouteMode -route_detail_end_iteration default  detailRoute  saveDesign droute
.RE
.RS  "*" 2 The following commands route selected nets, then route the remaining nets in the design:   setNanoRouteMode -route_selected_net_only true  globalDetailRoute  setNanoRouteMode -route_selected_net_only false  globalDetailRoute
.RE
.RS  "*" 2 The following commands route a placed design in timing-driven mode and output a routed DEF file:   restoreDesign  setNanoRouteMode -route_with_timing_driven true  saveDesign init  globalDetailRoute  saveDesign droute  defOut -floorplan -routing droute.def
.RE
.RS  "*" 2 The following command resets the -route_selected_net_only parameter to its default value:   setNanoRouteMode -reset -route_selected_net_only
.RE
.RS  "*" 2 The following command resets all setNanoRouteMode parameters to their default values:   setNanoRouteMode -reset 
.RE
.RS  "*" 2 The following command sets the weight of via12 o 1 and via23 to 2:   setNanoRouteMode -route_via_weight {via12 1 via23 2} 
.RE
.RS  "*" 2 The following command resets the weight of via12 to 3:   setNanoRouteMode -route_via_weight {via12 3 via34 2}
.RE 
.SH Related Information
.RS  "*" 2 detailRoute  "*" 2 getNanoRouteMode  "*" 2 globalRoute  "*" 2 globalDetailRoute  "*" 2 routeDesign  "*" 2 setAttribute  "*" 2 Using the NanoRoute Router chapter in the Innovus User Guide
.RE
.P
