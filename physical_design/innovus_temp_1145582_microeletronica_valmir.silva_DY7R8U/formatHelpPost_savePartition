.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH savePartition  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBsavePartition\fR \-  Saves the partition information to the current directory or a specified directory
.SH Syntax \fBsavePartition\fR       [-help]       [     <partitionName>      {     <list>     }]       [-fplan]       [-noStdCells]       [-noTrialRoute]   [-verilog]       [ [-dir      <dirName>     ]       [ {[-noFPlan | {[-noNetlist] [-savePlacement]}]       [-def [-savePlacement]]       [-defNoCutRow]       [-ptnSite]   [-module_model_tag <tag_name>]           [-topLevelNoPtnModule]} |       {[-ptnLib      <ptnLibName>     ][-ptnView      <ptnViewName>     ][-topView      <topViewName>     ]}]] 
.P Saves the partition information to the current directory or a specified directory. This command is run after running the partition command to generate timing budget files and stamp model files.
.P Notes:
.RS  "*" 2 The savePartition command does not write GNC rules in the partition floorplan file for multiple-supply voltage (MSV) designs.The Common Power Format (CPF) file contains this information.  "*" 2 The savePartition command supports partitions with FlexModels. If there are FlexModels at the top-level, then the saved top-level netlist contains FlexModels. If there are no FlexModels outside partitions, then the top-level netlist will be the original full netlist. Similarly, if a partition has FlexModels, then its partition netlist will contain flexmodes.
.RE
.RS  "*" 2 The savePartition command saves a file with the hierarchy information into the top-level design directory for a FlexModel design with nested partitions. This hierarchy information is used by the replace_proto_model command. When the replace_proto_model command replaces the FlexModel netlist  back to the original full netlist after the savePartition command, the hierarchy information for the nested partitions is automatically available.  "*" 2 The savePartition command saves the design information to the global init_* variables in the *.global file.  "*" 2 The savePartition command supports multi-threading. This reduces the run time for huge designs by saving individual blocks in parallel.  "*" 2 The savePartition command saves mmmc data without timing information for partitions for which timing budgets are not derived.  "*" 2 The savePartition command automatically saves all the bus guide constraints with associated net groups. This enables bus routing at block level as per chip level constraints.  "*" 2 The savePartition command automatically saves all the cell padding information to each partition block data. This information is saved in partitioned block
.fp file.  "*" 2 The savePartition command inherits all the attributes assigned to a net for block implementation flow. Preserving these attributes allows the Early Global Router and the NanoRoute Router to route the nets following specific requirements.  "*" 2 The savePartition command writes out an additional DEF file for each block with its scan information in the <partition_name>.scandef.gz format.   "*" 2 The savePartition command saves an additional file in each parent directory in the <design_name>.pg.gz format to support for PG-file in hierarchical flow. The assembleDesignassembleDesign command loads this file when it is run with the -fe mode. 
.RE 
.SH Parameters   "\fB-help\fR" Outputs a brief description that includes type and default information for each savePartition parameter. For a detailed description of the command and all of its parameters, use the man command: man savePartition  "\fB-def\fR" Writes out the DEF format files for the design.  Data_type: bool, optional  "\fB-defNoCutRow\fR" Specifies that, when row information is written to the DEF file, the rows are not cut against placement obstructions, block halos, or power domain fence minimum gaps.  Data_type: bool, optional  "\fB-dir <dirName>\fR" The directory name that will contain the partition information/files.  Data_type: string, optional  "\fB-fplan \fR" Writes out incremental floorplan by pushing down floorplan changes from a full chip level design to a partition block. This option allows you to run savePartition for a uncommitted partition without running the partition command. For committed partition savePartition -fplan reports an error. The savePartition -fplan -dir command honors blackboxes and saves limited floorplan information for blackboxes in the previously saved data created by the savePartition -dir command..  Note: After savePartition -fplan command, a non-committed partition still remains uncommitted.  Data_type: bool, optional  "\fB-module_model_tag <tag_name>\fR" Specifies the module model tag to be used for saving the partition. This creates pnr and lef module models for each partition block. For top-level design, this also creates a pnr module model.  Note: This parameter is part of the Integrated Hierarchical Database (iHDB) flow. Before using this parameter, you must set the default central directory name (set_module_model -default_dir <default_model_data_directory> ) where the module models data will be saved/loaded.  Note: These block-level and top-level pnr models should be used for implementing the block-level and top-level designs, respectively.  For example, if design dtmf has the ptn_wrapper partition and the default global data directory is /myproject/DATA. With savePartition -module_model_tag init, a pnr model will be created for top-level design in the following directory: myproject/DATA/dtmf/init/pnr.  For partition ptn_wrapper, a pnr and lef models will be created in the /myproject/DATA/ptn_wrapper/init/pnr and /myproject/DATA/ptn_wrapper/init/lef directories.  Data_type: string, optional  "\fB-noFPlan\fR" Saves partitions without generating a floorplan file for the partitioned design.  Data_type: bool, optional  "\fB-noNetlist\fR" Saves partitions without generating a netlist file for the partitioned design.  Data_type: bool, optional  "\fB-noStdCells\fR" When you specify this option, standard cells are not written in the DEF file.  Data_type: bool, optional  "\fB-noTrialRoute\fR" When you specify this option, routed wires are not written in the DEF file.  Data_type: bool, optional  "\fB<partitionName> <list>  \fR" Specifies the names of each partition to be saved.  Data_type: string, optional  "\fB-ptnLib <ptnLibName>\fR" Specifies an OpenAccess database library directory where the top-level design and the block-level design for all the partitions will be saved. This parameter is used when saving the partition into an OpenAccess database.  Note: For OpenAccess data, you can save the specified partitions using the partitionName parameter. However, if the specified partition is a top-level design then all committed partitions must be saved just like no partition names are specified to avoid unbound references in OpenAccess.  Data_type: string, optional  "\fB-ptnSite\fR" Outputs sites for partitions in the LEF file.  Data_type: bool, optional  "\fB-ptnView <ptnViewName>\fR" Specifies the view name for the top and the partition views. This parameter is used when saving the partition into an OpenAccess database.  Default: The default value of the view is layout  Note:
.RS  "*" 2 If -ptnView is specified, but not -ptnLib, then the current design lib is used. You do not have to use the savePartition command to create a special library to hold the partition data. You can create the partition data into the same design library that holds the full-flat version of the design. In this case, cellviews will be overwritten if they already exist.  "*" 2 If -ptnView is specified, but not -topView, then all cell views created with the savePartition command will have the ptnViewName appended to the top cell's cellview. In order to prevent overwriting the top cell's cellview if the name already exists, use the -topView option to specify a different view name than the one used for the rest of the partitions being created by the savePartition command.  "*" 2 If -dir is specified, but -ptnView is not, then the savePartition command would be in the non-OA mode. If -dir and -ptnView are specified then the dir is created, but instead of putting design data into it, only the cds.lib is added to the directories created.
.RE   Data_type: string, optional  "\fB-savePlacement\fR" When used with the -def parameter, specifies that the unplaced standard cells should also be saved to the DEF file. This is equivalent to the -unplaced parameter of the defOutcommand. When used with the -pdef parameter, specifies that the placed standard cells should also be saved to the PDEF file.  Data_type: bool, optional  "\fB-topLevelNoPtnModule\fR" Suppresses stub verilog modules for partitions in the top-level partition netlist.  Data_type: bool, optional  "\fB-topView <topViewName>\fR" Specifies view name for top design.  Data_type: string, optional  "\fB-verilog\fR" Writes out an ASCII Verilog file to the saved partition directory. The netlist is always stored as a binary file, so this Verilog file is not used by restoreDesign. It is sometimes useful to save the Verilog in addition to the other saved files to make it possible to send the Verilog directly to other tools, or to open it in an editor for debugging. Otherwise, you need to load the design into Innovus, and call saveNetlist to see the Verilog file.  Data_type: bool, optional 
.SH Example
.RS  "*" 2 The following command saves the partition information/files in a directory try3 hierarchically for each of the three partitions:   savePartition -dir try3 TOPCHIP_SP sheet17 sheet25 sheet7   "*" 2 The following command saves the partition information/files in the OpenAccess database format.   The information for the top and the block level designs (all blocks) will be written in the libForOA directory view with the name ptnView1.   It saves partitions without generating a floorplan file or a net list for the partitioned design. It also does not write the standard cells or trialRoute wires in the DEF file.  savePartition -ptnLib libForOA -ptnView ptnView1 -noFPlan -noNetlist -noStdCells -noTrialRoute
.RE 
.SH Related Information
.RS  "*" 2 partition  "*" 2 deletePartition  "*" 2 definePartition  "*" 2 restoreDesign  "*" 2 assembleDesignassembleDesign  "*" 2 set_module_model  "*" 2 Partitioning the Design chapter in the Innovus User Guide
.RS  "*" 2 Saving Partitions
.RE 
.RE
.P
