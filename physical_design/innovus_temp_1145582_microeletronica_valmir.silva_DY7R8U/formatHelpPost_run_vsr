.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH run_vsr  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBrun_vsr\fR \-  Launches the Virtuoso Space-based Router (VSR) from Innovus Implementation System
.SH Syntax \fBrun_vsr\fR    [-help]     [-log_file <fileName>]     [-no_taper_to_pinwidth]    [-post_load_script <scriptname>]    [-pre_load_script <scriptname>]    [-remove_existing_route]    [-route_type_order {bus diffPair match nets shield}]  [-run_VSR_Script <scriptname>]    [-share_shields]     [-sel_net <list_of_selected_nets> | -incl_net_type {bus diffPair match nets shield} | -nets_file <fileName>]
.P Launches the Virtuoso Space-based Router (VSR) from Innovus Implementation System. It works on OpenAccess design as well as restored non-OpenAccess designs. It routes the nets specified with the -sel_net, -nets_file, or -incl_net_type option. If the -incl_net_type option is used, the nets are routed in the following order: diffPair, match, bus, nets, and shield. To invoke this wrapper, make sure Virtuoso is available in your path.
.P Before running the run_vsr command, set the following:
.P setOaxMode -compressLevel 1
.P Notes
.RS  "*" 2 Integration constraints are used to convey the design intent in a mixed-signal design. These constraints are fully interoperable between the digital and custom environments.  "*" 2  If you run run_vsr on an abstract inferred from layout, you may see the following WARNING message:  "The current database uses quick abstract inference and should be used only for floorplanning and not for routing purposes."
.RE
.P For more information on using run_vsr, see the Routing Constraint Interoperability chapter in the Mixed Signal Interoperability Guide. 
.P 
.SH Parameters   "\fB-help\fR" Prints a brief description that includes the type and default information for each run_vsr parameter.  For a detailed description of the command and all of its parameters, use the man command   man run_vsr  "\fB-incl_net_type {bus diffPair match nets shield}\fR" Specifies the list of valid net types for VSR to route.  Note: The -sel_net, -nets_file, and -incl_net_type parameters are mutually exclusive. Do not specify these parameters at the same time.  "\fB-log_file <fileName>  \fR" Specifies the file name for writing the routing report.  "\fB-nets_file <fileName>  \fR" Specifies the name of the file listing the nets to be routed.  Note: The -sel_net, -nets_file, and -incl_net_type parameters are mutually exclusive. Do not specify these parameters at the same time.  "\fB-no_taper_to_pinwidth\fR" Does not perform tapering based on the pin width. For instance, if the rule applied on a mixed signal net is NDR1 whose width exceeds the pin width for a particular layer, then VSR automatically tapers the wire to match the pin width. If this option is specified, then tapering is not done.  "\fB-post_load_script <scriptname>  \fR" Specifies the name of the script to be executed by VSR after loading the design.  "\fB-pre_load_script <scriptname>  \fR" Specifies the name of the script to be executed by VSR before loading the design.  "\fB-remove_existing_route\fR" Deletes the nets (fixed, normal), including shield, and excluding power nets, which are specified by the -sel_net parameter before routing  "\fB-route_type_order {bus diffPair match nets shield}\fR" Specifies the list of valid constraint types in the preferred routing order.   "\fB-run_VSR_Script <scriptname>  \fR" Specifies a user-defined script to be run by VSR for custom routing. If this option is specified, the router skips all presetting from VSR and routes the design by sourcing the complete custom script as provided.  "\fB-share_shields\fR" Shares the shielded nets. Using this parameter, you can selectively specify the list of shared shielded nets.   "\fB-sel_net <list_of_selected_nets>  \fR" Specifies the list of nets that have to be routed. 
.SH Using Scripts and Environmental Variables with run_vsr
.P The run_vsr command in Innovus supports a limited set of options to route the analog/mixed-signal nets. To have more control of the VSR engine, you can set additional settings through the
.cdsenv file.
.P Settings through
.cdsenv
.P Here are two examples of how you can use
.cdsenv settings to control VSR:
.RS  "*" 2 To force VSR to route on-grid:  layout routeUseGrid cyclic "Routing"   "*" 2 To force VSR to use the rules from the specified route spec:  layout wireConstraintGroup string "LEFDefaultRouteSpec"
.RE
.P If you set the above settings in the
.cdsenv file before running the run_vsr command, Virtuoso initializes them before calling the VSR engine. 
.P In addition to the settings through
.cdsenv file, the run_vsr command is enhanced to pass additional variables or scripts through -pre_load_script and -post_load_script.
.P Preloadscript
.P Usage of settings through -pre_load_script is only for expert VSR users and generally not recommended.
.P Postloadscript
.P Example:
.RS  "*" 2 To enable VSR to use the custom vias and not generated or derived vias:  setvar db.enable_create_derived_vias false   "*" 2 To enable VSR to connect the wires to the center of the pin  setvar droute.snap_to_pin_center true
.RE
.P You can set the above environmental variables in a script and enable them through the following command:
.P run_vsr -sel_net { neta
.....} -post_load_script scriptname...
.P For more information on the environmental variables which can be set, refer to the following documentation:
.RS  "*" 2 "Environment Variables" chapter in the Cadence Space-based Router and Chip Optimizer Command Reference
.RE
.P Note: Consult Cadence for the best use of these variables to obtain the desired results. 
.SH Examples
.RS  "*" 2 The following command routes the bus nets using VSR:   run_vsr -sel_net {DATA[0] DATA[1] DATA[2] DATA[3] DATA[4] DATA[5] DATA[6] DATA[7]}
.RE
.RS  "*" 2 The following command routes the given net lbk_bstart using mixed-signal constraint, if any constraint has been applied to this net which will be taken from OpenAccess database:   run_vsr -sel_net lbk_bstart
.RE
.RS  "*" 2 The following command routes all the nets which have diffPair, matchPair and then net class in the following order of constraint types:   run_vsr -incl_net_type {diffPair match nets}
.RE 
.SH Related Information
.RS  "*" 2 Routing Constraint Interoperability chapter in the Mixed Signal Interoperability Guide  "*" 2 Tools Menu chapter in the Menu Reference
.RS  "*" 2 Mixed Signal -> Run VSR
.RE 
.RE
.P
