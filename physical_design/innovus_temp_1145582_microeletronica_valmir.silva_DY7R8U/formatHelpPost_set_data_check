.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH set_data_check  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBset_data_check\fR
.SH Syntax \fBset_data_check\fR  [-help]  <<check_value>>  [-clock <<clock_object>>]  [-hold]  [-setup]  {-from <<pin_or_port_list>> | -rise_from <<pin_or_port_list>> | -fall_from <<pin_or_port_list>>}   {-to <<pin_or_port_list>> | -rise_to <<pin_or_port_list>> | -fall_to <<pin_or_port_list>>} 
.P Sets data-to-data checks using the specified values of setup and hold time. Data-to data checks are non-sequential checks that are designed to constrain a data signal with respect to another data signal.
.P In a normal sequential check, a data signal is constrained with respect to a clock signal. In these cases single-cycle timing is used - allowing one full clock cycle for the data transfer. In a non-sequential data-to-data check, there is no clock reference. Therefore, zero-cycle timing rules are used. You can use the set_multicycle_path constraint to adjust the cycle accounting rules. 
.SH Parameters    "\fB-clock <clock_object>\fR" Specifies the name of the clock that triggers the data event for the related (-from) pin.  In the case where there are multiple data events triggered by different clock phases arriving at the -from pin, the -clock parameter allows you to specify which data event should be used for the "related pin" side of the timing check.  "\fB{-from <<pin_or_port_list>> | -rise_from <<pin_or_port_list>> | -fall_from <<pin_or_port_list>>}\fR" Specifies the pins or ports that are set as related pins for data-to-data checks.  The <pin_or_port_list> argument can contain either object IDs or hierarchical names relative to the current module.   Use only one -from, -rise_from, or -fall_from parameter per command.  By default, the -from parameter checks both the rising and the falling edges.  Using -rise_from parameter checks at the rising edge of the signal on the from pins.  Using -fall_from parameter checks at the falling edge of the signal on the from pins.  Note: You cannot use the -from parameter to specify multiple objects.  "\fB-setup | -hold\fR" Specifies whether the data check value is for setup or hold check. If you do not specify either -setup or -hold option, the value applies to both setup and hold.  "\fB{-to <<pin_or_port_list>> | -rise_to <<pin_or_port_list>> | -fall_to <<pin_or_port_list>>}\fR" Specifies the pins or ports that are set as constrained pins for data-to-data checks.  The <pin_or_port_list> argument can contain either object IDs or hierarchical names relative to the current module.  Use only one -to, -rise_to, or -fall_to parameter per command.  By default, the -to parameter constrains both the rising and the falling edges.  Using -rise_to parameter constrains the rising edge of the signal on the to pins.  Using -fall_to parameter constrains the falling edge of the signal on the to pins.  "\fB<check_value>\fR" Specifies the value of the setup or hold time for the check. 
.SH Examples
.RS  "*" 2 The following example demonstrates how the set_data_check command can be used to constrain signals:   Consider two control signals, say XE and SE, going to a macro block. Both of these are derived from the same state machine, and hence launched from the same clock domain. You want XE to reach the macro earlier than SE. The set_data_check constraint can meet this design intent, by applying data checks on non-sequential signals, without setting path specific limits using the following command:  set_data_check -from [get_pins {sub/SE}] -to [get_pins {sub/XE}] -setup 0.5  The set_data_check command establishes data-to-data checks using similar ideas of setup and hold time as in sequential checks, with the -from parameter denoting the reference signal (the clock in a traditional setup/hold timing check), and the -to parameter indicating the signal being constrained.
.RE 
.SH Related Information
.RS  "*" 2 reset_data_check
.RE
.P
