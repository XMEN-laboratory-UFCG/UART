.nf
.P Product Version     22.14    Cadence Design Systems, Inc. 
.fi
.TH parse_proc_arguments  22.14 "Fri Oct 06 02:12:27 2023" 
.SH Name \fBparse_proc_arguments\fR \-  Supports argument validation within a Tcl procedure and enables the use of the -help option to view the help information associated with the procedure
.SH Syntax \fBparse_proc_arguments\fR  [-help]  <result_array>  [<forced_proc>]  -args <string> 
.P Supports argument validation within a Tcl procedure and enables the use of the -help option to view the help information associated with the procedure.
.P Procedures using the parse_proc_arguments command will validate the arguments. If the required arguments are missing or have invalid values, the parse_proc_arguments command generates a Tcl error and the calling procedure terminates.
.P The parse_proc_arguments command must be the first command called in the procedure. This command cannot be used outside of a procedure. 
.SH Parameters   "\fB-help\fR" Prints out the command usage.   "\fB-args <string>\fR" Specifies the list of arguments passed to the Tcl procedure.  Data_type: string, required  "\fB<result_array>\fR" Specifies the result array into which the parsed arguments are to be stored.  Data_type: string, required  "\fB<forced_proc>\fR" Specifies the name of the invoking procedure.  Data_type: string, optional 
.SH Examples
.P The following Tcl procedure uses the parse_proc_arguments command for argument validation.
.P proc cmdProc {args} {
.P  parse_proc_arguments -args $args results
.P  foreach argname [array names results] {
.P  puts "$argname = $results($argname)"
.P  }
.P }
.P define_proc_arguments cmdProc -info "Command Description" \\
.P  -define_args \\
.P  {{-string "String help" "string_val" string optional}
.P  {-integer "Int help" "int_value" int optional}
.P  {-list "List help" "list_value" list {optional bind_option -Bool}}
.P  {-boolean_a "BoolA help" "" boolean {optional mutual_exclusive_group g0}}
.P  {-boolean_b "BoolB help" "" boolean {optional mutual_exclusive_group g0}}
.P  {-float_num "Float help" "float_value" float}
.P  {-oosa "One of StringA help" "one_of_str_value" one_of_string {optional value_help {values {v1 v2}}}}
.P  {-oosb "One of StringB help" "one_of_str_value" one_of_string {optional {values {v4 v5}}}}
.P }
.P Now, if the cmdProc procedure is invoked using the following command at the command prompt, argument validation takes place and the following errors are reported.
.P innovus> cmdProc -boolean_a -boolean_b
.P **ERROR: Options '-boolean_a -boolean_b' are mutually exclusive for 'cmdProc'. 
.P Usage: cmdProc [-string string_val] [-integer int_value] [-list list_value] [-boolean_a ]
.P [-boolean_b ] [-float_num float_value] [-oosa one_of_str_value {v1 v2 }] [-oosb one_of_str_value]]
.P **ERROR: Errors in 'cmdProc'.
.P The following command to invoke the cmdProc procedure will also return the errors shown below.
.P innovus> cmdProc -oosa v5
.P **ERROR:  The arguments specified (v5) in cmdProc -oosa are not valid. Refer to the documentation for valid arguments. 
.P Usage: cmdProc [-string string_val] [-integer int_value] [-list list_value] [-boolean_a ]
.P [-boolean_b ] [-float_num float_value] [-oosa one_of_str_value {v1 v2 }] [-oosb one_of_str_value]]
.P **ERROR: Errors in 'cmdProc'.
.P
